
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001594  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401594  00401594  00011594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000006ac  20400000  0040159c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  204006ac  00401c48  000206ac  2**2
                  ALLOC
  4 .stack        00002004  2040075c  00401cf8  000206ac  2**0
                  ALLOC
  5 .heap         00000200  20402760  00403cfc  000206ac  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000206da  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b04c  00000000  00000000  00020733  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000018b3  00000000  00000000  0002b77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000249d  00000000  00000000  0002d032  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000570  00000000  00000000  0002f4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0002fa3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c195  00000000  00000000  00030077  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000068c1  00000000  00000000  0004c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000893ac  00000000  00000000  00052acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000e54  00000000  00000000  000dbe7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 27 40 20 dd 04 40 00 d9 04 40 00 d9 04 40 00     `'@ ..@...@...@.
  400010:	d9 04 40 00 d9 04 40 00 d9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 04 40 00 d9 04 40 00 00 00 00 00 d9 04 40 00     ..@...@.......@.
  40003c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40004c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40005c:	d9 04 40 00 d9 04 40 00 00 00 00 00 01 03 40 00     ..@...@.......@.
  40006c:	15 03 40 00 29 03 40 00 d9 04 40 00 d9 04 40 00     ..@.).@...@...@.
  40007c:	d9 04 40 00 3d 03 40 00 51 03 40 00 d9 04 40 00     ..@.=.@.Q.@...@.
  40008c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40009c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000ac:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000bc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000cc:	d9 04 40 00 00 00 00 00 d9 04 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000ec:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000fc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40010c:	d9 04 40 00 d9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ......@...@...@.
  40012c:	d9 04 40 00 d9 04 40 00 00 00 00 00 d9 04 40 00     ..@...@.......@.
  40013c:	d9 04 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204006ac 	.word	0x204006ac
  40015c:	00000000 	.word	0x00000000
  400160:	0040159c 	.word	0x0040159c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040159c 	.word	0x0040159c
  4001a0:	204006b0 	.word	0x204006b0
  4001a4:	0040159c 	.word	0x0040159c
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004006b1 	.word	0x004006b1
  4001f8:	00400401 	.word	0x00400401
  4001fc:	00400455 	.word	0x00400455
  400200:	00400465 	.word	0x00400465
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400475 	.word	0x00400475
  400210:	00400365 	.word	0x00400365
  400214:	0040039d 	.word	0x0040039d
  400218:	004005a5 	.word	0x004005a5

0040021c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40021c:	b90a      	cbnz	r2, 400222 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40021e:	6601      	str	r1, [r0, #96]	; 0x60
  400220:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400222:	6641      	str	r1, [r0, #100]	; 0x64
  400224:	4770      	bx	lr

00400226 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400226:	6301      	str	r1, [r0, #48]	; 0x30
  400228:	4770      	bx	lr

0040022a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40022a:	6341      	str	r1, [r0, #52]	; 0x34
  40022c:	4770      	bx	lr

0040022e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40022e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400232:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400236:	d105      	bne.n	400244 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400238:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  40023a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40023c:	bf14      	ite	ne
  40023e:	2001      	movne	r0, #1
  400240:	2000      	moveq	r0, #0
  400242:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400244:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400246:	e7f8      	b.n	40023a <pio_get+0xc>

00400248 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400248:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40024a:	f012 0f01 	tst.w	r2, #1
  40024e:	d10d      	bne.n	40026c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400250:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400252:	f012 0f0a 	tst.w	r2, #10
  400256:	d00b      	beq.n	400270 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400258:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d109      	bne.n	400274 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400260:	f012 0f08 	tst.w	r2, #8
  400264:	d008      	beq.n	400278 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400266:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40026a:	e005      	b.n	400278 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40026c:	6641      	str	r1, [r0, #100]	; 0x64
  40026e:	e7f0      	b.n	400252 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400270:	6241      	str	r1, [r0, #36]	; 0x24
  400272:	e7f2      	b.n	40025a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400274:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400278:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40027a:	6001      	str	r1, [r0, #0]
  40027c:	4770      	bx	lr

0040027e <pio_set_output>:
{
  40027e:	b410      	push	{r4}
  400280:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400282:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400284:	b94c      	cbnz	r4, 40029a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400286:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400288:	b14b      	cbz	r3, 40029e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40028a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40028c:	b94a      	cbnz	r2, 4002a2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40028e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400290:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400292:	6001      	str	r1, [r0, #0]
}
  400294:	f85d 4b04 	ldr.w	r4, [sp], #4
  400298:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40029a:	6641      	str	r1, [r0, #100]	; 0x64
  40029c:	e7f4      	b.n	400288 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40029e:	6541      	str	r1, [r0, #84]	; 0x54
  4002a0:	e7f4      	b.n	40028c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4002a2:	6301      	str	r1, [r0, #48]	; 0x30
  4002a4:	e7f4      	b.n	400290 <pio_set_output+0x12>

004002a6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4002a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4002a8:	4770      	bx	lr

004002aa <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4002aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4002ac:	4770      	bx	lr
	...

004002b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4002b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b4:	4604      	mov	r4, r0
  4002b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4002b8:	4b0e      	ldr	r3, [pc, #56]	; (4002f4 <pio_handler_process+0x44>)
  4002ba:	4798      	blx	r3
  4002bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4002be:	4620      	mov	r0, r4
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <pio_handler_process+0x48>)
  4002c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4002c4:	4005      	ands	r5, r0
  4002c6:	d013      	beq.n	4002f0 <pio_handler_process+0x40>
  4002c8:	4c0c      	ldr	r4, [pc, #48]	; (4002fc <pio_handler_process+0x4c>)
  4002ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4002ce:	e003      	b.n	4002d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4002d0:	42b4      	cmp	r4, r6
  4002d2:	d00d      	beq.n	4002f0 <pio_handler_process+0x40>
  4002d4:	3410      	adds	r4, #16
		while (status != 0) {
  4002d6:	b15d      	cbz	r5, 4002f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4002d8:	6820      	ldr	r0, [r4, #0]
  4002da:	4540      	cmp	r0, r8
  4002dc:	d1f8      	bne.n	4002d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4002de:	6861      	ldr	r1, [r4, #4]
  4002e0:	4229      	tst	r1, r5
  4002e2:	d0f5      	beq.n	4002d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4002e4:	68e3      	ldr	r3, [r4, #12]
  4002e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4002e8:	6863      	ldr	r3, [r4, #4]
  4002ea:	ea25 0503 	bic.w	r5, r5, r3
  4002ee:	e7ef      	b.n	4002d0 <pio_handler_process+0x20>
  4002f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002f4:	004002a7 	.word	0x004002a7
  4002f8:	004002ab 	.word	0x004002ab
  4002fc:	204006c8 	.word	0x204006c8

00400300 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400300:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400302:	210a      	movs	r1, #10
  400304:	4801      	ldr	r0, [pc, #4]	; (40030c <PIOA_Handler+0xc>)
  400306:	4b02      	ldr	r3, [pc, #8]	; (400310 <PIOA_Handler+0x10>)
  400308:	4798      	blx	r3
  40030a:	bd08      	pop	{r3, pc}
  40030c:	400e0e00 	.word	0x400e0e00
  400310:	004002b1 	.word	0x004002b1

00400314 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400314:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400316:	210b      	movs	r1, #11
  400318:	4801      	ldr	r0, [pc, #4]	; (400320 <PIOB_Handler+0xc>)
  40031a:	4b02      	ldr	r3, [pc, #8]	; (400324 <PIOB_Handler+0x10>)
  40031c:	4798      	blx	r3
  40031e:	bd08      	pop	{r3, pc}
  400320:	400e1000 	.word	0x400e1000
  400324:	004002b1 	.word	0x004002b1

00400328 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400328:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40032a:	210c      	movs	r1, #12
  40032c:	4801      	ldr	r0, [pc, #4]	; (400334 <PIOC_Handler+0xc>)
  40032e:	4b02      	ldr	r3, [pc, #8]	; (400338 <PIOC_Handler+0x10>)
  400330:	4798      	blx	r3
  400332:	bd08      	pop	{r3, pc}
  400334:	400e1200 	.word	0x400e1200
  400338:	004002b1 	.word	0x004002b1

0040033c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40033c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40033e:	2110      	movs	r1, #16
  400340:	4801      	ldr	r0, [pc, #4]	; (400348 <PIOD_Handler+0xc>)
  400342:	4b02      	ldr	r3, [pc, #8]	; (40034c <PIOD_Handler+0x10>)
  400344:	4798      	blx	r3
  400346:	bd08      	pop	{r3, pc}
  400348:	400e1400 	.word	0x400e1400
  40034c:	004002b1 	.word	0x004002b1

00400350 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400350:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400352:	2111      	movs	r1, #17
  400354:	4801      	ldr	r0, [pc, #4]	; (40035c <PIOE_Handler+0xc>)
  400356:	4b02      	ldr	r3, [pc, #8]	; (400360 <PIOE_Handler+0x10>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	400e1600 	.word	0x400e1600
  400360:	004002b1 	.word	0x004002b1

00400364 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400364:	2803      	cmp	r0, #3
  400366:	d011      	beq.n	40038c <pmc_mck_set_division+0x28>
  400368:	2804      	cmp	r0, #4
  40036a:	d012      	beq.n	400392 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40036c:	2802      	cmp	r0, #2
  40036e:	bf0c      	ite	eq
  400370:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400374:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400376:	4a08      	ldr	r2, [pc, #32]	; (400398 <pmc_mck_set_division+0x34>)
  400378:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40037a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40037e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400380:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400382:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400384:	f013 0f08 	tst.w	r3, #8
  400388:	d0fb      	beq.n	400382 <pmc_mck_set_division+0x1e>
}
  40038a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40038c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400390:	e7f1      	b.n	400376 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400392:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400396:	e7ee      	b.n	400376 <pmc_mck_set_division+0x12>
  400398:	400e0600 	.word	0x400e0600

0040039c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40039c:	4a17      	ldr	r2, [pc, #92]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  40039e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4003a4:	4318      	orrs	r0, r3
  4003a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003aa:	f013 0f08 	tst.w	r3, #8
  4003ae:	d10a      	bne.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
  4003b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003b4:	4911      	ldr	r1, [pc, #68]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003b8:	f012 0f08 	tst.w	r2, #8
  4003bc:	d103      	bne.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003be:	3b01      	subs	r3, #1
  4003c0:	d1f9      	bne.n	4003b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4003c2:	2001      	movs	r0, #1
  4003c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4003c6:	4a0d      	ldr	r2, [pc, #52]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003ca:	f023 0303 	bic.w	r3, r3, #3
  4003ce:	f043 0302 	orr.w	r3, r3, #2
  4003d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003d6:	f013 0f08 	tst.w	r3, #8
  4003da:	d10a      	bne.n	4003f2 <pmc_switch_mck_to_pllack+0x56>
  4003dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003e0:	4906      	ldr	r1, [pc, #24]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003e4:	f012 0f08 	tst.w	r2, #8
  4003e8:	d105      	bne.n	4003f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003ea:	3b01      	subs	r3, #1
  4003ec:	d1f9      	bne.n	4003e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4003ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4003f0:	4770      	bx	lr
	return 0;
  4003f2:	2000      	movs	r0, #0
  4003f4:	4770      	bx	lr
  4003f6:	2000      	movs	r0, #0
  4003f8:	4770      	bx	lr
  4003fa:	bf00      	nop
  4003fc:	400e0600 	.word	0x400e0600

00400400 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400400:	b9a0      	cbnz	r0, 40042c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400402:	480e      	ldr	r0, [pc, #56]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  400404:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400406:	0209      	lsls	r1, r1, #8
  400408:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40040a:	4a0d      	ldr	r2, [pc, #52]	; (400440 <pmc_switch_mainck_to_xtal+0x40>)
  40040c:	401a      	ands	r2, r3
  40040e:	4b0d      	ldr	r3, [pc, #52]	; (400444 <pmc_switch_mainck_to_xtal+0x44>)
  400410:	4313      	orrs	r3, r2
  400412:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400414:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400416:	4602      	mov	r2, r0
  400418:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40041a:	f013 0f01 	tst.w	r3, #1
  40041e:	d0fb      	beq.n	400418 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400420:	4a06      	ldr	r2, [pc, #24]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  400422:	6a11      	ldr	r1, [r2, #32]
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <pmc_switch_mainck_to_xtal+0x48>)
  400426:	430b      	orrs	r3, r1
  400428:	6213      	str	r3, [r2, #32]
  40042a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40042c:	4903      	ldr	r1, [pc, #12]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  40042e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400430:	4a06      	ldr	r2, [pc, #24]	; (40044c <pmc_switch_mainck_to_xtal+0x4c>)
  400432:	401a      	ands	r2, r3
  400434:	4b06      	ldr	r3, [pc, #24]	; (400450 <pmc_switch_mainck_to_xtal+0x50>)
  400436:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400438:	620b      	str	r3, [r1, #32]
  40043a:	4770      	bx	lr
  40043c:	400e0600 	.word	0x400e0600
  400440:	ffc8fffc 	.word	0xffc8fffc
  400444:	00370001 	.word	0x00370001
  400448:	01370000 	.word	0x01370000
  40044c:	fec8fffc 	.word	0xfec8fffc
  400450:	01370002 	.word	0x01370002

00400454 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400454:	4b02      	ldr	r3, [pc, #8]	; (400460 <pmc_osc_is_ready_mainck+0xc>)
  400456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400458:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40045c:	4770      	bx	lr
  40045e:	bf00      	nop
  400460:	400e0600 	.word	0x400e0600

00400464 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400468:	4b01      	ldr	r3, [pc, #4]	; (400470 <pmc_disable_pllack+0xc>)
  40046a:	629a      	str	r2, [r3, #40]	; 0x28
  40046c:	4770      	bx	lr
  40046e:	bf00      	nop
  400470:	400e0600 	.word	0x400e0600

00400474 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400474:	4b02      	ldr	r3, [pc, #8]	; (400480 <pmc_is_locked_pllack+0xc>)
  400476:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400478:	f000 0002 	and.w	r0, r0, #2
  40047c:	4770      	bx	lr
  40047e:	bf00      	nop
  400480:	400e0600 	.word	0x400e0600

00400484 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400484:	283f      	cmp	r0, #63	; 0x3f
  400486:	d81e      	bhi.n	4004c6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400488:	281f      	cmp	r0, #31
  40048a:	d80c      	bhi.n	4004a6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40048c:	4b11      	ldr	r3, [pc, #68]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  40048e:	699a      	ldr	r2, [r3, #24]
  400490:	2301      	movs	r3, #1
  400492:	4083      	lsls	r3, r0
  400494:	4393      	bics	r3, r2
  400496:	d018      	beq.n	4004ca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400498:	2301      	movs	r3, #1
  40049a:	fa03 f000 	lsl.w	r0, r3, r0
  40049e:	4b0d      	ldr	r3, [pc, #52]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004a0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4004a2:	2000      	movs	r0, #0
  4004a4:	4770      	bx	lr
		ul_id -= 32;
  4004a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4004a8:	4b0a      	ldr	r3, [pc, #40]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4004ae:	2301      	movs	r3, #1
  4004b0:	4083      	lsls	r3, r0
  4004b2:	4393      	bics	r3, r2
  4004b4:	d00b      	beq.n	4004ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4004b6:	2301      	movs	r3, #1
  4004b8:	fa03 f000 	lsl.w	r0, r3, r0
  4004bc:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4004c2:	2000      	movs	r0, #0
  4004c4:	4770      	bx	lr
		return 1;
  4004c6:	2001      	movs	r0, #1
  4004c8:	4770      	bx	lr
	return 0;
  4004ca:	2000      	movs	r0, #0
  4004cc:	4770      	bx	lr
  4004ce:	2000      	movs	r0, #0
}
  4004d0:	4770      	bx	lr
  4004d2:	bf00      	nop
  4004d4:	400e0600 	.word	0x400e0600

004004d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004d8:	e7fe      	b.n	4004d8 <Dummy_Handler>
	...

004004dc <Reset_Handler>:
{
  4004dc:	b500      	push	{lr}
  4004de:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4004e0:	4b25      	ldr	r3, [pc, #148]	; (400578 <Reset_Handler+0x9c>)
  4004e2:	4a26      	ldr	r2, [pc, #152]	; (40057c <Reset_Handler+0xa0>)
  4004e4:	429a      	cmp	r2, r3
  4004e6:	d010      	beq.n	40050a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4004e8:	4b25      	ldr	r3, [pc, #148]	; (400580 <Reset_Handler+0xa4>)
  4004ea:	4a23      	ldr	r2, [pc, #140]	; (400578 <Reset_Handler+0x9c>)
  4004ec:	429a      	cmp	r2, r3
  4004ee:	d20c      	bcs.n	40050a <Reset_Handler+0x2e>
  4004f0:	3b01      	subs	r3, #1
  4004f2:	1a9b      	subs	r3, r3, r2
  4004f4:	f023 0303 	bic.w	r3, r3, #3
  4004f8:	3304      	adds	r3, #4
  4004fa:	4413      	add	r3, r2
  4004fc:	491f      	ldr	r1, [pc, #124]	; (40057c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4004fe:	f851 0b04 	ldr.w	r0, [r1], #4
  400502:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400506:	429a      	cmp	r2, r3
  400508:	d1f9      	bne.n	4004fe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40050a:	4b1e      	ldr	r3, [pc, #120]	; (400584 <Reset_Handler+0xa8>)
  40050c:	4a1e      	ldr	r2, [pc, #120]	; (400588 <Reset_Handler+0xac>)
  40050e:	429a      	cmp	r2, r3
  400510:	d20a      	bcs.n	400528 <Reset_Handler+0x4c>
  400512:	3b01      	subs	r3, #1
  400514:	1a9b      	subs	r3, r3, r2
  400516:	f023 0303 	bic.w	r3, r3, #3
  40051a:	3304      	adds	r3, #4
  40051c:	4413      	add	r3, r2
                *pDest++ = 0;
  40051e:	2100      	movs	r1, #0
  400520:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400524:	4293      	cmp	r3, r2
  400526:	d1fb      	bne.n	400520 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400528:	4a18      	ldr	r2, [pc, #96]	; (40058c <Reset_Handler+0xb0>)
  40052a:	4b19      	ldr	r3, [pc, #100]	; (400590 <Reset_Handler+0xb4>)
  40052c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400530:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400532:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400536:	fab3 f383 	clz	r3, r3
  40053a:	095b      	lsrs	r3, r3, #5
  40053c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400540:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400544:	2200      	movs	r2, #0
  400546:	4b13      	ldr	r3, [pc, #76]	; (400594 <Reset_Handler+0xb8>)
  400548:	701a      	strb	r2, [r3, #0]
	return flags;
  40054a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40054c:	4a12      	ldr	r2, [pc, #72]	; (400598 <Reset_Handler+0xbc>)
  40054e:	6813      	ldr	r3, [r2, #0]
  400550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400554:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400556:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40055a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40055e:	b129      	cbz	r1, 40056c <Reset_Handler+0x90>
		cpu_irq_enable();
  400560:	2201      	movs	r2, #1
  400562:	4b0c      	ldr	r3, [pc, #48]	; (400594 <Reset_Handler+0xb8>)
  400564:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400566:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40056a:	b662      	cpsie	i
        __libc_init_array();
  40056c:	4b0b      	ldr	r3, [pc, #44]	; (40059c <Reset_Handler+0xc0>)
  40056e:	4798      	blx	r3
        main();
  400570:	4b0b      	ldr	r3, [pc, #44]	; (4005a0 <Reset_Handler+0xc4>)
  400572:	4798      	blx	r3
  400574:	e7fe      	b.n	400574 <Reset_Handler+0x98>
  400576:	bf00      	nop
  400578:	20400000 	.word	0x20400000
  40057c:	0040159c 	.word	0x0040159c
  400580:	204006ac 	.word	0x204006ac
  400584:	2040075c 	.word	0x2040075c
  400588:	204006ac 	.word	0x204006ac
  40058c:	e000ed00 	.word	0xe000ed00
  400590:	00400000 	.word	0x00400000
  400594:	2040000a 	.word	0x2040000a
  400598:	e000ed88 	.word	0xe000ed88
  40059c:	004013fd 	.word	0x004013fd
  4005a0:	00400839 	.word	0x00400839

004005a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4005a4:	4b3b      	ldr	r3, [pc, #236]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005a8:	f003 0303 	and.w	r3, r3, #3
  4005ac:	2b01      	cmp	r3, #1
  4005ae:	d01d      	beq.n	4005ec <SystemCoreClockUpdate+0x48>
  4005b0:	b183      	cbz	r3, 4005d4 <SystemCoreClockUpdate+0x30>
  4005b2:	2b02      	cmp	r3, #2
  4005b4:	d036      	beq.n	400624 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4005b6:	4b37      	ldr	r3, [pc, #220]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005be:	2b70      	cmp	r3, #112	; 0x70
  4005c0:	d05f      	beq.n	400682 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4005c2:	4b34      	ldr	r3, [pc, #208]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4005c6:	4934      	ldr	r1, [pc, #208]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4005cc:	680b      	ldr	r3, [r1, #0]
  4005ce:	40d3      	lsrs	r3, r2
  4005d0:	600b      	str	r3, [r1, #0]
  4005d2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4005d4:	4b31      	ldr	r3, [pc, #196]	; (40069c <SystemCoreClockUpdate+0xf8>)
  4005d6:	695b      	ldr	r3, [r3, #20]
  4005d8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4005dc:	bf14      	ite	ne
  4005de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4005e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4005e6:	4b2c      	ldr	r3, [pc, #176]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005e8:	601a      	str	r2, [r3, #0]
  4005ea:	e7e4      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4005ec:	4b29      	ldr	r3, [pc, #164]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005ee:	6a1b      	ldr	r3, [r3, #32]
  4005f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005f4:	d003      	beq.n	4005fe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4005f6:	4a2a      	ldr	r2, [pc, #168]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  4005f8:	4b27      	ldr	r3, [pc, #156]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005fa:	601a      	str	r2, [r3, #0]
  4005fc:	e7db      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005fe:	4a29      	ldr	r2, [pc, #164]	; (4006a4 <SystemCoreClockUpdate+0x100>)
  400600:	4b25      	ldr	r3, [pc, #148]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400602:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400604:	4b23      	ldr	r3, [pc, #140]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400606:	6a1b      	ldr	r3, [r3, #32]
  400608:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40060c:	2b10      	cmp	r3, #16
  40060e:	d005      	beq.n	40061c <SystemCoreClockUpdate+0x78>
  400610:	2b20      	cmp	r3, #32
  400612:	d1d0      	bne.n	4005b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400614:	4a22      	ldr	r2, [pc, #136]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400616:	4b20      	ldr	r3, [pc, #128]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400618:	601a      	str	r2, [r3, #0]
          break;
  40061a:	e7cc      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40061c:	4a22      	ldr	r2, [pc, #136]	; (4006a8 <SystemCoreClockUpdate+0x104>)
  40061e:	4b1e      	ldr	r3, [pc, #120]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400620:	601a      	str	r2, [r3, #0]
          break;
  400622:	e7c8      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400624:	4b1b      	ldr	r3, [pc, #108]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400626:	6a1b      	ldr	r3, [r3, #32]
  400628:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40062c:	d016      	beq.n	40065c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40062e:	4a1c      	ldr	r2, [pc, #112]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400630:	4b19      	ldr	r3, [pc, #100]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400632:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400634:	4b17      	ldr	r3, [pc, #92]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400638:	f003 0303 	and.w	r3, r3, #3
  40063c:	2b02      	cmp	r3, #2
  40063e:	d1ba      	bne.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400640:	4a14      	ldr	r2, [pc, #80]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400642:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400644:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400646:	4814      	ldr	r0, [pc, #80]	; (400698 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400648:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40064c:	6803      	ldr	r3, [r0, #0]
  40064e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400652:	b2d2      	uxtb	r2, r2
  400654:	fbb3 f3f2 	udiv	r3, r3, r2
  400658:	6003      	str	r3, [r0, #0]
  40065a:	e7ac      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40065c:	4a11      	ldr	r2, [pc, #68]	; (4006a4 <SystemCoreClockUpdate+0x100>)
  40065e:	4b0e      	ldr	r3, [pc, #56]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400660:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400662:	4b0c      	ldr	r3, [pc, #48]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400664:	6a1b      	ldr	r3, [r3, #32]
  400666:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40066a:	2b10      	cmp	r3, #16
  40066c:	d005      	beq.n	40067a <SystemCoreClockUpdate+0xd6>
  40066e:	2b20      	cmp	r3, #32
  400670:	d1e0      	bne.n	400634 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400672:	4a0b      	ldr	r2, [pc, #44]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400674:	4b08      	ldr	r3, [pc, #32]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400676:	601a      	str	r2, [r3, #0]
          break;
  400678:	e7dc      	b.n	400634 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40067a:	4a0b      	ldr	r2, [pc, #44]	; (4006a8 <SystemCoreClockUpdate+0x104>)
  40067c:	4b06      	ldr	r3, [pc, #24]	; (400698 <SystemCoreClockUpdate+0xf4>)
  40067e:	601a      	str	r2, [r3, #0]
          break;
  400680:	e7d8      	b.n	400634 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400682:	4a05      	ldr	r2, [pc, #20]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400684:	6813      	ldr	r3, [r2, #0]
  400686:	4909      	ldr	r1, [pc, #36]	; (4006ac <SystemCoreClockUpdate+0x108>)
  400688:	fba1 1303 	umull	r1, r3, r1, r3
  40068c:	085b      	lsrs	r3, r3, #1
  40068e:	6013      	str	r3, [r2, #0]
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600
  400698:	2040000c 	.word	0x2040000c
  40069c:	400e1810 	.word	0x400e1810
  4006a0:	00b71b00 	.word	0x00b71b00
  4006a4:	003d0900 	.word	0x003d0900
  4006a8:	007a1200 	.word	0x007a1200
  4006ac:	aaaaaaab 	.word	0xaaaaaaab

004006b0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4006b0:	4b12      	ldr	r3, [pc, #72]	; (4006fc <system_init_flash+0x4c>)
  4006b2:	4298      	cmp	r0, r3
  4006b4:	d911      	bls.n	4006da <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4006b6:	4b12      	ldr	r3, [pc, #72]	; (400700 <system_init_flash+0x50>)
  4006b8:	4298      	cmp	r0, r3
  4006ba:	d913      	bls.n	4006e4 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4006bc:	4b11      	ldr	r3, [pc, #68]	; (400704 <system_init_flash+0x54>)
  4006be:	4298      	cmp	r0, r3
  4006c0:	d914      	bls.n	4006ec <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4006c2:	4b11      	ldr	r3, [pc, #68]	; (400708 <system_init_flash+0x58>)
  4006c4:	4298      	cmp	r0, r3
  4006c6:	d915      	bls.n	4006f4 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4006c8:	4b10      	ldr	r3, [pc, #64]	; (40070c <system_init_flash+0x5c>)
  4006ca:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4006cc:	bf94      	ite	ls
  4006ce:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4006d2:	4a0f      	ldrhi	r2, [pc, #60]	; (400710 <system_init_flash+0x60>)
  4006d4:	4b0f      	ldr	r3, [pc, #60]	; (400714 <system_init_flash+0x64>)
  4006d6:	601a      	str	r2, [r3, #0]
  4006d8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4006da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4006de:	4b0d      	ldr	r3, [pc, #52]	; (400714 <system_init_flash+0x64>)
  4006e0:	601a      	str	r2, [r3, #0]
  4006e2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4006e4:	4a0c      	ldr	r2, [pc, #48]	; (400718 <system_init_flash+0x68>)
  4006e6:	4b0b      	ldr	r3, [pc, #44]	; (400714 <system_init_flash+0x64>)
  4006e8:	601a      	str	r2, [r3, #0]
  4006ea:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4006ec:	4a0b      	ldr	r2, [pc, #44]	; (40071c <system_init_flash+0x6c>)
  4006ee:	4b09      	ldr	r3, [pc, #36]	; (400714 <system_init_flash+0x64>)
  4006f0:	601a      	str	r2, [r3, #0]
  4006f2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4006f4:	4a0a      	ldr	r2, [pc, #40]	; (400720 <system_init_flash+0x70>)
  4006f6:	4b07      	ldr	r3, [pc, #28]	; (400714 <system_init_flash+0x64>)
  4006f8:	601a      	str	r2, [r3, #0]
  4006fa:	4770      	bx	lr
  4006fc:	01312cff 	.word	0x01312cff
  400700:	026259ff 	.word	0x026259ff
  400704:	039386ff 	.word	0x039386ff
  400708:	04c4b3ff 	.word	0x04c4b3ff
  40070c:	05f5e0ff 	.word	0x05f5e0ff
  400710:	04000500 	.word	0x04000500
  400714:	400e0c00 	.word	0x400e0c00
  400718:	04000100 	.word	0x04000100
  40071c:	04000200 	.word	0x04000200
  400720:	04000300 	.word	0x04000300

00400724 <init>:
/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

// Função de inicialização do uC
void init(void){
  400724:	b570      	push	{r4, r5, r6, lr}
  400726:	b082      	sub	sp, #8
	// Initialize the board clock
	sysclk_init();
  400728:	4b10      	ldr	r3, [pc, #64]	; (40076c <init+0x48>)
  40072a:	4798      	blx	r3

	// Desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  40072c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400730:	4b0f      	ldr	r3, [pc, #60]	; (400770 <init+0x4c>)
  400732:	605a      	str	r2, [r3, #4]
	
	// Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED.
	pmc_enable_periph_clk(BUZ_PIO_ID);
  400734:	200c      	movs	r0, #12
  400736:	4d0f      	ldr	r5, [pc, #60]	; (400774 <init+0x50>)
  400738:	47a8      	blx	r5
	
	//Inicializa PC8 como saída
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  40073a:	2400      	movs	r4, #0
  40073c:	9400      	str	r4, [sp, #0]
  40073e:	4623      	mov	r3, r4
  400740:	4622      	mov	r2, r4
  400742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400746:	480c      	ldr	r0, [pc, #48]	; (400778 <init+0x54>)
  400748:	4e0c      	ldr	r6, [pc, #48]	; (40077c <init+0x58>)
  40074a:	47b0      	blx	r6
	
	// Inicializa PIO do botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  40074c:	200a      	movs	r0, #10
  40074e:	47a8      	blx	r5
	
	// configura pino ligado ao botão como entrada com um pull-up.
	pio_set_input(BUT_PIO_ID, BUT_PIO_IDX_MASK, PIO_DEFAULT);
  400750:	4622      	mov	r2, r4
  400752:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400756:	200a      	movs	r0, #10
  400758:	4b09      	ldr	r3, [pc, #36]	; (400780 <init+0x5c>)
  40075a:	4798      	blx	r3
	
	pio_pull_up(BUT_PIO_ID, BUT_PIO_IDX_MASK, 1);
  40075c:	2201      	movs	r2, #1
  40075e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400762:	200a      	movs	r0, #10
  400764:	4b07      	ldr	r3, [pc, #28]	; (400784 <init+0x60>)
  400766:	4798      	blx	r3
}
  400768:	b002      	add	sp, #8
  40076a:	bd70      	pop	{r4, r5, r6, pc}
  40076c:	004001ad 	.word	0x004001ad
  400770:	400e1850 	.word	0x400e1850
  400774:	00400485 	.word	0x00400485
  400778:	400e1200 	.word	0x400e1200
  40077c:	0040027f 	.word	0x0040027f
  400780:	00400249 	.word	0x00400249
  400784:	0040021d 	.word	0x0040021d

00400788 <tone>:

void tone(int freq, int dur){
  400788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// recebe uma frequência em Hertz e uma duração em milisegundos
	int t = 500000/freq; // Tempo em us de pausa: 10e6/(2 * freq)
  40078c:	4b20      	ldr	r3, [pc, #128]	; (400810 <tone+0x88>)
  40078e:	fb93 f8f0 	sdiv	r8, r3, r0
	// 1 loop - 10e6/freq us
	// x loops - 10e3 us
	// x = freq/1000
	int j = (dur * freq)/1000;
  400792:	fb01 f700 	mul.w	r7, r1, r0
  400796:	491f      	ldr	r1, [pc, #124]	; (400814 <tone+0x8c>)
  400798:	fb81 3107 	smull	r3, r1, r1, r7
  40079c:	17ff      	asrs	r7, r7, #31
	for(int i = 0; i <= j; i++){
  40079e:	ebd7 17a1 	rsbs	r7, r7, r1, asr #6
  4007a2:	d432      	bmi.n	40080a <tone+0x82>
		pio_set(PIOC, BUZ_PIO_IDX_MASK);      // Coloca 1 no pino LED
		delay_us(t);                        // Delay por software de 200 ms
  4007a4:	4c1c      	ldr	r4, [pc, #112]	; (400818 <tone+0x90>)
  4007a6:	fba8 0104 	umull	r0, r1, r8, r4
  4007aa:	4642      	mov	r2, r8
  4007ac:	17d3      	asrs	r3, r2, #31
  4007ae:	fb04 1103 	mla	r1, r4, r3, r1
  4007b2:	4a1a      	ldr	r2, [pc, #104]	; (40081c <tone+0x94>)
  4007b4:	2300      	movs	r3, #0
  4007b6:	4c1a      	ldr	r4, [pc, #104]	; (400820 <tone+0x98>)
  4007b8:	2500      	movs	r5, #0
  4007ba:	1900      	adds	r0, r0, r4
  4007bc:	4169      	adcs	r1, r5
  4007be:	4c19      	ldr	r4, [pc, #100]	; (400824 <tone+0x9c>)
  4007c0:	47a0      	blx	r4
  4007c2:	4682      	mov	sl, r0
  4007c4:	2400      	movs	r4, #0
		pio_set(PIOC, BUZ_PIO_IDX_MASK);      // Coloca 1 no pino LED
  4007c6:	4e18      	ldr	r6, [pc, #96]	; (400828 <tone+0xa0>)
  4007c8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 400834 <tone+0xac>
		delay_us(t);                        // Delay por software de 200 ms
  4007cc:	4d17      	ldr	r5, [pc, #92]	; (40082c <tone+0xa4>)
  4007ce:	e00b      	b.n	4007e8 <tone+0x60>
  4007d0:	2033      	movs	r0, #51	; 0x33
  4007d2:	47a8      	blx	r5
		pio_clear(PIOC, BUZ_PIO_IDX_MASK);    // Coloca 0 no pino do LED
  4007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4007d8:	4630      	mov	r0, r6
  4007da:	4b15      	ldr	r3, [pc, #84]	; (400830 <tone+0xa8>)
  4007dc:	4798      	blx	r3
		delay_us(t);
  4007de:	2033      	movs	r0, #51	; 0x33
  4007e0:	47a8      	blx	r5
	for(int i = 0; i <= j; i++){
  4007e2:	3401      	adds	r4, #1
  4007e4:	42a7      	cmp	r7, r4
  4007e6:	db10      	blt.n	40080a <tone+0x82>
		pio_set(PIOC, BUZ_PIO_IDX_MASK);      // Coloca 1 no pino LED
  4007e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4007ec:	4630      	mov	r0, r6
  4007ee:	47c8      	blx	r9
		delay_us(t);                        // Delay por software de 200 ms
  4007f0:	f1b8 0f00 	cmp.w	r8, #0
  4007f4:	d0ec      	beq.n	4007d0 <tone+0x48>
  4007f6:	4650      	mov	r0, sl
  4007f8:	47a8      	blx	r5
		pio_clear(PIOC, BUZ_PIO_IDX_MASK);    // Coloca 0 no pino do LED
  4007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4007fe:	4630      	mov	r0, r6
  400800:	4b0b      	ldr	r3, [pc, #44]	; (400830 <tone+0xa8>)
  400802:	4798      	blx	r3
		delay_us(t);
  400804:	4650      	mov	r0, sl
  400806:	47a8      	blx	r5
  400808:	e7eb      	b.n	4007e2 <tone+0x5a>
  40080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40080e:	bf00      	nop
  400810:	0007a120 	.word	0x0007a120
  400814:	10624dd3 	.word	0x10624dd3
  400818:	11e1a300 	.word	0x11e1a300
  40081c:	005a83e0 	.word	0x005a83e0
  400820:	005a83df 	.word	0x005a83df
  400824:	004010ed 	.word	0x004010ed
  400828:	400e1200 	.word	0x400e1200
  40082c:	20400001 	.word	0x20400001
  400830:	0040022b 	.word	0x0040022b
  400834:	00400227 	.word	0x00400227

00400838 <main>:
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  400838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// inicializa sistema e IOs
	init();
  40083c:	4b26      	ldr	r3, [pc, #152]	; (4008d8 <main+0xa0>)
  40083e:	4798      	blx	r3
  400840:	4b26      	ldr	r3, [pc, #152]	; (4008dc <main+0xa4>)
  400842:	f503 7a9a 	add.w	sl, r3, #308	; 0x134
			for (int thisNote = 0; thisNote < size; thisNote++){
				int noteDuration = 1000/tempo[thisNote];
				
				tone(melody[thisNote],noteDuration);
				int pauseBetweenNotes = noteDuration * 1.30;
				delay_ms(pauseBetweenNotes);
  400846:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 4008fc <main+0xc4>
		if (pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK) == 0){
  40084a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  40084e:	4c24      	ldr	r4, [pc, #144]	; (4008e0 <main+0xa8>)
  400850:	462a      	mov	r2, r5
  400852:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400856:	4823      	ldr	r0, [pc, #140]	; (4008e4 <main+0xac>)
  400858:	47a0      	blx	r4
  40085a:	2800      	cmp	r0, #0
  40085c:	d1f8      	bne.n	400850 <main+0x18>
  40085e:	4b1f      	ldr	r3, [pc, #124]	; (4008dc <main+0xa4>)
  400860:	1f1d      	subs	r5, r3, #4
  400862:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400900 <main+0xc8>
				tone(melody[thisNote],noteDuration);
  400866:	f8df 909c 	ldr.w	r9, [pc, #156]	; 400904 <main+0xcc>
  40086a:	e007      	b.n	40087c <main+0x44>
				delay_ms(pauseBetweenNotes);
  40086c:	2033      	movs	r0, #51	; 0x33
  40086e:	4b1e      	ldr	r3, [pc, #120]	; (4008e8 <main+0xb0>)
  400870:	4798      	blx	r3
				
				tone(0, noteDuration);
  400872:	4621      	mov	r1, r4
  400874:	2000      	movs	r0, #0
  400876:	47c8      	blx	r9
			for (int thisNote = 0; thisNote < size; thisNote++){
  400878:	4555      	cmp	r5, sl
  40087a:	d0e6      	beq.n	40084a <main+0x12>
				int noteDuration = 1000/tempo[thisNote];
  40087c:	f855 3f04 	ldr.w	r3, [r5, #4]!
  400880:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
  400884:	fb94 f4f3 	sdiv	r4, r4, r3
				tone(melody[thisNote],noteDuration);
  400888:	4621      	mov	r1, r4
  40088a:	f858 0f04 	ldr.w	r0, [r8, #4]!
  40088e:	47c8      	blx	r9
				int pauseBetweenNotes = noteDuration * 1.30;
  400890:	4620      	mov	r0, r4
  400892:	4b16      	ldr	r3, [pc, #88]	; (4008ec <main+0xb4>)
  400894:	4798      	blx	r3
  400896:	a30e      	add	r3, pc, #56	; (adr r3, 4008d0 <main+0x98>)
  400898:	e9d3 2300 	ldrd	r2, r3, [r3]
  40089c:	4e14      	ldr	r6, [pc, #80]	; (4008f0 <main+0xb8>)
  40089e:	47b0      	blx	r6
  4008a0:	4b14      	ldr	r3, [pc, #80]	; (4008f4 <main+0xbc>)
  4008a2:	4798      	blx	r3
				delay_ms(pauseBetweenNotes);
  4008a4:	2800      	cmp	r0, #0
  4008a6:	d0e1      	beq.n	40086c <main+0x34>
  4008a8:	17c3      	asrs	r3, r0, #31
  4008aa:	fba0 670b 	umull	r6, r7, r0, fp
  4008ae:	fb0b 7703 	mla	r7, fp, r3, r7
  4008b2:	f241 722c 	movw	r2, #5932	; 0x172c
  4008b6:	2300      	movs	r3, #0
  4008b8:	f241 702b 	movw	r0, #5931	; 0x172b
  4008bc:	2100      	movs	r1, #0
  4008be:	1980      	adds	r0, r0, r6
  4008c0:	4179      	adcs	r1, r7
  4008c2:	4e0d      	ldr	r6, [pc, #52]	; (4008f8 <main+0xc0>)
  4008c4:	47b0      	blx	r6
  4008c6:	4b08      	ldr	r3, [pc, #32]	; (4008e8 <main+0xb0>)
  4008c8:	4798      	blx	r3
  4008ca:	e7d2      	b.n	400872 <main+0x3a>
  4008cc:	f3af 8000 	nop.w
  4008d0:	cccccccd 	.word	0xcccccccd
  4008d4:	3ff4cccc 	.word	0x3ff4cccc
  4008d8:	00400725 	.word	0x00400725
  4008dc:	20400148 	.word	0x20400148
  4008e0:	0040022f 	.word	0x0040022f
  4008e4:	400e0e00 	.word	0x400e0e00
  4008e8:	20400001 	.word	0x20400001
  4008ec:	00400bad 	.word	0x00400bad
  4008f0:	00400c79 	.word	0x00400c79
  4008f4:	0040109d 	.word	0x0040109d
  4008f8:	004010ed 	.word	0x004010ed
  4008fc:	11e1a300 	.word	0x11e1a300
  400900:	2040000c 	.word	0x2040000c
  400904:	00400789 	.word	0x00400789

00400908 <__aeabi_drsub>:
  400908:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40090c:	e002      	b.n	400914 <__adddf3>
  40090e:	bf00      	nop

00400910 <__aeabi_dsub>:
  400910:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00400914 <__adddf3>:
  400914:	b530      	push	{r4, r5, lr}
  400916:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40091a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40091e:	ea94 0f05 	teq	r4, r5
  400922:	bf08      	it	eq
  400924:	ea90 0f02 	teqeq	r0, r2
  400928:	bf1f      	itttt	ne
  40092a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40092e:	ea55 0c02 	orrsne.w	ip, r5, r2
  400932:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  400936:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40093a:	f000 80e2 	beq.w	400b02 <__adddf3+0x1ee>
  40093e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  400942:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  400946:	bfb8      	it	lt
  400948:	426d      	neglt	r5, r5
  40094a:	dd0c      	ble.n	400966 <__adddf3+0x52>
  40094c:	442c      	add	r4, r5
  40094e:	ea80 0202 	eor.w	r2, r0, r2
  400952:	ea81 0303 	eor.w	r3, r1, r3
  400956:	ea82 0000 	eor.w	r0, r2, r0
  40095a:	ea83 0101 	eor.w	r1, r3, r1
  40095e:	ea80 0202 	eor.w	r2, r0, r2
  400962:	ea81 0303 	eor.w	r3, r1, r3
  400966:	2d36      	cmp	r5, #54	; 0x36
  400968:	bf88      	it	hi
  40096a:	bd30      	pophi	{r4, r5, pc}
  40096c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  400970:	ea4f 3101 	mov.w	r1, r1, lsl #12
  400974:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  400978:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40097c:	d002      	beq.n	400984 <__adddf3+0x70>
  40097e:	4240      	negs	r0, r0
  400980:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400984:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  400988:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40098c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  400990:	d002      	beq.n	400998 <__adddf3+0x84>
  400992:	4252      	negs	r2, r2
  400994:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  400998:	ea94 0f05 	teq	r4, r5
  40099c:	f000 80a7 	beq.w	400aee <__adddf3+0x1da>
  4009a0:	f1a4 0401 	sub.w	r4, r4, #1
  4009a4:	f1d5 0e20 	rsbs	lr, r5, #32
  4009a8:	db0d      	blt.n	4009c6 <__adddf3+0xb2>
  4009aa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4009ae:	fa22 f205 	lsr.w	r2, r2, r5
  4009b2:	1880      	adds	r0, r0, r2
  4009b4:	f141 0100 	adc.w	r1, r1, #0
  4009b8:	fa03 f20e 	lsl.w	r2, r3, lr
  4009bc:	1880      	adds	r0, r0, r2
  4009be:	fa43 f305 	asr.w	r3, r3, r5
  4009c2:	4159      	adcs	r1, r3
  4009c4:	e00e      	b.n	4009e4 <__adddf3+0xd0>
  4009c6:	f1a5 0520 	sub.w	r5, r5, #32
  4009ca:	f10e 0e20 	add.w	lr, lr, #32
  4009ce:	2a01      	cmp	r2, #1
  4009d0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4009d4:	bf28      	it	cs
  4009d6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4009da:	fa43 f305 	asr.w	r3, r3, r5
  4009de:	18c0      	adds	r0, r0, r3
  4009e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4009e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4009e8:	d507      	bpl.n	4009fa <__adddf3+0xe6>
  4009ea:	f04f 0e00 	mov.w	lr, #0
  4009ee:	f1dc 0c00 	rsbs	ip, ip, #0
  4009f2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4009f6:	eb6e 0101 	sbc.w	r1, lr, r1
  4009fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4009fe:	d31b      	bcc.n	400a38 <__adddf3+0x124>
  400a00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  400a04:	d30c      	bcc.n	400a20 <__adddf3+0x10c>
  400a06:	0849      	lsrs	r1, r1, #1
  400a08:	ea5f 0030 	movs.w	r0, r0, rrx
  400a0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  400a10:	f104 0401 	add.w	r4, r4, #1
  400a14:	ea4f 5244 	mov.w	r2, r4, lsl #21
  400a18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  400a1c:	f080 809a 	bcs.w	400b54 <__adddf3+0x240>
  400a20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  400a24:	bf08      	it	eq
  400a26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  400a2a:	f150 0000 	adcs.w	r0, r0, #0
  400a2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  400a32:	ea41 0105 	orr.w	r1, r1, r5
  400a36:	bd30      	pop	{r4, r5, pc}
  400a38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  400a3c:	4140      	adcs	r0, r0
  400a3e:	eb41 0101 	adc.w	r1, r1, r1
  400a42:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400a46:	f1a4 0401 	sub.w	r4, r4, #1
  400a4a:	d1e9      	bne.n	400a20 <__adddf3+0x10c>
  400a4c:	f091 0f00 	teq	r1, #0
  400a50:	bf04      	itt	eq
  400a52:	4601      	moveq	r1, r0
  400a54:	2000      	moveq	r0, #0
  400a56:	fab1 f381 	clz	r3, r1
  400a5a:	bf08      	it	eq
  400a5c:	3320      	addeq	r3, #32
  400a5e:	f1a3 030b 	sub.w	r3, r3, #11
  400a62:	f1b3 0220 	subs.w	r2, r3, #32
  400a66:	da0c      	bge.n	400a82 <__adddf3+0x16e>
  400a68:	320c      	adds	r2, #12
  400a6a:	dd08      	ble.n	400a7e <__adddf3+0x16a>
  400a6c:	f102 0c14 	add.w	ip, r2, #20
  400a70:	f1c2 020c 	rsb	r2, r2, #12
  400a74:	fa01 f00c 	lsl.w	r0, r1, ip
  400a78:	fa21 f102 	lsr.w	r1, r1, r2
  400a7c:	e00c      	b.n	400a98 <__adddf3+0x184>
  400a7e:	f102 0214 	add.w	r2, r2, #20
  400a82:	bfd8      	it	le
  400a84:	f1c2 0c20 	rsble	ip, r2, #32
  400a88:	fa01 f102 	lsl.w	r1, r1, r2
  400a8c:	fa20 fc0c 	lsr.w	ip, r0, ip
  400a90:	bfdc      	itt	le
  400a92:	ea41 010c 	orrle.w	r1, r1, ip
  400a96:	4090      	lslle	r0, r2
  400a98:	1ae4      	subs	r4, r4, r3
  400a9a:	bfa2      	ittt	ge
  400a9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  400aa0:	4329      	orrge	r1, r5
  400aa2:	bd30      	popge	{r4, r5, pc}
  400aa4:	ea6f 0404 	mvn.w	r4, r4
  400aa8:	3c1f      	subs	r4, #31
  400aaa:	da1c      	bge.n	400ae6 <__adddf3+0x1d2>
  400aac:	340c      	adds	r4, #12
  400aae:	dc0e      	bgt.n	400ace <__adddf3+0x1ba>
  400ab0:	f104 0414 	add.w	r4, r4, #20
  400ab4:	f1c4 0220 	rsb	r2, r4, #32
  400ab8:	fa20 f004 	lsr.w	r0, r0, r4
  400abc:	fa01 f302 	lsl.w	r3, r1, r2
  400ac0:	ea40 0003 	orr.w	r0, r0, r3
  400ac4:	fa21 f304 	lsr.w	r3, r1, r4
  400ac8:	ea45 0103 	orr.w	r1, r5, r3
  400acc:	bd30      	pop	{r4, r5, pc}
  400ace:	f1c4 040c 	rsb	r4, r4, #12
  400ad2:	f1c4 0220 	rsb	r2, r4, #32
  400ad6:	fa20 f002 	lsr.w	r0, r0, r2
  400ada:	fa01 f304 	lsl.w	r3, r1, r4
  400ade:	ea40 0003 	orr.w	r0, r0, r3
  400ae2:	4629      	mov	r1, r5
  400ae4:	bd30      	pop	{r4, r5, pc}
  400ae6:	fa21 f004 	lsr.w	r0, r1, r4
  400aea:	4629      	mov	r1, r5
  400aec:	bd30      	pop	{r4, r5, pc}
  400aee:	f094 0f00 	teq	r4, #0
  400af2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  400af6:	bf06      	itte	eq
  400af8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  400afc:	3401      	addeq	r4, #1
  400afe:	3d01      	subne	r5, #1
  400b00:	e74e      	b.n	4009a0 <__adddf3+0x8c>
  400b02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  400b06:	bf18      	it	ne
  400b08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  400b0c:	d029      	beq.n	400b62 <__adddf3+0x24e>
  400b0e:	ea94 0f05 	teq	r4, r5
  400b12:	bf08      	it	eq
  400b14:	ea90 0f02 	teqeq	r0, r2
  400b18:	d005      	beq.n	400b26 <__adddf3+0x212>
  400b1a:	ea54 0c00 	orrs.w	ip, r4, r0
  400b1e:	bf04      	itt	eq
  400b20:	4619      	moveq	r1, r3
  400b22:	4610      	moveq	r0, r2
  400b24:	bd30      	pop	{r4, r5, pc}
  400b26:	ea91 0f03 	teq	r1, r3
  400b2a:	bf1e      	ittt	ne
  400b2c:	2100      	movne	r1, #0
  400b2e:	2000      	movne	r0, #0
  400b30:	bd30      	popne	{r4, r5, pc}
  400b32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  400b36:	d105      	bne.n	400b44 <__adddf3+0x230>
  400b38:	0040      	lsls	r0, r0, #1
  400b3a:	4149      	adcs	r1, r1
  400b3c:	bf28      	it	cs
  400b3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  400b42:	bd30      	pop	{r4, r5, pc}
  400b44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  400b48:	bf3c      	itt	cc
  400b4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  400b4e:	bd30      	popcc	{r4, r5, pc}
  400b50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400b54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  400b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b5c:	f04f 0000 	mov.w	r0, #0
  400b60:	bd30      	pop	{r4, r5, pc}
  400b62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  400b66:	bf1a      	itte	ne
  400b68:	4619      	movne	r1, r3
  400b6a:	4610      	movne	r0, r2
  400b6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  400b70:	bf1c      	itt	ne
  400b72:	460b      	movne	r3, r1
  400b74:	4602      	movne	r2, r0
  400b76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  400b7a:	bf06      	itte	eq
  400b7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  400b80:	ea91 0f03 	teqeq	r1, r3
  400b84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  400b88:	bd30      	pop	{r4, r5, pc}
  400b8a:	bf00      	nop

00400b8c <__aeabi_ui2d>:
  400b8c:	f090 0f00 	teq	r0, #0
  400b90:	bf04      	itt	eq
  400b92:	2100      	moveq	r1, #0
  400b94:	4770      	bxeq	lr
  400b96:	b530      	push	{r4, r5, lr}
  400b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400b9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400ba0:	f04f 0500 	mov.w	r5, #0
  400ba4:	f04f 0100 	mov.w	r1, #0
  400ba8:	e750      	b.n	400a4c <__adddf3+0x138>
  400baa:	bf00      	nop

00400bac <__aeabi_i2d>:
  400bac:	f090 0f00 	teq	r0, #0
  400bb0:	bf04      	itt	eq
  400bb2:	2100      	moveq	r1, #0
  400bb4:	4770      	bxeq	lr
  400bb6:	b530      	push	{r4, r5, lr}
  400bb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400bbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400bc0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  400bc4:	bf48      	it	mi
  400bc6:	4240      	negmi	r0, r0
  400bc8:	f04f 0100 	mov.w	r1, #0
  400bcc:	e73e      	b.n	400a4c <__adddf3+0x138>
  400bce:	bf00      	nop

00400bd0 <__aeabi_f2d>:
  400bd0:	0042      	lsls	r2, r0, #1
  400bd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  400bd6:	ea4f 0131 	mov.w	r1, r1, rrx
  400bda:	ea4f 7002 	mov.w	r0, r2, lsl #28
  400bde:	bf1f      	itttt	ne
  400be0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  400be4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  400be8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  400bec:	4770      	bxne	lr
  400bee:	f092 0f00 	teq	r2, #0
  400bf2:	bf14      	ite	ne
  400bf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  400bf8:	4770      	bxeq	lr
  400bfa:	b530      	push	{r4, r5, lr}
  400bfc:	f44f 7460 	mov.w	r4, #896	; 0x380
  400c00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  400c04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  400c08:	e720      	b.n	400a4c <__adddf3+0x138>
  400c0a:	bf00      	nop

00400c0c <__aeabi_ul2d>:
  400c0c:	ea50 0201 	orrs.w	r2, r0, r1
  400c10:	bf08      	it	eq
  400c12:	4770      	bxeq	lr
  400c14:	b530      	push	{r4, r5, lr}
  400c16:	f04f 0500 	mov.w	r5, #0
  400c1a:	e00a      	b.n	400c32 <__aeabi_l2d+0x16>

00400c1c <__aeabi_l2d>:
  400c1c:	ea50 0201 	orrs.w	r2, r0, r1
  400c20:	bf08      	it	eq
  400c22:	4770      	bxeq	lr
  400c24:	b530      	push	{r4, r5, lr}
  400c26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  400c2a:	d502      	bpl.n	400c32 <__aeabi_l2d+0x16>
  400c2c:	4240      	negs	r0, r0
  400c2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400c32:	f44f 6480 	mov.w	r4, #1024	; 0x400
  400c36:	f104 0432 	add.w	r4, r4, #50	; 0x32
  400c3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  400c3e:	f43f aedc 	beq.w	4009fa <__adddf3+0xe6>
  400c42:	f04f 0203 	mov.w	r2, #3
  400c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  400c4a:	bf18      	it	ne
  400c4c:	3203      	addne	r2, #3
  400c4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  400c52:	bf18      	it	ne
  400c54:	3203      	addne	r2, #3
  400c56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  400c5a:	f1c2 0320 	rsb	r3, r2, #32
  400c5e:	fa00 fc03 	lsl.w	ip, r0, r3
  400c62:	fa20 f002 	lsr.w	r0, r0, r2
  400c66:	fa01 fe03 	lsl.w	lr, r1, r3
  400c6a:	ea40 000e 	orr.w	r0, r0, lr
  400c6e:	fa21 f102 	lsr.w	r1, r1, r2
  400c72:	4414      	add	r4, r2
  400c74:	e6c1      	b.n	4009fa <__adddf3+0xe6>
  400c76:	bf00      	nop

00400c78 <__aeabi_dmul>:
  400c78:	b570      	push	{r4, r5, r6, lr}
  400c7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400c7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  400c82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  400c86:	bf1d      	ittte	ne
  400c88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  400c8c:	ea94 0f0c 	teqne	r4, ip
  400c90:	ea95 0f0c 	teqne	r5, ip
  400c94:	f000 f8de 	bleq	400e54 <__aeabi_dmul+0x1dc>
  400c98:	442c      	add	r4, r5
  400c9a:	ea81 0603 	eor.w	r6, r1, r3
  400c9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  400ca2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  400ca6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  400caa:	bf18      	it	ne
  400cac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  400cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400cb8:	d038      	beq.n	400d2c <__aeabi_dmul+0xb4>
  400cba:	fba0 ce02 	umull	ip, lr, r0, r2
  400cbe:	f04f 0500 	mov.w	r5, #0
  400cc2:	fbe1 e502 	umlal	lr, r5, r1, r2
  400cc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  400cca:	fbe0 e503 	umlal	lr, r5, r0, r3
  400cce:	f04f 0600 	mov.w	r6, #0
  400cd2:	fbe1 5603 	umlal	r5, r6, r1, r3
  400cd6:	f09c 0f00 	teq	ip, #0
  400cda:	bf18      	it	ne
  400cdc:	f04e 0e01 	orrne.w	lr, lr, #1
  400ce0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  400ce4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  400ce8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  400cec:	d204      	bcs.n	400cf8 <__aeabi_dmul+0x80>
  400cee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  400cf2:	416d      	adcs	r5, r5
  400cf4:	eb46 0606 	adc.w	r6, r6, r6
  400cf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  400cfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  400d00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  400d04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  400d08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  400d0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  400d10:	bf88      	it	hi
  400d12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  400d16:	d81e      	bhi.n	400d56 <__aeabi_dmul+0xde>
  400d18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  400d1c:	bf08      	it	eq
  400d1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  400d22:	f150 0000 	adcs.w	r0, r0, #0
  400d26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  400d2a:	bd70      	pop	{r4, r5, r6, pc}
  400d2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  400d30:	ea46 0101 	orr.w	r1, r6, r1
  400d34:	ea40 0002 	orr.w	r0, r0, r2
  400d38:	ea81 0103 	eor.w	r1, r1, r3
  400d3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  400d40:	bfc2      	ittt	gt
  400d42:	ebd4 050c 	rsbsgt	r5, r4, ip
  400d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  400d4a:	bd70      	popgt	{r4, r5, r6, pc}
  400d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400d50:	f04f 0e00 	mov.w	lr, #0
  400d54:	3c01      	subs	r4, #1
  400d56:	f300 80ab 	bgt.w	400eb0 <__aeabi_dmul+0x238>
  400d5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  400d5e:	bfde      	ittt	le
  400d60:	2000      	movle	r0, #0
  400d62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  400d66:	bd70      	pople	{r4, r5, r6, pc}
  400d68:	f1c4 0400 	rsb	r4, r4, #0
  400d6c:	3c20      	subs	r4, #32
  400d6e:	da35      	bge.n	400ddc <__aeabi_dmul+0x164>
  400d70:	340c      	adds	r4, #12
  400d72:	dc1b      	bgt.n	400dac <__aeabi_dmul+0x134>
  400d74:	f104 0414 	add.w	r4, r4, #20
  400d78:	f1c4 0520 	rsb	r5, r4, #32
  400d7c:	fa00 f305 	lsl.w	r3, r0, r5
  400d80:	fa20 f004 	lsr.w	r0, r0, r4
  400d84:	fa01 f205 	lsl.w	r2, r1, r5
  400d88:	ea40 0002 	orr.w	r0, r0, r2
  400d8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  400d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  400d94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  400d98:	fa21 f604 	lsr.w	r6, r1, r4
  400d9c:	eb42 0106 	adc.w	r1, r2, r6
  400da0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  400da4:	bf08      	it	eq
  400da6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  400daa:	bd70      	pop	{r4, r5, r6, pc}
  400dac:	f1c4 040c 	rsb	r4, r4, #12
  400db0:	f1c4 0520 	rsb	r5, r4, #32
  400db4:	fa00 f304 	lsl.w	r3, r0, r4
  400db8:	fa20 f005 	lsr.w	r0, r0, r5
  400dbc:	fa01 f204 	lsl.w	r2, r1, r4
  400dc0:	ea40 0002 	orr.w	r0, r0, r2
  400dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400dc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  400dcc:	f141 0100 	adc.w	r1, r1, #0
  400dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  400dd4:	bf08      	it	eq
  400dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  400dda:	bd70      	pop	{r4, r5, r6, pc}
  400ddc:	f1c4 0520 	rsb	r5, r4, #32
  400de0:	fa00 f205 	lsl.w	r2, r0, r5
  400de4:	ea4e 0e02 	orr.w	lr, lr, r2
  400de8:	fa20 f304 	lsr.w	r3, r0, r4
  400dec:	fa01 f205 	lsl.w	r2, r1, r5
  400df0:	ea43 0302 	orr.w	r3, r3, r2
  400df4:	fa21 f004 	lsr.w	r0, r1, r4
  400df8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400dfc:	fa21 f204 	lsr.w	r2, r1, r4
  400e00:	ea20 0002 	bic.w	r0, r0, r2
  400e04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  400e08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  400e0c:	bf08      	it	eq
  400e0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  400e12:	bd70      	pop	{r4, r5, r6, pc}
  400e14:	f094 0f00 	teq	r4, #0
  400e18:	d10f      	bne.n	400e3a <__aeabi_dmul+0x1c2>
  400e1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  400e1e:	0040      	lsls	r0, r0, #1
  400e20:	eb41 0101 	adc.w	r1, r1, r1
  400e24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400e28:	bf08      	it	eq
  400e2a:	3c01      	subeq	r4, #1
  400e2c:	d0f7      	beq.n	400e1e <__aeabi_dmul+0x1a6>
  400e2e:	ea41 0106 	orr.w	r1, r1, r6
  400e32:	f095 0f00 	teq	r5, #0
  400e36:	bf18      	it	ne
  400e38:	4770      	bxne	lr
  400e3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  400e3e:	0052      	lsls	r2, r2, #1
  400e40:	eb43 0303 	adc.w	r3, r3, r3
  400e44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  400e48:	bf08      	it	eq
  400e4a:	3d01      	subeq	r5, #1
  400e4c:	d0f7      	beq.n	400e3e <__aeabi_dmul+0x1c6>
  400e4e:	ea43 0306 	orr.w	r3, r3, r6
  400e52:	4770      	bx	lr
  400e54:	ea94 0f0c 	teq	r4, ip
  400e58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  400e5c:	bf18      	it	ne
  400e5e:	ea95 0f0c 	teqne	r5, ip
  400e62:	d00c      	beq.n	400e7e <__aeabi_dmul+0x206>
  400e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  400e68:	bf18      	it	ne
  400e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  400e6e:	d1d1      	bne.n	400e14 <__aeabi_dmul+0x19c>
  400e70:	ea81 0103 	eor.w	r1, r1, r3
  400e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400e78:	f04f 0000 	mov.w	r0, #0
  400e7c:	bd70      	pop	{r4, r5, r6, pc}
  400e7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  400e82:	bf06      	itte	eq
  400e84:	4610      	moveq	r0, r2
  400e86:	4619      	moveq	r1, r3
  400e88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  400e8c:	d019      	beq.n	400ec2 <__aeabi_dmul+0x24a>
  400e8e:	ea94 0f0c 	teq	r4, ip
  400e92:	d102      	bne.n	400e9a <__aeabi_dmul+0x222>
  400e94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  400e98:	d113      	bne.n	400ec2 <__aeabi_dmul+0x24a>
  400e9a:	ea95 0f0c 	teq	r5, ip
  400e9e:	d105      	bne.n	400eac <__aeabi_dmul+0x234>
  400ea0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  400ea4:	bf1c      	itt	ne
  400ea6:	4610      	movne	r0, r2
  400ea8:	4619      	movne	r1, r3
  400eaa:	d10a      	bne.n	400ec2 <__aeabi_dmul+0x24a>
  400eac:	ea81 0103 	eor.w	r1, r1, r3
  400eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  400eb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  400eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400ebc:	f04f 0000 	mov.w	r0, #0
  400ec0:	bd70      	pop	{r4, r5, r6, pc}
  400ec2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  400ec6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  400eca:	bd70      	pop	{r4, r5, r6, pc}

00400ecc <__aeabi_ddiv>:
  400ecc:	b570      	push	{r4, r5, r6, lr}
  400ece:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400ed2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  400ed6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  400eda:	bf1d      	ittte	ne
  400edc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  400ee0:	ea94 0f0c 	teqne	r4, ip
  400ee4:	ea95 0f0c 	teqne	r5, ip
  400ee8:	f000 f8a7 	bleq	40103a <__aeabi_ddiv+0x16e>
  400eec:	eba4 0405 	sub.w	r4, r4, r5
  400ef0:	ea81 0e03 	eor.w	lr, r1, r3
  400ef4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  400ef8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  400efc:	f000 8088 	beq.w	401010 <__aeabi_ddiv+0x144>
  400f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
  400f04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  400f08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  400f0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  400f10:	ea4f 2202 	mov.w	r2, r2, lsl #8
  400f14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  400f18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  400f1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  400f20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  400f24:	429d      	cmp	r5, r3
  400f26:	bf08      	it	eq
  400f28:	4296      	cmpeq	r6, r2
  400f2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  400f2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  400f32:	d202      	bcs.n	400f3a <__aeabi_ddiv+0x6e>
  400f34:	085b      	lsrs	r3, r3, #1
  400f36:	ea4f 0232 	mov.w	r2, r2, rrx
  400f3a:	1ab6      	subs	r6, r6, r2
  400f3c:	eb65 0503 	sbc.w	r5, r5, r3
  400f40:	085b      	lsrs	r3, r3, #1
  400f42:	ea4f 0232 	mov.w	r2, r2, rrx
  400f46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400f4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  400f4e:	ebb6 0e02 	subs.w	lr, r6, r2
  400f52:	eb75 0e03 	sbcs.w	lr, r5, r3
  400f56:	bf22      	ittt	cs
  400f58:	1ab6      	subcs	r6, r6, r2
  400f5a:	4675      	movcs	r5, lr
  400f5c:	ea40 000c 	orrcs.w	r0, r0, ip
  400f60:	085b      	lsrs	r3, r3, #1
  400f62:	ea4f 0232 	mov.w	r2, r2, rrx
  400f66:	ebb6 0e02 	subs.w	lr, r6, r2
  400f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
  400f6e:	bf22      	ittt	cs
  400f70:	1ab6      	subcs	r6, r6, r2
  400f72:	4675      	movcs	r5, lr
  400f74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  400f78:	085b      	lsrs	r3, r3, #1
  400f7a:	ea4f 0232 	mov.w	r2, r2, rrx
  400f7e:	ebb6 0e02 	subs.w	lr, r6, r2
  400f82:	eb75 0e03 	sbcs.w	lr, r5, r3
  400f86:	bf22      	ittt	cs
  400f88:	1ab6      	subcs	r6, r6, r2
  400f8a:	4675      	movcs	r5, lr
  400f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  400f90:	085b      	lsrs	r3, r3, #1
  400f92:	ea4f 0232 	mov.w	r2, r2, rrx
  400f96:	ebb6 0e02 	subs.w	lr, r6, r2
  400f9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  400f9e:	bf22      	ittt	cs
  400fa0:	1ab6      	subcs	r6, r6, r2
  400fa2:	4675      	movcs	r5, lr
  400fa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  400fa8:	ea55 0e06 	orrs.w	lr, r5, r6
  400fac:	d018      	beq.n	400fe0 <__aeabi_ddiv+0x114>
  400fae:	ea4f 1505 	mov.w	r5, r5, lsl #4
  400fb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  400fb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  400fba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  400fbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  400fc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  400fc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  400fca:	d1c0      	bne.n	400f4e <__aeabi_ddiv+0x82>
  400fcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400fd0:	d10b      	bne.n	400fea <__aeabi_ddiv+0x11e>
  400fd2:	ea41 0100 	orr.w	r1, r1, r0
  400fd6:	f04f 0000 	mov.w	r0, #0
  400fda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  400fde:	e7b6      	b.n	400f4e <__aeabi_ddiv+0x82>
  400fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  400fe4:	bf04      	itt	eq
  400fe6:	4301      	orreq	r1, r0
  400fe8:	2000      	moveq	r0, #0
  400fea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  400fee:	bf88      	it	hi
  400ff0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  400ff4:	f63f aeaf 	bhi.w	400d56 <__aeabi_dmul+0xde>
  400ff8:	ebb5 0c03 	subs.w	ip, r5, r3
  400ffc:	bf04      	itt	eq
  400ffe:	ebb6 0c02 	subseq.w	ip, r6, r2
  401002:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401006:	f150 0000 	adcs.w	r0, r0, #0
  40100a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40100e:	bd70      	pop	{r4, r5, r6, pc}
  401010:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401014:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401018:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40101c:	bfc2      	ittt	gt
  40101e:	ebd4 050c 	rsbsgt	r5, r4, ip
  401022:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401026:	bd70      	popgt	{r4, r5, r6, pc}
  401028:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40102c:	f04f 0e00 	mov.w	lr, #0
  401030:	3c01      	subs	r4, #1
  401032:	e690      	b.n	400d56 <__aeabi_dmul+0xde>
  401034:	ea45 0e06 	orr.w	lr, r5, r6
  401038:	e68d      	b.n	400d56 <__aeabi_dmul+0xde>
  40103a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40103e:	ea94 0f0c 	teq	r4, ip
  401042:	bf08      	it	eq
  401044:	ea95 0f0c 	teqeq	r5, ip
  401048:	f43f af3b 	beq.w	400ec2 <__aeabi_dmul+0x24a>
  40104c:	ea94 0f0c 	teq	r4, ip
  401050:	d10a      	bne.n	401068 <__aeabi_ddiv+0x19c>
  401052:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401056:	f47f af34 	bne.w	400ec2 <__aeabi_dmul+0x24a>
  40105a:	ea95 0f0c 	teq	r5, ip
  40105e:	f47f af25 	bne.w	400eac <__aeabi_dmul+0x234>
  401062:	4610      	mov	r0, r2
  401064:	4619      	mov	r1, r3
  401066:	e72c      	b.n	400ec2 <__aeabi_dmul+0x24a>
  401068:	ea95 0f0c 	teq	r5, ip
  40106c:	d106      	bne.n	40107c <__aeabi_ddiv+0x1b0>
  40106e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401072:	f43f aefd 	beq.w	400e70 <__aeabi_dmul+0x1f8>
  401076:	4610      	mov	r0, r2
  401078:	4619      	mov	r1, r3
  40107a:	e722      	b.n	400ec2 <__aeabi_dmul+0x24a>
  40107c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401080:	bf18      	it	ne
  401082:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401086:	f47f aec5 	bne.w	400e14 <__aeabi_dmul+0x19c>
  40108a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40108e:	f47f af0d 	bne.w	400eac <__aeabi_dmul+0x234>
  401092:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401096:	f47f aeeb 	bne.w	400e70 <__aeabi_dmul+0x1f8>
  40109a:	e712      	b.n	400ec2 <__aeabi_dmul+0x24a>

0040109c <__aeabi_d2iz>:
  40109c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4010a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4010a4:	d215      	bcs.n	4010d2 <__aeabi_d2iz+0x36>
  4010a6:	d511      	bpl.n	4010cc <__aeabi_d2iz+0x30>
  4010a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4010ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4010b0:	d912      	bls.n	4010d8 <__aeabi_d2iz+0x3c>
  4010b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4010b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4010ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4010be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4010c2:	fa23 f002 	lsr.w	r0, r3, r2
  4010c6:	bf18      	it	ne
  4010c8:	4240      	negne	r0, r0
  4010ca:	4770      	bx	lr
  4010cc:	f04f 0000 	mov.w	r0, #0
  4010d0:	4770      	bx	lr
  4010d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4010d6:	d105      	bne.n	4010e4 <__aeabi_d2iz+0x48>
  4010d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4010dc:	bf08      	it	eq
  4010de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4010e2:	4770      	bx	lr
  4010e4:	f04f 0000 	mov.w	r0, #0
  4010e8:	4770      	bx	lr
  4010ea:	bf00      	nop

004010ec <__aeabi_uldivmod>:
  4010ec:	b953      	cbnz	r3, 401104 <__aeabi_uldivmod+0x18>
  4010ee:	b94a      	cbnz	r2, 401104 <__aeabi_uldivmod+0x18>
  4010f0:	2900      	cmp	r1, #0
  4010f2:	bf08      	it	eq
  4010f4:	2800      	cmpeq	r0, #0
  4010f6:	bf1c      	itt	ne
  4010f8:	f04f 31ff 	movne.w	r1, #4294967295
  4010fc:	f04f 30ff 	movne.w	r0, #4294967295
  401100:	f000 b97a 	b.w	4013f8 <__aeabi_idiv0>
  401104:	f1ad 0c08 	sub.w	ip, sp, #8
  401108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40110c:	f000 f806 	bl	40111c <__udivmoddi4>
  401110:	f8dd e004 	ldr.w	lr, [sp, #4]
  401114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401118:	b004      	add	sp, #16
  40111a:	4770      	bx	lr

0040111c <__udivmoddi4>:
  40111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401120:	468c      	mov	ip, r1
  401122:	460d      	mov	r5, r1
  401124:	4604      	mov	r4, r0
  401126:	9e08      	ldr	r6, [sp, #32]
  401128:	2b00      	cmp	r3, #0
  40112a:	d151      	bne.n	4011d0 <__udivmoddi4+0xb4>
  40112c:	428a      	cmp	r2, r1
  40112e:	4617      	mov	r7, r2
  401130:	d96d      	bls.n	40120e <__udivmoddi4+0xf2>
  401132:	fab2 fe82 	clz	lr, r2
  401136:	f1be 0f00 	cmp.w	lr, #0
  40113a:	d00b      	beq.n	401154 <__udivmoddi4+0x38>
  40113c:	f1ce 0c20 	rsb	ip, lr, #32
  401140:	fa01 f50e 	lsl.w	r5, r1, lr
  401144:	fa20 fc0c 	lsr.w	ip, r0, ip
  401148:	fa02 f70e 	lsl.w	r7, r2, lr
  40114c:	ea4c 0c05 	orr.w	ip, ip, r5
  401150:	fa00 f40e 	lsl.w	r4, r0, lr
  401154:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401158:	0c25      	lsrs	r5, r4, #16
  40115a:	fbbc f8fa 	udiv	r8, ip, sl
  40115e:	fa1f f987 	uxth.w	r9, r7
  401162:	fb0a cc18 	mls	ip, sl, r8, ip
  401166:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40116a:	fb08 f309 	mul.w	r3, r8, r9
  40116e:	42ab      	cmp	r3, r5
  401170:	d90a      	bls.n	401188 <__udivmoddi4+0x6c>
  401172:	19ed      	adds	r5, r5, r7
  401174:	f108 32ff 	add.w	r2, r8, #4294967295
  401178:	f080 8123 	bcs.w	4013c2 <__udivmoddi4+0x2a6>
  40117c:	42ab      	cmp	r3, r5
  40117e:	f240 8120 	bls.w	4013c2 <__udivmoddi4+0x2a6>
  401182:	f1a8 0802 	sub.w	r8, r8, #2
  401186:	443d      	add	r5, r7
  401188:	1aed      	subs	r5, r5, r3
  40118a:	b2a4      	uxth	r4, r4
  40118c:	fbb5 f0fa 	udiv	r0, r5, sl
  401190:	fb0a 5510 	mls	r5, sl, r0, r5
  401194:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401198:	fb00 f909 	mul.w	r9, r0, r9
  40119c:	45a1      	cmp	r9, r4
  40119e:	d909      	bls.n	4011b4 <__udivmoddi4+0x98>
  4011a0:	19e4      	adds	r4, r4, r7
  4011a2:	f100 33ff 	add.w	r3, r0, #4294967295
  4011a6:	f080 810a 	bcs.w	4013be <__udivmoddi4+0x2a2>
  4011aa:	45a1      	cmp	r9, r4
  4011ac:	f240 8107 	bls.w	4013be <__udivmoddi4+0x2a2>
  4011b0:	3802      	subs	r0, #2
  4011b2:	443c      	add	r4, r7
  4011b4:	eba4 0409 	sub.w	r4, r4, r9
  4011b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4011bc:	2100      	movs	r1, #0
  4011be:	2e00      	cmp	r6, #0
  4011c0:	d061      	beq.n	401286 <__udivmoddi4+0x16a>
  4011c2:	fa24 f40e 	lsr.w	r4, r4, lr
  4011c6:	2300      	movs	r3, #0
  4011c8:	6034      	str	r4, [r6, #0]
  4011ca:	6073      	str	r3, [r6, #4]
  4011cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4011d0:	428b      	cmp	r3, r1
  4011d2:	d907      	bls.n	4011e4 <__udivmoddi4+0xc8>
  4011d4:	2e00      	cmp	r6, #0
  4011d6:	d054      	beq.n	401282 <__udivmoddi4+0x166>
  4011d8:	2100      	movs	r1, #0
  4011da:	e886 0021 	stmia.w	r6, {r0, r5}
  4011de:	4608      	mov	r0, r1
  4011e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4011e4:	fab3 f183 	clz	r1, r3
  4011e8:	2900      	cmp	r1, #0
  4011ea:	f040 808e 	bne.w	40130a <__udivmoddi4+0x1ee>
  4011ee:	42ab      	cmp	r3, r5
  4011f0:	d302      	bcc.n	4011f8 <__udivmoddi4+0xdc>
  4011f2:	4282      	cmp	r2, r0
  4011f4:	f200 80fa 	bhi.w	4013ec <__udivmoddi4+0x2d0>
  4011f8:	1a84      	subs	r4, r0, r2
  4011fa:	eb65 0503 	sbc.w	r5, r5, r3
  4011fe:	2001      	movs	r0, #1
  401200:	46ac      	mov	ip, r5
  401202:	2e00      	cmp	r6, #0
  401204:	d03f      	beq.n	401286 <__udivmoddi4+0x16a>
  401206:	e886 1010 	stmia.w	r6, {r4, ip}
  40120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40120e:	b912      	cbnz	r2, 401216 <__udivmoddi4+0xfa>
  401210:	2701      	movs	r7, #1
  401212:	fbb7 f7f2 	udiv	r7, r7, r2
  401216:	fab7 fe87 	clz	lr, r7
  40121a:	f1be 0f00 	cmp.w	lr, #0
  40121e:	d134      	bne.n	40128a <__udivmoddi4+0x16e>
  401220:	1beb      	subs	r3, r5, r7
  401222:	0c3a      	lsrs	r2, r7, #16
  401224:	fa1f fc87 	uxth.w	ip, r7
  401228:	2101      	movs	r1, #1
  40122a:	fbb3 f8f2 	udiv	r8, r3, r2
  40122e:	0c25      	lsrs	r5, r4, #16
  401230:	fb02 3318 	mls	r3, r2, r8, r3
  401234:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401238:	fb0c f308 	mul.w	r3, ip, r8
  40123c:	42ab      	cmp	r3, r5
  40123e:	d907      	bls.n	401250 <__udivmoddi4+0x134>
  401240:	19ed      	adds	r5, r5, r7
  401242:	f108 30ff 	add.w	r0, r8, #4294967295
  401246:	d202      	bcs.n	40124e <__udivmoddi4+0x132>
  401248:	42ab      	cmp	r3, r5
  40124a:	f200 80d1 	bhi.w	4013f0 <__udivmoddi4+0x2d4>
  40124e:	4680      	mov	r8, r0
  401250:	1aed      	subs	r5, r5, r3
  401252:	b2a3      	uxth	r3, r4
  401254:	fbb5 f0f2 	udiv	r0, r5, r2
  401258:	fb02 5510 	mls	r5, r2, r0, r5
  40125c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401260:	fb0c fc00 	mul.w	ip, ip, r0
  401264:	45a4      	cmp	ip, r4
  401266:	d907      	bls.n	401278 <__udivmoddi4+0x15c>
  401268:	19e4      	adds	r4, r4, r7
  40126a:	f100 33ff 	add.w	r3, r0, #4294967295
  40126e:	d202      	bcs.n	401276 <__udivmoddi4+0x15a>
  401270:	45a4      	cmp	ip, r4
  401272:	f200 80b8 	bhi.w	4013e6 <__udivmoddi4+0x2ca>
  401276:	4618      	mov	r0, r3
  401278:	eba4 040c 	sub.w	r4, r4, ip
  40127c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401280:	e79d      	b.n	4011be <__udivmoddi4+0xa2>
  401282:	4631      	mov	r1, r6
  401284:	4630      	mov	r0, r6
  401286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40128a:	f1ce 0420 	rsb	r4, lr, #32
  40128e:	fa05 f30e 	lsl.w	r3, r5, lr
  401292:	fa07 f70e 	lsl.w	r7, r7, lr
  401296:	fa20 f804 	lsr.w	r8, r0, r4
  40129a:	0c3a      	lsrs	r2, r7, #16
  40129c:	fa25 f404 	lsr.w	r4, r5, r4
  4012a0:	ea48 0803 	orr.w	r8, r8, r3
  4012a4:	fbb4 f1f2 	udiv	r1, r4, r2
  4012a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4012ac:	fb02 4411 	mls	r4, r2, r1, r4
  4012b0:	fa1f fc87 	uxth.w	ip, r7
  4012b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4012b8:	fb01 f30c 	mul.w	r3, r1, ip
  4012bc:	42ab      	cmp	r3, r5
  4012be:	fa00 f40e 	lsl.w	r4, r0, lr
  4012c2:	d909      	bls.n	4012d8 <__udivmoddi4+0x1bc>
  4012c4:	19ed      	adds	r5, r5, r7
  4012c6:	f101 30ff 	add.w	r0, r1, #4294967295
  4012ca:	f080 808a 	bcs.w	4013e2 <__udivmoddi4+0x2c6>
  4012ce:	42ab      	cmp	r3, r5
  4012d0:	f240 8087 	bls.w	4013e2 <__udivmoddi4+0x2c6>
  4012d4:	3902      	subs	r1, #2
  4012d6:	443d      	add	r5, r7
  4012d8:	1aeb      	subs	r3, r5, r3
  4012da:	fa1f f588 	uxth.w	r5, r8
  4012de:	fbb3 f0f2 	udiv	r0, r3, r2
  4012e2:	fb02 3310 	mls	r3, r2, r0, r3
  4012e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4012ea:	fb00 f30c 	mul.w	r3, r0, ip
  4012ee:	42ab      	cmp	r3, r5
  4012f0:	d907      	bls.n	401302 <__udivmoddi4+0x1e6>
  4012f2:	19ed      	adds	r5, r5, r7
  4012f4:	f100 38ff 	add.w	r8, r0, #4294967295
  4012f8:	d26f      	bcs.n	4013da <__udivmoddi4+0x2be>
  4012fa:	42ab      	cmp	r3, r5
  4012fc:	d96d      	bls.n	4013da <__udivmoddi4+0x2be>
  4012fe:	3802      	subs	r0, #2
  401300:	443d      	add	r5, r7
  401302:	1aeb      	subs	r3, r5, r3
  401304:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401308:	e78f      	b.n	40122a <__udivmoddi4+0x10e>
  40130a:	f1c1 0720 	rsb	r7, r1, #32
  40130e:	fa22 f807 	lsr.w	r8, r2, r7
  401312:	408b      	lsls	r3, r1
  401314:	fa05 f401 	lsl.w	r4, r5, r1
  401318:	ea48 0303 	orr.w	r3, r8, r3
  40131c:	fa20 fe07 	lsr.w	lr, r0, r7
  401320:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401324:	40fd      	lsrs	r5, r7
  401326:	ea4e 0e04 	orr.w	lr, lr, r4
  40132a:	fbb5 f9fc 	udiv	r9, r5, ip
  40132e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401332:	fb0c 5519 	mls	r5, ip, r9, r5
  401336:	fa1f f883 	uxth.w	r8, r3
  40133a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40133e:	fb09 f408 	mul.w	r4, r9, r8
  401342:	42ac      	cmp	r4, r5
  401344:	fa02 f201 	lsl.w	r2, r2, r1
  401348:	fa00 fa01 	lsl.w	sl, r0, r1
  40134c:	d908      	bls.n	401360 <__udivmoddi4+0x244>
  40134e:	18ed      	adds	r5, r5, r3
  401350:	f109 30ff 	add.w	r0, r9, #4294967295
  401354:	d243      	bcs.n	4013de <__udivmoddi4+0x2c2>
  401356:	42ac      	cmp	r4, r5
  401358:	d941      	bls.n	4013de <__udivmoddi4+0x2c2>
  40135a:	f1a9 0902 	sub.w	r9, r9, #2
  40135e:	441d      	add	r5, r3
  401360:	1b2d      	subs	r5, r5, r4
  401362:	fa1f fe8e 	uxth.w	lr, lr
  401366:	fbb5 f0fc 	udiv	r0, r5, ip
  40136a:	fb0c 5510 	mls	r5, ip, r0, r5
  40136e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401372:	fb00 f808 	mul.w	r8, r0, r8
  401376:	45a0      	cmp	r8, r4
  401378:	d907      	bls.n	40138a <__udivmoddi4+0x26e>
  40137a:	18e4      	adds	r4, r4, r3
  40137c:	f100 35ff 	add.w	r5, r0, #4294967295
  401380:	d229      	bcs.n	4013d6 <__udivmoddi4+0x2ba>
  401382:	45a0      	cmp	r8, r4
  401384:	d927      	bls.n	4013d6 <__udivmoddi4+0x2ba>
  401386:	3802      	subs	r0, #2
  401388:	441c      	add	r4, r3
  40138a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40138e:	eba4 0408 	sub.w	r4, r4, r8
  401392:	fba0 8902 	umull	r8, r9, r0, r2
  401396:	454c      	cmp	r4, r9
  401398:	46c6      	mov	lr, r8
  40139a:	464d      	mov	r5, r9
  40139c:	d315      	bcc.n	4013ca <__udivmoddi4+0x2ae>
  40139e:	d012      	beq.n	4013c6 <__udivmoddi4+0x2aa>
  4013a0:	b156      	cbz	r6, 4013b8 <__udivmoddi4+0x29c>
  4013a2:	ebba 030e 	subs.w	r3, sl, lr
  4013a6:	eb64 0405 	sbc.w	r4, r4, r5
  4013aa:	fa04 f707 	lsl.w	r7, r4, r7
  4013ae:	40cb      	lsrs	r3, r1
  4013b0:	431f      	orrs	r7, r3
  4013b2:	40cc      	lsrs	r4, r1
  4013b4:	6037      	str	r7, [r6, #0]
  4013b6:	6074      	str	r4, [r6, #4]
  4013b8:	2100      	movs	r1, #0
  4013ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013be:	4618      	mov	r0, r3
  4013c0:	e6f8      	b.n	4011b4 <__udivmoddi4+0x98>
  4013c2:	4690      	mov	r8, r2
  4013c4:	e6e0      	b.n	401188 <__udivmoddi4+0x6c>
  4013c6:	45c2      	cmp	sl, r8
  4013c8:	d2ea      	bcs.n	4013a0 <__udivmoddi4+0x284>
  4013ca:	ebb8 0e02 	subs.w	lr, r8, r2
  4013ce:	eb69 0503 	sbc.w	r5, r9, r3
  4013d2:	3801      	subs	r0, #1
  4013d4:	e7e4      	b.n	4013a0 <__udivmoddi4+0x284>
  4013d6:	4628      	mov	r0, r5
  4013d8:	e7d7      	b.n	40138a <__udivmoddi4+0x26e>
  4013da:	4640      	mov	r0, r8
  4013dc:	e791      	b.n	401302 <__udivmoddi4+0x1e6>
  4013de:	4681      	mov	r9, r0
  4013e0:	e7be      	b.n	401360 <__udivmoddi4+0x244>
  4013e2:	4601      	mov	r1, r0
  4013e4:	e778      	b.n	4012d8 <__udivmoddi4+0x1bc>
  4013e6:	3802      	subs	r0, #2
  4013e8:	443c      	add	r4, r7
  4013ea:	e745      	b.n	401278 <__udivmoddi4+0x15c>
  4013ec:	4608      	mov	r0, r1
  4013ee:	e708      	b.n	401202 <__udivmoddi4+0xe6>
  4013f0:	f1a8 0802 	sub.w	r8, r8, #2
  4013f4:	443d      	add	r5, r7
  4013f6:	e72b      	b.n	401250 <__udivmoddi4+0x134>

004013f8 <__aeabi_idiv0>:
  4013f8:	4770      	bx	lr
  4013fa:	bf00      	nop

004013fc <__libc_init_array>:
  4013fc:	b570      	push	{r4, r5, r6, lr}
  4013fe:	4e0f      	ldr	r6, [pc, #60]	; (40143c <__libc_init_array+0x40>)
  401400:	4d0f      	ldr	r5, [pc, #60]	; (401440 <__libc_init_array+0x44>)
  401402:	1b76      	subs	r6, r6, r5
  401404:	10b6      	asrs	r6, r6, #2
  401406:	bf18      	it	ne
  401408:	2400      	movne	r4, #0
  40140a:	d005      	beq.n	401418 <__libc_init_array+0x1c>
  40140c:	3401      	adds	r4, #1
  40140e:	f855 3b04 	ldr.w	r3, [r5], #4
  401412:	4798      	blx	r3
  401414:	42a6      	cmp	r6, r4
  401416:	d1f9      	bne.n	40140c <__libc_init_array+0x10>
  401418:	4e0a      	ldr	r6, [pc, #40]	; (401444 <__libc_init_array+0x48>)
  40141a:	4d0b      	ldr	r5, [pc, #44]	; (401448 <__libc_init_array+0x4c>)
  40141c:	1b76      	subs	r6, r6, r5
  40141e:	f000 f8a7 	bl	401570 <_init>
  401422:	10b6      	asrs	r6, r6, #2
  401424:	bf18      	it	ne
  401426:	2400      	movne	r4, #0
  401428:	d006      	beq.n	401438 <__libc_init_array+0x3c>
  40142a:	3401      	adds	r4, #1
  40142c:	f855 3b04 	ldr.w	r3, [r5], #4
  401430:	4798      	blx	r3
  401432:	42a6      	cmp	r6, r4
  401434:	d1f9      	bne.n	40142a <__libc_init_array+0x2e>
  401436:	bd70      	pop	{r4, r5, r6, pc}
  401438:	bd70      	pop	{r4, r5, r6, pc}
  40143a:	bf00      	nop
  40143c:	0040157c 	.word	0x0040157c
  401440:	0040157c 	.word	0x0040157c
  401444:	00401584 	.word	0x00401584
  401448:	0040157c 	.word	0x0040157c

0040144c <register_fini>:
  40144c:	4b02      	ldr	r3, [pc, #8]	; (401458 <register_fini+0xc>)
  40144e:	b113      	cbz	r3, 401456 <register_fini+0xa>
  401450:	4802      	ldr	r0, [pc, #8]	; (40145c <register_fini+0x10>)
  401452:	f000 b805 	b.w	401460 <atexit>
  401456:	4770      	bx	lr
  401458:	00000000 	.word	0x00000000
  40145c:	0040146d 	.word	0x0040146d

00401460 <atexit>:
  401460:	2300      	movs	r3, #0
  401462:	4601      	mov	r1, r0
  401464:	461a      	mov	r2, r3
  401466:	4618      	mov	r0, r3
  401468:	f000 b81e 	b.w	4014a8 <__register_exitproc>

0040146c <__libc_fini_array>:
  40146c:	b538      	push	{r3, r4, r5, lr}
  40146e:	4c0a      	ldr	r4, [pc, #40]	; (401498 <__libc_fini_array+0x2c>)
  401470:	4d0a      	ldr	r5, [pc, #40]	; (40149c <__libc_fini_array+0x30>)
  401472:	1b64      	subs	r4, r4, r5
  401474:	10a4      	asrs	r4, r4, #2
  401476:	d00a      	beq.n	40148e <__libc_fini_array+0x22>
  401478:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40147c:	3b01      	subs	r3, #1
  40147e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401482:	3c01      	subs	r4, #1
  401484:	f855 3904 	ldr.w	r3, [r5], #-4
  401488:	4798      	blx	r3
  40148a:	2c00      	cmp	r4, #0
  40148c:	d1f9      	bne.n	401482 <__libc_fini_array+0x16>
  40148e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401492:	f000 b877 	b.w	401584 <_fini>
  401496:	bf00      	nop
  401498:	00401594 	.word	0x00401594
  40149c:	00401590 	.word	0x00401590

004014a0 <__retarget_lock_acquire_recursive>:
  4014a0:	4770      	bx	lr
  4014a2:	bf00      	nop

004014a4 <__retarget_lock_release_recursive>:
  4014a4:	4770      	bx	lr
  4014a6:	bf00      	nop

004014a8 <__register_exitproc>:
  4014a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4014ac:	4d2c      	ldr	r5, [pc, #176]	; (401560 <__register_exitproc+0xb8>)
  4014ae:	4606      	mov	r6, r0
  4014b0:	6828      	ldr	r0, [r5, #0]
  4014b2:	4698      	mov	r8, r3
  4014b4:	460f      	mov	r7, r1
  4014b6:	4691      	mov	r9, r2
  4014b8:	f7ff fff2 	bl	4014a0 <__retarget_lock_acquire_recursive>
  4014bc:	4b29      	ldr	r3, [pc, #164]	; (401564 <__register_exitproc+0xbc>)
  4014be:	681c      	ldr	r4, [r3, #0]
  4014c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d03e      	beq.n	401546 <__register_exitproc+0x9e>
  4014c8:	685a      	ldr	r2, [r3, #4]
  4014ca:	2a1f      	cmp	r2, #31
  4014cc:	dc1c      	bgt.n	401508 <__register_exitproc+0x60>
  4014ce:	f102 0e01 	add.w	lr, r2, #1
  4014d2:	b176      	cbz	r6, 4014f2 <__register_exitproc+0x4a>
  4014d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4014d8:	2401      	movs	r4, #1
  4014da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4014de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4014e2:	4094      	lsls	r4, r2
  4014e4:	4320      	orrs	r0, r4
  4014e6:	2e02      	cmp	r6, #2
  4014e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4014ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4014f0:	d023      	beq.n	40153a <__register_exitproc+0x92>
  4014f2:	3202      	adds	r2, #2
  4014f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4014f8:	6828      	ldr	r0, [r5, #0]
  4014fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4014fe:	f7ff ffd1 	bl	4014a4 <__retarget_lock_release_recursive>
  401502:	2000      	movs	r0, #0
  401504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401508:	4b17      	ldr	r3, [pc, #92]	; (401568 <__register_exitproc+0xc0>)
  40150a:	b30b      	cbz	r3, 401550 <__register_exitproc+0xa8>
  40150c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401510:	f3af 8000 	nop.w
  401514:	4603      	mov	r3, r0
  401516:	b1d8      	cbz	r0, 401550 <__register_exitproc+0xa8>
  401518:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40151c:	6002      	str	r2, [r0, #0]
  40151e:	2100      	movs	r1, #0
  401520:	6041      	str	r1, [r0, #4]
  401522:	460a      	mov	r2, r1
  401524:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401528:	f04f 0e01 	mov.w	lr, #1
  40152c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401530:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401534:	2e00      	cmp	r6, #0
  401536:	d0dc      	beq.n	4014f2 <__register_exitproc+0x4a>
  401538:	e7cc      	b.n	4014d4 <__register_exitproc+0x2c>
  40153a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40153e:	430c      	orrs	r4, r1
  401540:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401544:	e7d5      	b.n	4014f2 <__register_exitproc+0x4a>
  401546:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40154a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40154e:	e7bb      	b.n	4014c8 <__register_exitproc+0x20>
  401550:	6828      	ldr	r0, [r5, #0]
  401552:	f7ff ffa7 	bl	4014a4 <__retarget_lock_release_recursive>
  401556:	f04f 30ff 	mov.w	r0, #4294967295
  40155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40155e:	bf00      	nop
  401560:	204006a8 	.word	0x204006a8
  401564:	0040156c 	.word	0x0040156c
  401568:	00000000 	.word	0x00000000

0040156c <_global_impure_ptr>:
  40156c:	20400280                                ..@ 

00401570 <_init>:
  401570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401572:	bf00      	nop
  401574:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401576:	bc08      	pop	{r3}
  401578:	469e      	mov	lr, r3
  40157a:	4770      	bx	lr

0040157c <__init_array_start>:
  40157c:	0040144d 	.word	0x0040144d

00401580 <__frame_dummy_init_array_entry>:
  401580:	00400165                                e.@.

00401584 <_fini>:
  401584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401586:	bf00      	nop
  401588:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40158a:	bc08      	pop	{r3}
  40158c:	469e      	mov	lr, r3
  40158e:	4770      	bx	lr

00401590 <__fini_array_start>:
  401590:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <melody>:
20400010:	0a4d 0000 0a4d 0000 0000 0000 0a4d 0000     M...M.......M...
20400020:	0000 0000 082d 0000 0a4d 0000 0000 0000     ....-...M.......
20400030:	0c40 0000 0000 0000 0000 0000 0000 0000     @...............
20400040:	0620 0000 0000 0000 0000 0000 0000 0000      ...............
20400050:	082d 0000 0000 0000 0000 0000 0620 0000     -........... ...
	...
20400068:	0527 0000 0000 0000 0000 0000 06e0 0000     '...............
20400078:	0000 0000 07b8 0000 0000 0000 0749 0000     ............I...
20400088:	06e0 0000 0000 0000 0620 0000 0a4d 0000     ........ ...M...
20400098:	0c40 0000 0dc0 0000 0000 0000 0aea 0000     @...............
204000a8:	0c40 0000 0000 0000 0a4d 0000 0000 0000     @.......M.......
204000b8:	082d 0000 092d 0000 07b8 0000 0000 0000     -...-...........
204000c8:	0000 0000 082d 0000 0000 0000 0000 0000     ....-...........
204000d8:	0620 0000 0000 0000 0000 0000 0527 0000      ...........'...
	...
204000f0:	06e0 0000 0000 0000 07b8 0000 0000 0000     ................
20400100:	0749 0000 06e0 0000 0000 0000 0620 0000     I........... ...
20400110:	0a4d 0000 0c40 0000 0dc0 0000 0000 0000     M...@...........
20400120:	0aea 0000 0c40 0000 0000 0000 0a4d 0000     ....@.......M...
20400130:	0000 0000 082d 0000 092d 0000 07b8 0000     ....-...-.......
	...

20400148 <tempo>:
20400148:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400158:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400168:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400178:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400188:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400198:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001a8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001b8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001c8:	0009 0000 0009 0000 0009 0000 000c 0000     ................
204001d8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001e8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001f8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400208:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400218:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400228:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400238:	000c 0000 000c 0000 000c 0000 0009 0000     ................
20400248:	0009 0000 0009 0000 000c 0000 000c 0000     ................
20400258:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400268:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400278:	000c 0000 000c 0000                         ........

20400280 <impure_data>:
20400280:	0000 0000 056c 2040 05d4 2040 063c 2040     ....l.@ ..@ <.@ 
	...
20400328:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400338:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204006a8 <__atexit_recursive_mutex>:
204006a8:	0738 2040                                   8.@ 
