
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dcc  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402dcc  00402dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000444  20400000  00402dd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c0  20400444  00403218  00020444  2**2
                  ALLOC
  4 .stack        00002004  20400504  004032d8  00020444  2**0
                  ALLOC
  5 .heap         00000200  20402508  004052dc  00020444  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020472  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000cb19  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000188b  00000000  00000000  0002cfe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003804  00000000  00000000  0002e86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000670  00000000  00000000  00032073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  000326e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004a7c  00000000  00000000  00032cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007807  00000000  00000000  0003772f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008bb5b  00000000  00000000  0003ef36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001d58  00000000  00000000  000caa94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 25 40 20 01 13 40 00 b1 13 40 00 b1 13 40 00     .%@ ..@...@...@.
  400010:	b1 13 40 00 b1 13 40 00 b1 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 13 40 00 b1 13 40 00 00 00 00 00 b1 13 40 00     ..@...@.......@.
  40003c:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  40004c:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  40005c:	b1 13 40 00 b1 13 40 00 00 00 00 00 75 0a 40 00     ..@...@.....u.@.
  40006c:	8d 0a 40 00 a5 0a 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  40007c:	b1 13 40 00 bd 0a 40 00 d5 0a 40 00 b1 13 40 00     ..@...@...@...@.
  40008c:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  40009c:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  4000ac:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  4000bc:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  4000cc:	b1 13 40 00 00 00 00 00 b1 13 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  4000ec:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  4000fc:	b1 13 40 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ..@...@...@...@.
  40010c:	b1 13 40 00 b1 13 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b1 13 40 00 b1 13 40 00 b1 13 40 00     ......@...@...@.
  40012c:	b1 13 40 00 b1 13 40 00 00 00 00 00 b1 13 40 00     ..@...@.......@.
  40013c:	b1 13 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400444 	.word	0x20400444
  40015c:	00000000 	.word	0x00000000
  400160:	00402dd4 	.word	0x00402dd4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402dd4 	.word	0x00402dd4
  4001a0:	20400448 	.word	0x20400448
  4001a4:	00402dd4 	.word	0x00402dd4
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400bed 	.word	0x00400bed
  40022c:	00400c59 	.word	0x00400c59
  400230:	00400cc9 	.word	0x00400cc9

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400c25 	.word	0x00400c25
  4002a0:	00400d41 	.word	0x00400d41

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400d5d 	.word	0x00400d5d
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400d79 	.word	0x00400d79
  400418:	00400d95 	.word	0x00400d95

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00401521 	.word	0x00401521
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400aed 	.word	0x00400aed
  40051c:	00400b69 	.word	0x00400b69
  400520:	004013b9 	.word	0x004013b9
  400524:	00400499 	.word	0x00400499

00400528 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400528:	b480      	push	{r7}
  40052a:	b085      	sub	sp, #20
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400534:	687b      	ldr	r3, [r7, #4]
  400536:	2b00      	cmp	r3, #0
  400538:	d003      	beq.n	400542 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40053a:	68fb      	ldr	r3, [r7, #12]
  40053c:	68ba      	ldr	r2, [r7, #8]
  40053e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400540:	e002      	b.n	400548 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400542:	68fb      	ldr	r3, [r7, #12]
  400544:	68ba      	ldr	r2, [r7, #8]
  400546:	661a      	str	r2, [r3, #96]	; 0x60
}
  400548:	bf00      	nop
  40054a:	3714      	adds	r7, #20
  40054c:	46bd      	mov	sp, r7
  40054e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400552:	4770      	bx	lr

00400554 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400554:	b480      	push	{r7}
  400556:	b083      	sub	sp, #12
  400558:	af00      	add	r7, sp, #0
  40055a:	6078      	str	r0, [r7, #4]
  40055c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	683a      	ldr	r2, [r7, #0]
  400562:	631a      	str	r2, [r3, #48]	; 0x30
}
  400564:	bf00      	nop
  400566:	370c      	adds	r7, #12
  400568:	46bd      	mov	sp, r7
  40056a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40056e:	4770      	bx	lr

00400570 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400570:	b480      	push	{r7}
  400572:	b083      	sub	sp, #12
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
  400578:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40057a:	687b      	ldr	r3, [r7, #4]
  40057c:	683a      	ldr	r2, [r7, #0]
  40057e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400580:	bf00      	nop
  400582:	370c      	adds	r7, #12
  400584:	46bd      	mov	sp, r7
  400586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058a:	4770      	bx	lr

0040058c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40058c:	b480      	push	{r7}
  40058e:	b087      	sub	sp, #28
  400590:	af00      	add	r7, sp, #0
  400592:	60f8      	str	r0, [r7, #12]
  400594:	60b9      	str	r1, [r7, #8]
  400596:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	687a      	ldr	r2, [r7, #4]
  40059c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40059e:	68bb      	ldr	r3, [r7, #8]
  4005a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005a4:	d04a      	beq.n	40063c <pio_set_peripheral+0xb0>
  4005a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4005aa:	d808      	bhi.n	4005be <pio_set_peripheral+0x32>
  4005ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005b0:	d016      	beq.n	4005e0 <pio_set_peripheral+0x54>
  4005b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005b6:	d02c      	beq.n	400612 <pio_set_peripheral+0x86>
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d069      	beq.n	400690 <pio_set_peripheral+0x104>
  4005bc:	e064      	b.n	400688 <pio_set_peripheral+0xfc>
  4005be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005c2:	d065      	beq.n	400690 <pio_set_peripheral+0x104>
  4005c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005c8:	d803      	bhi.n	4005d2 <pio_set_peripheral+0x46>
  4005ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005ce:	d04a      	beq.n	400666 <pio_set_peripheral+0xda>
  4005d0:	e05a      	b.n	400688 <pio_set_peripheral+0xfc>
  4005d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005d6:	d05b      	beq.n	400690 <pio_set_peripheral+0x104>
  4005d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005dc:	d058      	beq.n	400690 <pio_set_peripheral+0x104>
  4005de:	e053      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005e4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005e6:	68fb      	ldr	r3, [r7, #12]
  4005e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005ea:	687b      	ldr	r3, [r7, #4]
  4005ec:	43d9      	mvns	r1, r3
  4005ee:	697b      	ldr	r3, [r7, #20]
  4005f0:	400b      	ands	r3, r1
  4005f2:	401a      	ands	r2, r3
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005f8:	68fb      	ldr	r3, [r7, #12]
  4005fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400602:	687b      	ldr	r3, [r7, #4]
  400604:	43d9      	mvns	r1, r3
  400606:	697b      	ldr	r3, [r7, #20]
  400608:	400b      	ands	r3, r1
  40060a:	401a      	ands	r2, r3
  40060c:	68fb      	ldr	r3, [r7, #12]
  40060e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400610:	e03a      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400616:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400618:	687a      	ldr	r2, [r7, #4]
  40061a:	697b      	ldr	r3, [r7, #20]
  40061c:	431a      	orrs	r2, r3
  40061e:	68fb      	ldr	r3, [r7, #12]
  400620:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400622:	68fb      	ldr	r3, [r7, #12]
  400624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400626:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400628:	68fb      	ldr	r3, [r7, #12]
  40062a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40062c:	687b      	ldr	r3, [r7, #4]
  40062e:	43d9      	mvns	r1, r3
  400630:	697b      	ldr	r3, [r7, #20]
  400632:	400b      	ands	r3, r1
  400634:	401a      	ands	r2, r3
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40063a:	e025      	b.n	400688 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40063c:	68fb      	ldr	r3, [r7, #12]
  40063e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400640:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400642:	68fb      	ldr	r3, [r7, #12]
  400644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400646:	687b      	ldr	r3, [r7, #4]
  400648:	43d9      	mvns	r1, r3
  40064a:	697b      	ldr	r3, [r7, #20]
  40064c:	400b      	ands	r3, r1
  40064e:	401a      	ands	r2, r3
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400654:	68fb      	ldr	r3, [r7, #12]
  400656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400658:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40065a:	687a      	ldr	r2, [r7, #4]
  40065c:	697b      	ldr	r3, [r7, #20]
  40065e:	431a      	orrs	r2, r3
  400660:	68fb      	ldr	r3, [r7, #12]
  400662:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400664:	e010      	b.n	400688 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400666:	68fb      	ldr	r3, [r7, #12]
  400668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40066a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40066c:	687a      	ldr	r2, [r7, #4]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	431a      	orrs	r2, r3
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400676:	68fb      	ldr	r3, [r7, #12]
  400678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40067a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40067c:	687a      	ldr	r2, [r7, #4]
  40067e:	697b      	ldr	r3, [r7, #20]
  400680:	431a      	orrs	r2, r3
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400686:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400688:	68fb      	ldr	r3, [r7, #12]
  40068a:	687a      	ldr	r2, [r7, #4]
  40068c:	605a      	str	r2, [r3, #4]
  40068e:	e000      	b.n	400692 <pio_set_peripheral+0x106>
		return;
  400690:	bf00      	nop
}
  400692:	371c      	adds	r7, #28
  400694:	46bd      	mov	sp, r7
  400696:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069a:	4770      	bx	lr

0040069c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40069c:	b580      	push	{r7, lr}
  40069e:	b084      	sub	sp, #16
  4006a0:	af00      	add	r7, sp, #0
  4006a2:	60f8      	str	r0, [r7, #12]
  4006a4:	60b9      	str	r1, [r7, #8]
  4006a6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4006a8:	68b9      	ldr	r1, [r7, #8]
  4006aa:	68f8      	ldr	r0, [r7, #12]
  4006ac:	4b19      	ldr	r3, [pc, #100]	; (400714 <pio_set_input+0x78>)
  4006ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0301 	and.w	r3, r3, #1
  4006b6:	461a      	mov	r2, r3
  4006b8:	68b9      	ldr	r1, [r7, #8]
  4006ba:	68f8      	ldr	r0, [r7, #12]
  4006bc:	4b16      	ldr	r3, [pc, #88]	; (400718 <pio_set_input+0x7c>)
  4006be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4006c0:	687b      	ldr	r3, [r7, #4]
  4006c2:	f003 030a 	and.w	r3, r3, #10
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d003      	beq.n	4006d2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4006ca:	68fb      	ldr	r3, [r7, #12]
  4006cc:	68ba      	ldr	r2, [r7, #8]
  4006ce:	621a      	str	r2, [r3, #32]
  4006d0:	e002      	b.n	4006d8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4006d2:	68fb      	ldr	r3, [r7, #12]
  4006d4:	68ba      	ldr	r2, [r7, #8]
  4006d6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4006d8:	687b      	ldr	r3, [r7, #4]
  4006da:	f003 0302 	and.w	r3, r3, #2
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d004      	beq.n	4006ec <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	68ba      	ldr	r2, [r7, #8]
  4006e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4006ea:	e008      	b.n	4006fe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4006ec:	687b      	ldr	r3, [r7, #4]
  4006ee:	f003 0308 	and.w	r3, r3, #8
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	d003      	beq.n	4006fe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4006f6:	68fb      	ldr	r3, [r7, #12]
  4006f8:	68ba      	ldr	r2, [r7, #8]
  4006fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4006fe:	68fb      	ldr	r3, [r7, #12]
  400700:	68ba      	ldr	r2, [r7, #8]
  400702:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	68ba      	ldr	r2, [r7, #8]
  400708:	601a      	str	r2, [r3, #0]
}
  40070a:	bf00      	nop
  40070c:	3710      	adds	r7, #16
  40070e:	46bd      	mov	sp, r7
  400710:	bd80      	pop	{r7, pc}
  400712:	bf00      	nop
  400714:	004008d5 	.word	0x004008d5
  400718:	00400529 	.word	0x00400529

0040071c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40071c:	b580      	push	{r7, lr}
  40071e:	b084      	sub	sp, #16
  400720:	af00      	add	r7, sp, #0
  400722:	60f8      	str	r0, [r7, #12]
  400724:	60b9      	str	r1, [r7, #8]
  400726:	607a      	str	r2, [r7, #4]
  400728:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40072a:	68b9      	ldr	r1, [r7, #8]
  40072c:	68f8      	ldr	r0, [r7, #12]
  40072e:	4b12      	ldr	r3, [pc, #72]	; (400778 <pio_set_output+0x5c>)
  400730:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400732:	69ba      	ldr	r2, [r7, #24]
  400734:	68b9      	ldr	r1, [r7, #8]
  400736:	68f8      	ldr	r0, [r7, #12]
  400738:	4b10      	ldr	r3, [pc, #64]	; (40077c <pio_set_output+0x60>)
  40073a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40073c:	683b      	ldr	r3, [r7, #0]
  40073e:	2b00      	cmp	r3, #0
  400740:	d003      	beq.n	40074a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400742:	68fb      	ldr	r3, [r7, #12]
  400744:	68ba      	ldr	r2, [r7, #8]
  400746:	651a      	str	r2, [r3, #80]	; 0x50
  400748:	e002      	b.n	400750 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40074a:	68fb      	ldr	r3, [r7, #12]
  40074c:	68ba      	ldr	r2, [r7, #8]
  40074e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400750:	687b      	ldr	r3, [r7, #4]
  400752:	2b00      	cmp	r3, #0
  400754:	d003      	beq.n	40075e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400756:	68fb      	ldr	r3, [r7, #12]
  400758:	68ba      	ldr	r2, [r7, #8]
  40075a:	631a      	str	r2, [r3, #48]	; 0x30
  40075c:	e002      	b.n	400764 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	68ba      	ldr	r2, [r7, #8]
  400762:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400764:	68fb      	ldr	r3, [r7, #12]
  400766:	68ba      	ldr	r2, [r7, #8]
  400768:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	68ba      	ldr	r2, [r7, #8]
  40076e:	601a      	str	r2, [r3, #0]
}
  400770:	bf00      	nop
  400772:	3710      	adds	r7, #16
  400774:	46bd      	mov	sp, r7
  400776:	bd80      	pop	{r7, pc}
  400778:	004008d5 	.word	0x004008d5
  40077c:	00400529 	.word	0x00400529

00400780 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  400780:	b590      	push	{r4, r7, lr}
  400782:	b087      	sub	sp, #28
  400784:	af02      	add	r7, sp, #8
  400786:	60f8      	str	r0, [r7, #12]
  400788:	60b9      	str	r1, [r7, #8]
  40078a:	607a      	str	r2, [r7, #4]
  40078c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40078e:	68bb      	ldr	r3, [r7, #8]
  400790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400794:	d016      	beq.n	4007c4 <pio_configure+0x44>
  400796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40079a:	d809      	bhi.n	4007b0 <pio_configure+0x30>
  40079c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4007a0:	d010      	beq.n	4007c4 <pio_configure+0x44>
  4007a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4007a6:	d00d      	beq.n	4007c4 <pio_configure+0x44>
  4007a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4007ac:	d00a      	beq.n	4007c4 <pio_configure+0x44>
  4007ae:	e03d      	b.n	40082c <pio_configure+0xac>
  4007b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4007b4:	d01a      	beq.n	4007ec <pio_configure+0x6c>
  4007b6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007ba:	d017      	beq.n	4007ec <pio_configure+0x6c>
  4007bc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4007c0:	d00e      	beq.n	4007e0 <pio_configure+0x60>
  4007c2:	e033      	b.n	40082c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4007c4:	687a      	ldr	r2, [r7, #4]
  4007c6:	68b9      	ldr	r1, [r7, #8]
  4007c8:	68f8      	ldr	r0, [r7, #12]
  4007ca:	4b1c      	ldr	r3, [pc, #112]	; (40083c <pio_configure+0xbc>)
  4007cc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4007ce:	683b      	ldr	r3, [r7, #0]
  4007d0:	f003 0301 	and.w	r3, r3, #1
  4007d4:	461a      	mov	r2, r3
  4007d6:	6879      	ldr	r1, [r7, #4]
  4007d8:	68f8      	ldr	r0, [r7, #12]
  4007da:	4b19      	ldr	r3, [pc, #100]	; (400840 <pio_configure+0xc0>)
  4007dc:	4798      	blx	r3
		break;
  4007de:	e027      	b.n	400830 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4007e0:	683a      	ldr	r2, [r7, #0]
  4007e2:	6879      	ldr	r1, [r7, #4]
  4007e4:	68f8      	ldr	r0, [r7, #12]
  4007e6:	4b17      	ldr	r3, [pc, #92]	; (400844 <pio_configure+0xc4>)
  4007e8:	4798      	blx	r3
		break;
  4007ea:	e021      	b.n	400830 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4007ec:	68bb      	ldr	r3, [r7, #8]
  4007ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4007f2:	bf0c      	ite	eq
  4007f4:	2301      	moveq	r3, #1
  4007f6:	2300      	movne	r3, #0
  4007f8:	b2db      	uxtb	r3, r3
  4007fa:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4007fc:	683b      	ldr	r3, [r7, #0]
  4007fe:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400802:	2b00      	cmp	r3, #0
  400804:	bf14      	ite	ne
  400806:	2301      	movne	r3, #1
  400808:	2300      	moveq	r3, #0
  40080a:	b2db      	uxtb	r3, r3
  40080c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40080e:	683b      	ldr	r3, [r7, #0]
  400810:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400814:	2b00      	cmp	r3, #0
  400816:	bf14      	ite	ne
  400818:	2301      	movne	r3, #1
  40081a:	2300      	moveq	r3, #0
  40081c:	b2db      	uxtb	r3, r3
  40081e:	9300      	str	r3, [sp, #0]
  400820:	460b      	mov	r3, r1
  400822:	6879      	ldr	r1, [r7, #4]
  400824:	68f8      	ldr	r0, [r7, #12]
  400826:	4c08      	ldr	r4, [pc, #32]	; (400848 <pio_configure+0xc8>)
  400828:	47a0      	blx	r4
		break;
  40082a:	e001      	b.n	400830 <pio_configure+0xb0>

	default:
		return 0;
  40082c:	2300      	movs	r3, #0
  40082e:	e000      	b.n	400832 <pio_configure+0xb2>
	}

	return 1;
  400830:	2301      	movs	r3, #1
}
  400832:	4618      	mov	r0, r3
  400834:	3714      	adds	r7, #20
  400836:	46bd      	mov	sp, r7
  400838:	bd90      	pop	{r4, r7, pc}
  40083a:	bf00      	nop
  40083c:	0040058d 	.word	0x0040058d
  400840:	00400529 	.word	0x00400529
  400844:	0040069d 	.word	0x0040069d
  400848:	0040071d 	.word	0x0040071d

0040084c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40084c:	b480      	push	{r7}
  40084e:	b085      	sub	sp, #20
  400850:	af00      	add	r7, sp, #0
  400852:	60f8      	str	r0, [r7, #12]
  400854:	60b9      	str	r1, [r7, #8]
  400856:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400858:	687b      	ldr	r3, [r7, #4]
  40085a:	f003 0310 	and.w	r3, r3, #16
  40085e:	2b00      	cmp	r3, #0
  400860:	d020      	beq.n	4008a4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	68ba      	ldr	r2, [r7, #8]
  400866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40086a:	687b      	ldr	r3, [r7, #4]
  40086c:	f003 0320 	and.w	r3, r3, #32
  400870:	2b00      	cmp	r3, #0
  400872:	d004      	beq.n	40087e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400874:	68fb      	ldr	r3, [r7, #12]
  400876:	68ba      	ldr	r2, [r7, #8]
  400878:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40087c:	e003      	b.n	400886 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40087e:	68fb      	ldr	r3, [r7, #12]
  400880:	68ba      	ldr	r2, [r7, #8]
  400882:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400886:	687b      	ldr	r3, [r7, #4]
  400888:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40088c:	2b00      	cmp	r3, #0
  40088e:	d004      	beq.n	40089a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400890:	68fb      	ldr	r3, [r7, #12]
  400892:	68ba      	ldr	r2, [r7, #8]
  400894:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400898:	e008      	b.n	4008ac <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40089a:	68fb      	ldr	r3, [r7, #12]
  40089c:	68ba      	ldr	r2, [r7, #8]
  40089e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4008a2:	e003      	b.n	4008ac <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	68ba      	ldr	r2, [r7, #8]
  4008a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4008ac:	bf00      	nop
  4008ae:	3714      	adds	r7, #20
  4008b0:	46bd      	mov	sp, r7
  4008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008b6:	4770      	bx	lr

004008b8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4008b8:	b480      	push	{r7}
  4008ba:	b083      	sub	sp, #12
  4008bc:	af00      	add	r7, sp, #0
  4008be:	6078      	str	r0, [r7, #4]
  4008c0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	683a      	ldr	r2, [r7, #0]
  4008c6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4008c8:	bf00      	nop
  4008ca:	370c      	adds	r7, #12
  4008cc:	46bd      	mov	sp, r7
  4008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008d2:	4770      	bx	lr

004008d4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4008d4:	b480      	push	{r7}
  4008d6:	b083      	sub	sp, #12
  4008d8:	af00      	add	r7, sp, #0
  4008da:	6078      	str	r0, [r7, #4]
  4008dc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4008de:	687b      	ldr	r3, [r7, #4]
  4008e0:	683a      	ldr	r2, [r7, #0]
  4008e2:	645a      	str	r2, [r3, #68]	; 0x44
}
  4008e4:	bf00      	nop
  4008e6:	370c      	adds	r7, #12
  4008e8:	46bd      	mov	sp, r7
  4008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008ee:	4770      	bx	lr

004008f0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4008f0:	b480      	push	{r7}
  4008f2:	b083      	sub	sp, #12
  4008f4:	af00      	add	r7, sp, #0
  4008f6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4008f8:	687b      	ldr	r3, [r7, #4]
  4008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4008fc:	4618      	mov	r0, r3
  4008fe:	370c      	adds	r7, #12
  400900:	46bd      	mov	sp, r7
  400902:	f85d 7b04 	ldr.w	r7, [sp], #4
  400906:	4770      	bx	lr

00400908 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400908:	b480      	push	{r7}
  40090a:	b083      	sub	sp, #12
  40090c:	af00      	add	r7, sp, #0
  40090e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400910:	687b      	ldr	r3, [r7, #4]
  400912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400914:	4618      	mov	r0, r3
  400916:	370c      	adds	r7, #12
  400918:	46bd      	mov	sp, r7
  40091a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40091e:	4770      	bx	lr

00400920 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400920:	b580      	push	{r7, lr}
  400922:	b084      	sub	sp, #16
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
  400928:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40092a:	6878      	ldr	r0, [r7, #4]
  40092c:	4b26      	ldr	r3, [pc, #152]	; (4009c8 <pio_handler_process+0xa8>)
  40092e:	4798      	blx	r3
  400930:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400932:	6878      	ldr	r0, [r7, #4]
  400934:	4b25      	ldr	r3, [pc, #148]	; (4009cc <pio_handler_process+0xac>)
  400936:	4798      	blx	r3
  400938:	4602      	mov	r2, r0
  40093a:	68fb      	ldr	r3, [r7, #12]
  40093c:	4013      	ands	r3, r2
  40093e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400940:	68fb      	ldr	r3, [r7, #12]
  400942:	2b00      	cmp	r3, #0
  400944:	d03c      	beq.n	4009c0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400946:	2300      	movs	r3, #0
  400948:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40094a:	e034      	b.n	4009b6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40094c:	4a20      	ldr	r2, [pc, #128]	; (4009d0 <pio_handler_process+0xb0>)
  40094e:	68bb      	ldr	r3, [r7, #8]
  400950:	011b      	lsls	r3, r3, #4
  400952:	4413      	add	r3, r2
  400954:	681a      	ldr	r2, [r3, #0]
  400956:	683b      	ldr	r3, [r7, #0]
  400958:	429a      	cmp	r2, r3
  40095a:	d126      	bne.n	4009aa <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40095c:	4a1c      	ldr	r2, [pc, #112]	; (4009d0 <pio_handler_process+0xb0>)
  40095e:	68bb      	ldr	r3, [r7, #8]
  400960:	011b      	lsls	r3, r3, #4
  400962:	4413      	add	r3, r2
  400964:	3304      	adds	r3, #4
  400966:	681a      	ldr	r2, [r3, #0]
  400968:	68fb      	ldr	r3, [r7, #12]
  40096a:	4013      	ands	r3, r2
  40096c:	2b00      	cmp	r3, #0
  40096e:	d01c      	beq.n	4009aa <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400970:	4a17      	ldr	r2, [pc, #92]	; (4009d0 <pio_handler_process+0xb0>)
  400972:	68bb      	ldr	r3, [r7, #8]
  400974:	011b      	lsls	r3, r3, #4
  400976:	4413      	add	r3, r2
  400978:	330c      	adds	r3, #12
  40097a:	681b      	ldr	r3, [r3, #0]
  40097c:	4914      	ldr	r1, [pc, #80]	; (4009d0 <pio_handler_process+0xb0>)
  40097e:	68ba      	ldr	r2, [r7, #8]
  400980:	0112      	lsls	r2, r2, #4
  400982:	440a      	add	r2, r1
  400984:	6810      	ldr	r0, [r2, #0]
  400986:	4912      	ldr	r1, [pc, #72]	; (4009d0 <pio_handler_process+0xb0>)
  400988:	68ba      	ldr	r2, [r7, #8]
  40098a:	0112      	lsls	r2, r2, #4
  40098c:	440a      	add	r2, r1
  40098e:	3204      	adds	r2, #4
  400990:	6812      	ldr	r2, [r2, #0]
  400992:	4611      	mov	r1, r2
  400994:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400996:	4a0e      	ldr	r2, [pc, #56]	; (4009d0 <pio_handler_process+0xb0>)
  400998:	68bb      	ldr	r3, [r7, #8]
  40099a:	011b      	lsls	r3, r3, #4
  40099c:	4413      	add	r3, r2
  40099e:	3304      	adds	r3, #4
  4009a0:	681b      	ldr	r3, [r3, #0]
  4009a2:	43db      	mvns	r3, r3
  4009a4:	68fa      	ldr	r2, [r7, #12]
  4009a6:	4013      	ands	r3, r2
  4009a8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4009aa:	68bb      	ldr	r3, [r7, #8]
  4009ac:	3301      	adds	r3, #1
  4009ae:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009b0:	68bb      	ldr	r3, [r7, #8]
  4009b2:	2b06      	cmp	r3, #6
  4009b4:	d803      	bhi.n	4009be <pio_handler_process+0x9e>
		while (status != 0) {
  4009b6:	68fb      	ldr	r3, [r7, #12]
  4009b8:	2b00      	cmp	r3, #0
  4009ba:	d1c7      	bne.n	40094c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4009bc:	e000      	b.n	4009c0 <pio_handler_process+0xa0>
				break;
  4009be:	bf00      	nop
}
  4009c0:	bf00      	nop
  4009c2:	3710      	adds	r7, #16
  4009c4:	46bd      	mov	sp, r7
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	004008f1 	.word	0x004008f1
  4009cc:	00400909 	.word	0x00400909
  4009d0:	20400460 	.word	0x20400460

004009d4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4009d4:	b580      	push	{r7, lr}
  4009d6:	b086      	sub	sp, #24
  4009d8:	af00      	add	r7, sp, #0
  4009da:	60f8      	str	r0, [r7, #12]
  4009dc:	60b9      	str	r1, [r7, #8]
  4009de:	607a      	str	r2, [r7, #4]
  4009e0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4009e2:	4b21      	ldr	r3, [pc, #132]	; (400a68 <pio_handler_set+0x94>)
  4009e4:	681b      	ldr	r3, [r3, #0]
  4009e6:	2b06      	cmp	r3, #6
  4009e8:	d901      	bls.n	4009ee <pio_handler_set+0x1a>
		return 1;
  4009ea:	2301      	movs	r3, #1
  4009ec:	e038      	b.n	400a60 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4009ee:	2300      	movs	r3, #0
  4009f0:	75fb      	strb	r3, [r7, #23]
  4009f2:	e011      	b.n	400a18 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4009f4:	7dfb      	ldrb	r3, [r7, #23]
  4009f6:	011b      	lsls	r3, r3, #4
  4009f8:	4a1c      	ldr	r2, [pc, #112]	; (400a6c <pio_handler_set+0x98>)
  4009fa:	4413      	add	r3, r2
  4009fc:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4009fe:	693b      	ldr	r3, [r7, #16]
  400a00:	681a      	ldr	r2, [r3, #0]
  400a02:	68bb      	ldr	r3, [r7, #8]
  400a04:	429a      	cmp	r2, r3
  400a06:	d104      	bne.n	400a12 <pio_handler_set+0x3e>
  400a08:	693b      	ldr	r3, [r7, #16]
  400a0a:	685a      	ldr	r2, [r3, #4]
  400a0c:	687b      	ldr	r3, [r7, #4]
  400a0e:	429a      	cmp	r2, r3
  400a10:	d008      	beq.n	400a24 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a12:	7dfb      	ldrb	r3, [r7, #23]
  400a14:	3301      	adds	r3, #1
  400a16:	75fb      	strb	r3, [r7, #23]
  400a18:	7dfa      	ldrb	r2, [r7, #23]
  400a1a:	4b13      	ldr	r3, [pc, #76]	; (400a68 <pio_handler_set+0x94>)
  400a1c:	681b      	ldr	r3, [r3, #0]
  400a1e:	429a      	cmp	r2, r3
  400a20:	d9e8      	bls.n	4009f4 <pio_handler_set+0x20>
  400a22:	e000      	b.n	400a26 <pio_handler_set+0x52>
			break;
  400a24:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a26:	693b      	ldr	r3, [r7, #16]
  400a28:	68ba      	ldr	r2, [r7, #8]
  400a2a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400a2c:	693b      	ldr	r3, [r7, #16]
  400a2e:	687a      	ldr	r2, [r7, #4]
  400a30:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400a32:	693b      	ldr	r3, [r7, #16]
  400a34:	683a      	ldr	r2, [r7, #0]
  400a36:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400a38:	693b      	ldr	r3, [r7, #16]
  400a3a:	6a3a      	ldr	r2, [r7, #32]
  400a3c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400a3e:	7dfa      	ldrb	r2, [r7, #23]
  400a40:	4b09      	ldr	r3, [pc, #36]	; (400a68 <pio_handler_set+0x94>)
  400a42:	681b      	ldr	r3, [r3, #0]
  400a44:	3301      	adds	r3, #1
  400a46:	429a      	cmp	r2, r3
  400a48:	d104      	bne.n	400a54 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400a4a:	4b07      	ldr	r3, [pc, #28]	; (400a68 <pio_handler_set+0x94>)
  400a4c:	681b      	ldr	r3, [r3, #0]
  400a4e:	3301      	adds	r3, #1
  400a50:	4a05      	ldr	r2, [pc, #20]	; (400a68 <pio_handler_set+0x94>)
  400a52:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400a54:	683a      	ldr	r2, [r7, #0]
  400a56:	6879      	ldr	r1, [r7, #4]
  400a58:	68f8      	ldr	r0, [r7, #12]
  400a5a:	4b05      	ldr	r3, [pc, #20]	; (400a70 <pio_handler_set+0x9c>)
  400a5c:	4798      	blx	r3

	return 0;
  400a5e:	2300      	movs	r3, #0
}
  400a60:	4618      	mov	r0, r3
  400a62:	3718      	adds	r7, #24
  400a64:	46bd      	mov	sp, r7
  400a66:	bd80      	pop	{r7, pc}
  400a68:	204004d0 	.word	0x204004d0
  400a6c:	20400460 	.word	0x20400460
  400a70:	0040084d 	.word	0x0040084d

00400a74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a74:	b580      	push	{r7, lr}
  400a76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400a78:	210a      	movs	r1, #10
  400a7a:	4802      	ldr	r0, [pc, #8]	; (400a84 <PIOA_Handler+0x10>)
  400a7c:	4b02      	ldr	r3, [pc, #8]	; (400a88 <PIOA_Handler+0x14>)
  400a7e:	4798      	blx	r3
}
  400a80:	bf00      	nop
  400a82:	bd80      	pop	{r7, pc}
  400a84:	400e0e00 	.word	0x400e0e00
  400a88:	00400921 	.word	0x00400921

00400a8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a8c:	b580      	push	{r7, lr}
  400a8e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400a90:	210b      	movs	r1, #11
  400a92:	4802      	ldr	r0, [pc, #8]	; (400a9c <PIOB_Handler+0x10>)
  400a94:	4b02      	ldr	r3, [pc, #8]	; (400aa0 <PIOB_Handler+0x14>)
  400a96:	4798      	blx	r3
}
  400a98:	bf00      	nop
  400a9a:	bd80      	pop	{r7, pc}
  400a9c:	400e1000 	.word	0x400e1000
  400aa0:	00400921 	.word	0x00400921

00400aa4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400aa4:	b580      	push	{r7, lr}
  400aa6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400aa8:	210c      	movs	r1, #12
  400aaa:	4802      	ldr	r0, [pc, #8]	; (400ab4 <PIOC_Handler+0x10>)
  400aac:	4b02      	ldr	r3, [pc, #8]	; (400ab8 <PIOC_Handler+0x14>)
  400aae:	4798      	blx	r3
}
  400ab0:	bf00      	nop
  400ab2:	bd80      	pop	{r7, pc}
  400ab4:	400e1200 	.word	0x400e1200
  400ab8:	00400921 	.word	0x00400921

00400abc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400abc:	b580      	push	{r7, lr}
  400abe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400ac0:	2110      	movs	r1, #16
  400ac2:	4802      	ldr	r0, [pc, #8]	; (400acc <PIOD_Handler+0x10>)
  400ac4:	4b02      	ldr	r3, [pc, #8]	; (400ad0 <PIOD_Handler+0x14>)
  400ac6:	4798      	blx	r3
}
  400ac8:	bf00      	nop
  400aca:	bd80      	pop	{r7, pc}
  400acc:	400e1400 	.word	0x400e1400
  400ad0:	00400921 	.word	0x00400921

00400ad4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ad4:	b580      	push	{r7, lr}
  400ad6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400ad8:	2111      	movs	r1, #17
  400ada:	4802      	ldr	r0, [pc, #8]	; (400ae4 <PIOE_Handler+0x10>)
  400adc:	4b02      	ldr	r3, [pc, #8]	; (400ae8 <PIOE_Handler+0x14>)
  400ade:	4798      	blx	r3
}
  400ae0:	bf00      	nop
  400ae2:	bd80      	pop	{r7, pc}
  400ae4:	400e1600 	.word	0x400e1600
  400ae8:	00400921 	.word	0x00400921

00400aec <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400aec:	b480      	push	{r7}
  400aee:	b083      	sub	sp, #12
  400af0:	af00      	add	r7, sp, #0
  400af2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400af4:	687b      	ldr	r3, [r7, #4]
  400af6:	3b01      	subs	r3, #1
  400af8:	2b03      	cmp	r3, #3
  400afa:	d81a      	bhi.n	400b32 <pmc_mck_set_division+0x46>
  400afc:	a201      	add	r2, pc, #4	; (adr r2, 400b04 <pmc_mck_set_division+0x18>)
  400afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b02:	bf00      	nop
  400b04:	00400b15 	.word	0x00400b15
  400b08:	00400b1b 	.word	0x00400b1b
  400b0c:	00400b23 	.word	0x00400b23
  400b10:	00400b2b 	.word	0x00400b2b
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b14:	2300      	movs	r3, #0
  400b16:	607b      	str	r3, [r7, #4]
			break;
  400b18:	e00e      	b.n	400b38 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b1e:	607b      	str	r3, [r7, #4]
			break;
  400b20:	e00a      	b.n	400b38 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b22:	f44f 7340 	mov.w	r3, #768	; 0x300
  400b26:	607b      	str	r3, [r7, #4]
			break;
  400b28:	e006      	b.n	400b38 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
  400b2e:	607b      	str	r3, [r7, #4]
			break;
  400b30:	e002      	b.n	400b38 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b32:	2300      	movs	r3, #0
  400b34:	607b      	str	r3, [r7, #4]
			break;
  400b36:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400b38:	490a      	ldr	r1, [pc, #40]	; (400b64 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b3a:	4b0a      	ldr	r3, [pc, #40]	; (400b64 <pmc_mck_set_division+0x78>)
  400b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400b42:	687b      	ldr	r3, [r7, #4]
  400b44:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400b46:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b48:	bf00      	nop
  400b4a:	4b06      	ldr	r3, [pc, #24]	; (400b64 <pmc_mck_set_division+0x78>)
  400b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b4e:	f003 0308 	and.w	r3, r3, #8
  400b52:	2b00      	cmp	r3, #0
  400b54:	d0f9      	beq.n	400b4a <pmc_mck_set_division+0x5e>
}
  400b56:	bf00      	nop
  400b58:	370c      	adds	r7, #12
  400b5a:	46bd      	mov	sp, r7
  400b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400b68:	b480      	push	{r7}
  400b6a:	b085      	sub	sp, #20
  400b6c:	af00      	add	r7, sp, #0
  400b6e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b70:	491d      	ldr	r1, [pc, #116]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400b72:	4b1d      	ldr	r3, [pc, #116]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400b7a:	687b      	ldr	r3, [r7, #4]
  400b7c:	4313      	orrs	r3, r2
  400b7e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b84:	60fb      	str	r3, [r7, #12]
  400b86:	e007      	b.n	400b98 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	d101      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400b8e:	2301      	movs	r3, #1
  400b90:	e023      	b.n	400bda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400b92:	68fb      	ldr	r3, [r7, #12]
  400b94:	3b01      	subs	r3, #1
  400b96:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b98:	4b13      	ldr	r3, [pc, #76]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b9c:	f003 0308 	and.w	r3, r3, #8
  400ba0:	2b00      	cmp	r3, #0
  400ba2:	d0f1      	beq.n	400b88 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ba4:	4a10      	ldr	r2, [pc, #64]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400ba6:	4b10      	ldr	r3, [pc, #64]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400baa:	f023 0303 	bic.w	r3, r3, #3
  400bae:	f043 0302 	orr.w	r3, r3, #2
  400bb2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bb8:	60fb      	str	r3, [r7, #12]
  400bba:	e007      	b.n	400bcc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bbc:	68fb      	ldr	r3, [r7, #12]
  400bbe:	2b00      	cmp	r3, #0
  400bc0:	d101      	bne.n	400bc6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400bc2:	2301      	movs	r3, #1
  400bc4:	e009      	b.n	400bda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bc6:	68fb      	ldr	r3, [r7, #12]
  400bc8:	3b01      	subs	r3, #1
  400bca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bcc:	4b06      	ldr	r3, [pc, #24]	; (400be8 <pmc_switch_mck_to_pllack+0x80>)
  400bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400bd0:	f003 0308 	and.w	r3, r3, #8
  400bd4:	2b00      	cmp	r3, #0
  400bd6:	d0f1      	beq.n	400bbc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400bd8:	2300      	movs	r3, #0
}
  400bda:	4618      	mov	r0, r3
  400bdc:	3714      	adds	r7, #20
  400bde:	46bd      	mov	sp, r7
  400be0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop
  400be8:	400e0600 	.word	0x400e0600

00400bec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400bf4:	687b      	ldr	r3, [r7, #4]
  400bf6:	2b01      	cmp	r3, #1
  400bf8:	d105      	bne.n	400c06 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400bfa:	4907      	ldr	r1, [pc, #28]	; (400c18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400bfc:	4b06      	ldr	r3, [pc, #24]	; (400c18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400bfe:	689a      	ldr	r2, [r3, #8]
  400c00:	4b06      	ldr	r3, [pc, #24]	; (400c1c <pmc_switch_sclk_to_32kxtal+0x30>)
  400c02:	4313      	orrs	r3, r2
  400c04:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c06:	4b04      	ldr	r3, [pc, #16]	; (400c18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c08:	4a05      	ldr	r2, [pc, #20]	; (400c20 <pmc_switch_sclk_to_32kxtal+0x34>)
  400c0a:	601a      	str	r2, [r3, #0]
}
  400c0c:	bf00      	nop
  400c0e:	370c      	adds	r7, #12
  400c10:	46bd      	mov	sp, r7
  400c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c16:	4770      	bx	lr
  400c18:	400e1810 	.word	0x400e1810
  400c1c:	a5100000 	.word	0xa5100000
  400c20:	a5000008 	.word	0xa5000008

00400c24 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c24:	b480      	push	{r7}
  400c26:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c28:	4b09      	ldr	r3, [pc, #36]	; (400c50 <pmc_osc_is_ready_32kxtal+0x2c>)
  400c2a:	695b      	ldr	r3, [r3, #20]
  400c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c30:	2b00      	cmp	r3, #0
  400c32:	d007      	beq.n	400c44 <pmc_osc_is_ready_32kxtal+0x20>
  400c34:	4b07      	ldr	r3, [pc, #28]	; (400c54 <pmc_osc_is_ready_32kxtal+0x30>)
  400c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c3c:	2b00      	cmp	r3, #0
  400c3e:	d001      	beq.n	400c44 <pmc_osc_is_ready_32kxtal+0x20>
  400c40:	2301      	movs	r3, #1
  400c42:	e000      	b.n	400c46 <pmc_osc_is_ready_32kxtal+0x22>
  400c44:	2300      	movs	r3, #0
}
  400c46:	4618      	mov	r0, r3
  400c48:	46bd      	mov	sp, r7
  400c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c4e:	4770      	bx	lr
  400c50:	400e1810 	.word	0x400e1810
  400c54:	400e0600 	.word	0x400e0600

00400c58 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400c58:	b480      	push	{r7}
  400c5a:	b083      	sub	sp, #12
  400c5c:	af00      	add	r7, sp, #0
  400c5e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400c60:	4915      	ldr	r1, [pc, #84]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c62:	4b15      	ldr	r3, [pc, #84]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c64:	6a1a      	ldr	r2, [r3, #32]
  400c66:	4b15      	ldr	r3, [pc, #84]	; (400cbc <pmc_switch_mainck_to_fastrc+0x64>)
  400c68:	4313      	orrs	r3, r2
  400c6a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c6c:	bf00      	nop
  400c6e:	4b12      	ldr	r3, [pc, #72]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c76:	2b00      	cmp	r3, #0
  400c78:	d0f9      	beq.n	400c6e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c7a:	490f      	ldr	r1, [pc, #60]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c7c:	4b0e      	ldr	r3, [pc, #56]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c7e:	6a1a      	ldr	r2, [r3, #32]
  400c80:	4b0f      	ldr	r3, [pc, #60]	; (400cc0 <pmc_switch_mainck_to_fastrc+0x68>)
  400c82:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400c84:	687a      	ldr	r2, [r7, #4]
  400c86:	4313      	orrs	r3, r2
  400c88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400c8c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400c8e:	bf00      	nop
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d0f9      	beq.n	400c90 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400c9c:	4906      	ldr	r1, [pc, #24]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400c9e:	4b06      	ldr	r3, [pc, #24]	; (400cb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400ca0:	6a1a      	ldr	r2, [r3, #32]
  400ca2:	4b08      	ldr	r3, [pc, #32]	; (400cc4 <pmc_switch_mainck_to_fastrc+0x6c>)
  400ca4:	4013      	ands	r3, r2
  400ca6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400caa:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400cac:	bf00      	nop
  400cae:	370c      	adds	r7, #12
  400cb0:	46bd      	mov	sp, r7
  400cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cb6:	4770      	bx	lr
  400cb8:	400e0600 	.word	0x400e0600
  400cbc:	00370008 	.word	0x00370008
  400cc0:	ffc8ff8f 	.word	0xffc8ff8f
  400cc4:	fec8ffff 	.word	0xfec8ffff

00400cc8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400cc8:	b480      	push	{r7}
  400cca:	b083      	sub	sp, #12
  400ccc:	af00      	add	r7, sp, #0
  400cce:	6078      	str	r0, [r7, #4]
  400cd0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400cd2:	687b      	ldr	r3, [r7, #4]
  400cd4:	2b00      	cmp	r3, #0
  400cd6:	d008      	beq.n	400cea <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400cd8:	4913      	ldr	r1, [pc, #76]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cda:	4b13      	ldr	r3, [pc, #76]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cdc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400cde:	4a13      	ldr	r2, [pc, #76]	; (400d2c <pmc_switch_mainck_to_xtal+0x64>)
  400ce0:	401a      	ands	r2, r3
  400ce2:	4b13      	ldr	r3, [pc, #76]	; (400d30 <pmc_switch_mainck_to_xtal+0x68>)
  400ce4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ce6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400ce8:	e018      	b.n	400d1c <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400cea:	490f      	ldr	r1, [pc, #60]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cec:	4b0e      	ldr	r3, [pc, #56]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400cee:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400cf0:	4b10      	ldr	r3, [pc, #64]	; (400d34 <pmc_switch_mainck_to_xtal+0x6c>)
  400cf2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400cf4:	683a      	ldr	r2, [r7, #0]
  400cf6:	0212      	lsls	r2, r2, #8
  400cf8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400cfa:	431a      	orrs	r2, r3
  400cfc:	4b0e      	ldr	r3, [pc, #56]	; (400d38 <pmc_switch_mainck_to_xtal+0x70>)
  400cfe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d00:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d02:	bf00      	nop
  400d04:	4b08      	ldr	r3, [pc, #32]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d08:	f003 0301 	and.w	r3, r3, #1
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d0f9      	beq.n	400d04 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d10:	4905      	ldr	r1, [pc, #20]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400d12:	4b05      	ldr	r3, [pc, #20]	; (400d28 <pmc_switch_mainck_to_xtal+0x60>)
  400d14:	6a1a      	ldr	r2, [r3, #32]
  400d16:	4b09      	ldr	r3, [pc, #36]	; (400d3c <pmc_switch_mainck_to_xtal+0x74>)
  400d18:	4313      	orrs	r3, r2
  400d1a:	620b      	str	r3, [r1, #32]
}
  400d1c:	bf00      	nop
  400d1e:	370c      	adds	r7, #12
  400d20:	46bd      	mov	sp, r7
  400d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d26:	4770      	bx	lr
  400d28:	400e0600 	.word	0x400e0600
  400d2c:	fec8fffc 	.word	0xfec8fffc
  400d30:	01370002 	.word	0x01370002
  400d34:	ffc8fffc 	.word	0xffc8fffc
  400d38:	00370001 	.word	0x00370001
  400d3c:	01370000 	.word	0x01370000

00400d40 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d40:	b480      	push	{r7}
  400d42:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d44:	4b04      	ldr	r3, [pc, #16]	; (400d58 <pmc_osc_is_ready_mainck+0x18>)
  400d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d4c:	4618      	mov	r0, r3
  400d4e:	46bd      	mov	sp, r7
  400d50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d54:	4770      	bx	lr
  400d56:	bf00      	nop
  400d58:	400e0600 	.word	0x400e0600

00400d5c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400d5c:	b480      	push	{r7}
  400d5e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d60:	4b04      	ldr	r3, [pc, #16]	; (400d74 <pmc_disable_pllack+0x18>)
  400d62:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d66:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400d68:	bf00      	nop
  400d6a:	46bd      	mov	sp, r7
  400d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d70:	4770      	bx	lr
  400d72:	bf00      	nop
  400d74:	400e0600 	.word	0x400e0600

00400d78 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400d78:	b480      	push	{r7}
  400d7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d7c:	4b04      	ldr	r3, [pc, #16]	; (400d90 <pmc_is_locked_pllack+0x18>)
  400d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d80:	f003 0302 	and.w	r3, r3, #2
}
  400d84:	4618      	mov	r0, r3
  400d86:	46bd      	mov	sp, r7
  400d88:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d8c:	4770      	bx	lr
  400d8e:	bf00      	nop
  400d90:	400e0600 	.word	0x400e0600

00400d94 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400d94:	b480      	push	{r7}
  400d96:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400d98:	4b04      	ldr	r3, [pc, #16]	; (400dac <pmc_is_locked_upll+0x18>)
  400d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400da0:	4618      	mov	r0, r3
  400da2:	46bd      	mov	sp, r7
  400da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop
  400dac:	400e0600 	.word	0x400e0600

00400db0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400db0:	b480      	push	{r7}
  400db2:	b083      	sub	sp, #12
  400db4:	af00      	add	r7, sp, #0
  400db6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400db8:	687b      	ldr	r3, [r7, #4]
  400dba:	2b3f      	cmp	r3, #63	; 0x3f
  400dbc:	d901      	bls.n	400dc2 <pmc_enable_periph_clk+0x12>
		return 1;
  400dbe:	2301      	movs	r3, #1
  400dc0:	e02f      	b.n	400e22 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400dc2:	687b      	ldr	r3, [r7, #4]
  400dc4:	2b1f      	cmp	r3, #31
  400dc6:	d813      	bhi.n	400df0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400dc8:	4b19      	ldr	r3, [pc, #100]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400dca:	699a      	ldr	r2, [r3, #24]
  400dcc:	2101      	movs	r1, #1
  400dce:	687b      	ldr	r3, [r7, #4]
  400dd0:	fa01 f303 	lsl.w	r3, r1, r3
  400dd4:	401a      	ands	r2, r3
  400dd6:	2101      	movs	r1, #1
  400dd8:	687b      	ldr	r3, [r7, #4]
  400dda:	fa01 f303 	lsl.w	r3, r1, r3
  400dde:	429a      	cmp	r2, r3
  400de0:	d01e      	beq.n	400e20 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400de2:	4a13      	ldr	r2, [pc, #76]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400de4:	2101      	movs	r1, #1
  400de6:	687b      	ldr	r3, [r7, #4]
  400de8:	fa01 f303 	lsl.w	r3, r1, r3
  400dec:	6113      	str	r3, [r2, #16]
  400dee:	e017      	b.n	400e20 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400df0:	687b      	ldr	r3, [r7, #4]
  400df2:	3b20      	subs	r3, #32
  400df4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400df6:	4b0e      	ldr	r3, [pc, #56]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400df8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400dfc:	2101      	movs	r1, #1
  400dfe:	687b      	ldr	r3, [r7, #4]
  400e00:	fa01 f303 	lsl.w	r3, r1, r3
  400e04:	401a      	ands	r2, r3
  400e06:	2101      	movs	r1, #1
  400e08:	687b      	ldr	r3, [r7, #4]
  400e0a:	fa01 f303 	lsl.w	r3, r1, r3
  400e0e:	429a      	cmp	r2, r3
  400e10:	d006      	beq.n	400e20 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e12:	4a07      	ldr	r2, [pc, #28]	; (400e30 <pmc_enable_periph_clk+0x80>)
  400e14:	2101      	movs	r1, #1
  400e16:	687b      	ldr	r3, [r7, #4]
  400e18:	fa01 f303 	lsl.w	r3, r1, r3
  400e1c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e20:	2300      	movs	r3, #0
}
  400e22:	4618      	mov	r0, r3
  400e24:	370c      	adds	r7, #12
  400e26:	46bd      	mov	sp, r7
  400e28:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	400e0600 	.word	0x400e0600

00400e34 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400e34:	b480      	push	{r7}
  400e36:	b083      	sub	sp, #12
  400e38:	af00      	add	r7, sp, #0
  400e3a:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  400e3c:	4a04      	ldr	r2, [pc, #16]	; (400e50 <pmc_set_flash_in_wait_mode+0x1c>)
  400e3e:	687b      	ldr	r3, [r7, #4]
  400e40:	6013      	str	r3, [r2, #0]
}
  400e42:	bf00      	nop
  400e44:	370c      	adds	r7, #12
  400e46:	46bd      	mov	sp, r7
  400e48:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e4c:	4770      	bx	lr
  400e4e:	bf00      	nop
  400e50:	2040000c 	.word	0x2040000c

00400e54 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  400e54:	b480      	push	{r7}
  400e56:	b083      	sub	sp, #12
  400e58:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400e5a:	4b20      	ldr	r3, [pc, #128]	; (400edc <pmc_enable_waitmode+0x88>)
  400e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400e5e:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400e60:	687b      	ldr	r3, [r7, #4]
  400e62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400e66:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400e68:	687b      	ldr	r3, [r7, #4]
  400e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400e6e:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  400e70:	4a1a      	ldr	r2, [pc, #104]	; (400edc <pmc_enable_waitmode+0x88>)
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400e76:	4919      	ldr	r1, [pc, #100]	; (400edc <pmc_enable_waitmode+0x88>)
  400e78:	4b18      	ldr	r3, [pc, #96]	; (400edc <pmc_enable_waitmode+0x88>)
  400e7a:	6a1a      	ldr	r2, [r3, #32]
  400e7c:	4b18      	ldr	r3, [pc, #96]	; (400ee0 <pmc_enable_waitmode+0x8c>)
  400e7e:	4313      	orrs	r3, r2
  400e80:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e82:	bf00      	nop
  400e84:	4b15      	ldr	r3, [pc, #84]	; (400edc <pmc_enable_waitmode+0x88>)
  400e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e88:	f003 0308 	and.w	r3, r3, #8
  400e8c:	2b00      	cmp	r3, #0
  400e8e:	d0f9      	beq.n	400e84 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400e90:	2300      	movs	r3, #0
  400e92:	607b      	str	r3, [r7, #4]
  400e94:	e003      	b.n	400e9e <pmc_enable_waitmode+0x4a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400e96:	bf00      	nop
  400e98:	687b      	ldr	r3, [r7, #4]
  400e9a:	3301      	adds	r3, #1
  400e9c:	607b      	str	r3, [r7, #4]
  400e9e:	687b      	ldr	r3, [r7, #4]
  400ea0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  400ea4:	d3f7      	bcc.n	400e96 <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400ea6:	bf00      	nop
  400ea8:	4b0c      	ldr	r3, [pc, #48]	; (400edc <pmc_enable_waitmode+0x88>)
  400eaa:	6a1b      	ldr	r3, [r3, #32]
  400eac:	f003 0308 	and.w	r3, r3, #8
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d0f9      	beq.n	400ea8 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400eb4:	4b09      	ldr	r3, [pc, #36]	; (400edc <pmc_enable_waitmode+0x88>)
  400eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400eb8:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  400ec0:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400ec2:	687b      	ldr	r3, [r7, #4]
  400ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400ec8:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  400eca:	4a04      	ldr	r2, [pc, #16]	; (400edc <pmc_enable_waitmode+0x88>)
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  400ed0:	bf00      	nop
  400ed2:	370c      	adds	r7, #12
  400ed4:	46bd      	mov	sp, r7
  400ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eda:	4770      	bx	lr
  400edc:	400e0600 	.word	0x400e0600
  400ee0:	00370004 	.word	0x00370004

00400ee4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400ee4:	b590      	push	{r4, r7, lr}
  400ee6:	b099      	sub	sp, #100	; 0x64
  400ee8:	af00      	add	r7, sp, #0
  400eea:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  400eec:	687b      	ldr	r3, [r7, #4]
  400eee:	3b01      	subs	r3, #1
  400ef0:	2b04      	cmp	r3, #4
  400ef2:	f200 81a3 	bhi.w	40123c <pmc_sleep+0x358>
  400ef6:	a201      	add	r2, pc, #4	; (adr r2, 400efc <pmc_sleep+0x18>)
  400ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400efc:	00400f11 	.word	0x00400f11
  400f00:	00400f11 	.word	0x00400f11
  400f04:	00400f2d 	.word	0x00400f2d
  400f08:	00400f2d 	.word	0x00400f2d
  400f0c:	0040121b 	.word	0x0040121b
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400f10:	4a71      	ldr	r2, [pc, #452]	; (4010d8 <pmc_sleep+0x1f4>)
  400f12:	4b71      	ldr	r3, [pc, #452]	; (4010d8 <pmc_sleep+0x1f4>)
  400f14:	691b      	ldr	r3, [r3, #16]
  400f16:	f023 0304 	bic.w	r3, r3, #4
  400f1a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400f1c:	4b6f      	ldr	r3, [pc, #444]	; (4010dc <pmc_sleep+0x1f8>)
  400f1e:	2201      	movs	r2, #1
  400f20:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400f22:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400f26:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400f28:	bf30      	wfi
		__WFI();
		break;
  400f2a:	e187      	b.n	40123c <pmc_sleep+0x358>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	2b03      	cmp	r3, #3
  400f30:	d103      	bne.n	400f3a <pmc_sleep+0x56>
  400f32:	2000      	movs	r0, #0
  400f34:	4b6a      	ldr	r3, [pc, #424]	; (4010e0 <pmc_sleep+0x1fc>)
  400f36:	4798      	blx	r3
  400f38:	e003      	b.n	400f42 <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400f3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400f3e:	4b68      	ldr	r3, [pc, #416]	; (4010e0 <pmc_sleep+0x1fc>)
  400f40:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400f42:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400f44:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400f48:	4b64      	ldr	r3, [pc, #400]	; (4010dc <pmc_sleep+0x1f8>)
  400f4a:	2200      	movs	r2, #0
  400f4c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400f4e:	4b65      	ldr	r3, [pc, #404]	; (4010e4 <pmc_sleep+0x200>)
  400f50:	2201      	movs	r2, #1
  400f52:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	2b04      	cmp	r3, #4
  400f58:	bf0c      	ite	eq
  400f5a:	2301      	moveq	r3, #1
  400f5c:	2300      	movne	r3, #0
  400f5e:	b2da      	uxtb	r2, r3
  400f60:	f107 031c 	add.w	r3, r7, #28
  400f64:	643b      	str	r3, [r7, #64]	; 0x40
  400f66:	f107 0318 	add.w	r3, r7, #24
  400f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  400f6c:	f107 0314 	add.w	r3, r7, #20
  400f70:	63bb      	str	r3, [r7, #56]	; 0x38
  400f72:	f107 0310 	add.w	r3, r7, #16
  400f76:	637b      	str	r3, [r7, #52]	; 0x34
  400f78:	f107 030c 	add.w	r3, r7, #12
  400f7c:	633b      	str	r3, [r7, #48]	; 0x30
  400f7e:	4613      	mov	r3, r2
  400f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  400f84:	4b58      	ldr	r3, [pc, #352]	; (4010e8 <pmc_sleep+0x204>)
  400f86:	6a1b      	ldr	r3, [r3, #32]
  400f88:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  400f8a:	4b57      	ldr	r3, [pc, #348]	; (4010e8 <pmc_sleep+0x204>)
  400f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  400f90:	4b56      	ldr	r3, [pc, #344]	; (4010ec <pmc_sleep+0x208>)
  400f92:	681b      	ldr	r3, [r3, #0]
  400f94:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  400f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d002      	beq.n	400fa2 <pmc_sleep+0xbe>
		*p_osc_setting = mor;
  400f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  400f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400fa0:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  400fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	d003      	beq.n	400fb0 <pmc_sleep+0xcc>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400fa8:	4b4f      	ldr	r3, [pc, #316]	; (4010e8 <pmc_sleep+0x204>)
  400faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  400fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400fae:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  400fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d002      	beq.n	400fbc <pmc_sleep+0xd8>
		*p_pll1_setting = 0;
  400fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400fb8:	2200      	movs	r2, #0
  400fba:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  400fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d002      	beq.n	400fc8 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  400fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400fc6:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  400fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400fca:	2b00      	cmp	r3, #0
  400fcc:	d002      	beq.n	400fd4 <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  400fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400fd0:	6a3a      	ldr	r2, [r7, #32]
  400fd2:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400fd4:	4944      	ldr	r1, [pc, #272]	; (4010e8 <pmc_sleep+0x204>)
  400fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  400fd8:	4b45      	ldr	r3, [pc, #276]	; (4010f0 <pmc_sleep+0x20c>)
  400fda:	4313      	orrs	r3, r2
  400fdc:	620b      	str	r3, [r1, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fe0:	f003 0303 	and.w	r3, r3, #3
  400fe4:	2b01      	cmp	r3, #1
  400fe6:	d90e      	bls.n	401006 <pmc_sleep+0x122>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fea:	f023 0303 	bic.w	r3, r3, #3
  400fee:	f043 0301 	orr.w	r3, r3, #1
  400ff2:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  400ff4:	4a3c      	ldr	r2, [pc, #240]	; (4010e8 <pmc_sleep+0x204>)
  400ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ff8:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400ffa:	4b3b      	ldr	r3, [pc, #236]	; (4010e8 <pmc_sleep+0x204>)
  400ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ffe:	f003 0308 	and.w	r3, r3, #8
  401002:	2b00      	cmp	r3, #0
  401004:	d0f9      	beq.n	400ffa <pmc_sleep+0x116>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401008:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40100c:	2b00      	cmp	r3, #0
  40100e:	d00c      	beq.n	40102a <pmc_sleep+0x146>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401016:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  401018:	4a33      	ldr	r2, [pc, #204]	; (4010e8 <pmc_sleep+0x204>)
  40101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40101c:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40101e:	4b32      	ldr	r3, [pc, #200]	; (4010e8 <pmc_sleep+0x204>)
  401020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401022:	f003 0308 	and.w	r3, r3, #8
  401026:	2b00      	cmp	r3, #0
  401028:	d0f9      	beq.n	40101e <pmc_sleep+0x13a>
	pmc_disable_pllack();
  40102a:	4b32      	ldr	r3, [pc, #200]	; (4010f4 <pmc_sleep+0x210>)
  40102c:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40102e:	4b2e      	ldr	r3, [pc, #184]	; (4010e8 <pmc_sleep+0x204>)
  401030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401036:	2b00      	cmp	r3, #0
  401038:	d0f9      	beq.n	40102e <pmc_sleep+0x14a>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40103a:	492b      	ldr	r1, [pc, #172]	; (4010e8 <pmc_sleep+0x204>)
  40103c:	4b2a      	ldr	r3, [pc, #168]	; (4010e8 <pmc_sleep+0x204>)
  40103e:	6a1a      	ldr	r2, [r3, #32]
  401040:	4b2d      	ldr	r3, [pc, #180]	; (4010f8 <pmc_sleep+0x214>)
  401042:	4013      	ands	r3, r2
  401044:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401048:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40104a:	4b27      	ldr	r3, [pc, #156]	; (4010e8 <pmc_sleep+0x204>)
  40104c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401052:	2b00      	cmp	r3, #0
  401054:	d0f9      	beq.n	40104a <pmc_sleep+0x166>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  401056:	4a25      	ldr	r2, [pc, #148]	; (4010ec <pmc_sleep+0x208>)
  401058:	6a3b      	ldr	r3, [r7, #32]
  40105a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  40105e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  401064:	2b00      	cmp	r3, #0
  401066:	d007      	beq.n	401078 <pmc_sleep+0x194>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401068:	491f      	ldr	r1, [pc, #124]	; (4010e8 <pmc_sleep+0x204>)
  40106a:	4b1f      	ldr	r3, [pc, #124]	; (4010e8 <pmc_sleep+0x204>)
  40106c:	6a1a      	ldr	r2, [r3, #32]
  40106e:	4b23      	ldr	r3, [pc, #140]	; (4010fc <pmc_sleep+0x218>)
  401070:	4013      	ands	r3, r2
  401072:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401076:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401078:	4b18      	ldr	r3, [pc, #96]	; (4010dc <pmc_sleep+0x1f8>)
  40107a:	2201      	movs	r2, #1
  40107c:	701a      	strb	r2, [r3, #0]
  40107e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401082:	b662      	cpsie	i

		pmc_enable_waitmode();
  401084:	4b1e      	ldr	r3, [pc, #120]	; (401100 <pmc_sleep+0x21c>)
  401086:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401088:	b672      	cpsid	i
  40108a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40108e:	4b13      	ldr	r3, [pc, #76]	; (4010dc <pmc_sleep+0x1f8>)
  401090:	2200      	movs	r2, #0
  401092:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  401094:	69fc      	ldr	r4, [r7, #28]
  401096:	69b8      	ldr	r0, [r7, #24]
  401098:	6979      	ldr	r1, [r7, #20]
  40109a:	693a      	ldr	r2, [r7, #16]
  40109c:	68fb      	ldr	r3, [r7, #12]
  40109e:	65fc      	str	r4, [r7, #92]	; 0x5c
  4010a0:	65b8      	str	r0, [r7, #88]	; 0x58
  4010a2:	6579      	str	r1, [r7, #84]	; 0x54
  4010a4:	653a      	str	r2, [r7, #80]	; 0x50
  4010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  4010a8:	2300      	movs	r3, #0
  4010aa:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4010ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4010ae:	f003 0302 	and.w	r3, r3, #2
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d02c      	beq.n	401110 <pmc_sleep+0x22c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010b6:	490c      	ldr	r1, [pc, #48]	; (4010e8 <pmc_sleep+0x204>)
  4010b8:	4b0b      	ldr	r3, [pc, #44]	; (4010e8 <pmc_sleep+0x204>)
  4010ba:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4010bc:	4a11      	ldr	r2, [pc, #68]	; (401104 <pmc_sleep+0x220>)
  4010be:	401a      	ands	r2, r3
  4010c0:	4b11      	ldr	r3, [pc, #68]	; (401108 <pmc_sleep+0x224>)
  4010c2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4010c4:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010c6:	4908      	ldr	r1, [pc, #32]	; (4010e8 <pmc_sleep+0x204>)
  4010c8:	4b07      	ldr	r3, [pc, #28]	; (4010e8 <pmc_sleep+0x204>)
  4010ca:	6a1a      	ldr	r2, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  4010cc:	4b0f      	ldr	r3, [pc, #60]	; (40110c <pmc_sleep+0x228>)
  4010ce:	4013      	ands	r3, r2
  4010d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010d4:	620b      	str	r3, [r1, #32]
  4010d6:	e04e      	b.n	401176 <pmc_sleep+0x292>
  4010d8:	e000ed00 	.word	0xe000ed00
  4010dc:	2040000a 	.word	0x2040000a
  4010e0:	00400e35 	.word	0x00400e35
  4010e4:	204004d4 	.word	0x204004d4
  4010e8:	400e0600 	.word	0x400e0600
  4010ec:	400e0c00 	.word	0x400e0c00
  4010f0:	00370008 	.word	0x00370008
  4010f4:	00400d5d 	.word	0x00400d5d
  4010f8:	fec8ffff 	.word	0xfec8ffff
  4010fc:	ffc8fffe 	.word	0xffc8fffe
  401100:	00400e55 	.word	0x00400e55
  401104:	fec8fffc 	.word	0xfec8fffc
  401108:	01370002 	.word	0x01370002
  40110c:	ffc8ff87 	.word	0xffc8ff87
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  401112:	f003 0301 	and.w	r3, r3, #1
  401116:	2b00      	cmp	r3, #0
  401118:	d02d      	beq.n	401176 <pmc_sleep+0x292>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40111a:	4b4a      	ldr	r3, [pc, #296]	; (401244 <pmc_sleep+0x360>)
  40111c:	6a1b      	ldr	r3, [r3, #32]
  40111e:	f003 0301 	and.w	r3, r3, #1
  401122:	2b00      	cmp	r3, #0
  401124:	d10d      	bne.n	401142 <pmc_sleep+0x25e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401126:	4947      	ldr	r1, [pc, #284]	; (401244 <pmc_sleep+0x360>)
  401128:	4b46      	ldr	r3, [pc, #280]	; (401244 <pmc_sleep+0x360>)
  40112a:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  40112c:	4a46      	ldr	r2, [pc, #280]	; (401248 <pmc_sleep+0x364>)
  40112e:	401a      	ands	r2, r3
  401130:	4b46      	ldr	r3, [pc, #280]	; (40124c <pmc_sleep+0x368>)
  401132:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401134:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401136:	4b43      	ldr	r3, [pc, #268]	; (401244 <pmc_sleep+0x360>)
  401138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40113a:	f003 0301 	and.w	r3, r3, #1
  40113e:	2b00      	cmp	r3, #0
  401140:	d0f9      	beq.n	401136 <pmc_sleep+0x252>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401142:	4b40      	ldr	r3, [pc, #256]	; (401244 <pmc_sleep+0x360>)
  401144:	6a1b      	ldr	r3, [r3, #32]
  401146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40114a:	2b00      	cmp	r3, #0
  40114c:	d10b      	bne.n	401166 <pmc_sleep+0x282>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40114e:	493d      	ldr	r1, [pc, #244]	; (401244 <pmc_sleep+0x360>)
  401150:	4b3c      	ldr	r3, [pc, #240]	; (401244 <pmc_sleep+0x360>)
  401152:	6a1a      	ldr	r2, [r3, #32]
  401154:	4b3e      	ldr	r3, [pc, #248]	; (401250 <pmc_sleep+0x36c>)
  401156:	4313      	orrs	r3, r2
  401158:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40115a:	4b3a      	ldr	r3, [pc, #232]	; (401244 <pmc_sleep+0x360>)
  40115c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401162:	2b00      	cmp	r3, #0
  401164:	d0f9      	beq.n	40115a <pmc_sleep+0x276>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401166:	4937      	ldr	r1, [pc, #220]	; (401244 <pmc_sleep+0x360>)
  401168:	4b36      	ldr	r3, [pc, #216]	; (401244 <pmc_sleep+0x360>)
  40116a:	6a1a      	ldr	r2, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  40116c:	4b39      	ldr	r3, [pc, #228]	; (401254 <pmc_sleep+0x370>)
  40116e:	4013      	ands	r3, r2
  401170:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401174:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401176:	6dba      	ldr	r2, [r7, #88]	; 0x58
  401178:	4b37      	ldr	r3, [pc, #220]	; (401258 <pmc_sleep+0x374>)
  40117a:	4013      	ands	r3, r2
  40117c:	2b00      	cmp	r3, #0
  40117e:	d008      	beq.n	401192 <pmc_sleep+0x2ae>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401180:	4a30      	ldr	r2, [pc, #192]	; (401244 <pmc_sleep+0x360>)
  401182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  401184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401188:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40118a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40118c:	f043 0302 	orr.w	r3, r3, #2
  401190:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  401194:	f003 0303 	and.w	r3, r3, #3
  401198:	2b02      	cmp	r3, #2
  40119a:	d105      	bne.n	4011a8 <pmc_sleep+0x2c4>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40119c:	4b29      	ldr	r3, [pc, #164]	; (401244 <pmc_sleep+0x360>)
  40119e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011a0:	f003 0302 	and.w	r3, r3, #2
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d0f9      	beq.n	40119c <pmc_sleep+0x2b8>
	mckr = PMC->PMC_MCKR;
  4011a8:	4b26      	ldr	r3, [pc, #152]	; (401244 <pmc_sleep+0x360>)
  4011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011ac:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4011ae:	4925      	ldr	r1, [pc, #148]	; (401244 <pmc_sleep+0x360>)
  4011b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4011b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4011b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4011b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011bc:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4011be:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011c0:	4b20      	ldr	r3, [pc, #128]	; (401244 <pmc_sleep+0x360>)
  4011c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011c4:	f003 0308 	and.w	r3, r3, #8
  4011c8:	2b00      	cmp	r3, #0
  4011ca:	d0f9      	beq.n	4011c0 <pmc_sleep+0x2dc>
	EFC0->EEFC_FMR = fmr_setting;
  4011cc:	4a23      	ldr	r2, [pc, #140]	; (40125c <pmc_sleep+0x378>)
  4011ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4011d0:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  4011d2:	4a1c      	ldr	r2, [pc, #112]	; (401244 <pmc_sleep+0x360>)
  4011d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4011d6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011d8:	4b1a      	ldr	r3, [pc, #104]	; (401244 <pmc_sleep+0x360>)
  4011da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011dc:	f003 0308 	and.w	r3, r3, #8
  4011e0:	2b00      	cmp	r3, #0
  4011e2:	d0f9      	beq.n	4011d8 <pmc_sleep+0x2f4>
	while (!(PMC->PMC_SR & pll_sr));
  4011e4:	4b17      	ldr	r3, [pc, #92]	; (401244 <pmc_sleep+0x360>)
  4011e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4011e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4011ea:	4013      	ands	r3, r2
  4011ec:	2b00      	cmp	r3, #0
  4011ee:	d0f9      	beq.n	4011e4 <pmc_sleep+0x300>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4011f0:	4b1b      	ldr	r3, [pc, #108]	; (401260 <pmc_sleep+0x37c>)
  4011f2:	2200      	movs	r2, #0
  4011f4:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4011f6:	4b1b      	ldr	r3, [pc, #108]	; (401264 <pmc_sleep+0x380>)
  4011f8:	681b      	ldr	r3, [r3, #0]
  4011fa:	2b00      	cmp	r3, #0
  4011fc:	d005      	beq.n	40120a <pmc_sleep+0x326>
			callback_clocks_restored();
  4011fe:	4b19      	ldr	r3, [pc, #100]	; (401264 <pmc_sleep+0x380>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401204:	4b17      	ldr	r3, [pc, #92]	; (401264 <pmc_sleep+0x380>)
  401206:	2200      	movs	r2, #0
  401208:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40120a:	4b17      	ldr	r3, [pc, #92]	; (401268 <pmc_sleep+0x384>)
  40120c:	2201      	movs	r2, #1
  40120e:	701a      	strb	r2, [r3, #0]
  401210:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401214:	b662      	cpsie	i

		break;
  401216:	bf00      	nop
  401218:	e010      	b.n	40123c <pmc_sleep+0x358>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40121a:	4a14      	ldr	r2, [pc, #80]	; (40126c <pmc_sleep+0x388>)
  40121c:	4b13      	ldr	r3, [pc, #76]	; (40126c <pmc_sleep+0x388>)
  40121e:	691b      	ldr	r3, [r3, #16]
  401220:	f043 0304 	orr.w	r3, r3, #4
  401224:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401226:	4b12      	ldr	r3, [pc, #72]	; (401270 <pmc_sleep+0x38c>)
  401228:	4a12      	ldr	r2, [pc, #72]	; (401274 <pmc_sleep+0x390>)
  40122a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40122c:	4b0e      	ldr	r3, [pc, #56]	; (401268 <pmc_sleep+0x384>)
  40122e:	2201      	movs	r2, #1
  401230:	701a      	strb	r2, [r3, #0]
  401232:	f3bf 8f5f 	dmb	sy
  401236:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401238:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  40123a:	bf00      	nop
#endif
	}
}
  40123c:	bf00      	nop
  40123e:	3764      	adds	r7, #100	; 0x64
  401240:	46bd      	mov	sp, r7
  401242:	bd90      	pop	{r4, r7, pc}
  401244:	400e0600 	.word	0x400e0600
  401248:	ffc8fffc 	.word	0xffc8fffc
  40124c:	00370001 	.word	0x00370001
  401250:	01370000 	.word	0x01370000
  401254:	ffc8ff87 	.word	0xffc8ff87
  401258:	07ff0000 	.word	0x07ff0000
  40125c:	400e0c00 	.word	0x400e0c00
  401260:	204004d4 	.word	0x204004d4
  401264:	204004d8 	.word	0x204004d8
  401268:	2040000a 	.word	0x2040000a
  40126c:	e000ed00 	.word	0xe000ed00
  401270:	400e1810 	.word	0x400e1810
  401274:	a5000004 	.word	0xa5000004

00401278 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401278:	b480      	push	{r7}
  40127a:	b083      	sub	sp, #12
  40127c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40127e:	f3ef 8310 	mrs	r3, PRIMASK
  401282:	607b      	str	r3, [r7, #4]
  return(result);
  401284:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401286:	2b00      	cmp	r3, #0
  401288:	bf0c      	ite	eq
  40128a:	2301      	moveq	r3, #1
  40128c:	2300      	movne	r3, #0
  40128e:	b2db      	uxtb	r3, r3
  401290:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401292:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401294:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401298:	4b04      	ldr	r3, [pc, #16]	; (4012ac <cpu_irq_save+0x34>)
  40129a:	2200      	movs	r2, #0
  40129c:	701a      	strb	r2, [r3, #0]
	return flags;
  40129e:	683b      	ldr	r3, [r7, #0]
}
  4012a0:	4618      	mov	r0, r3
  4012a2:	370c      	adds	r7, #12
  4012a4:	46bd      	mov	sp, r7
  4012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012aa:	4770      	bx	lr
  4012ac:	2040000a 	.word	0x2040000a

004012b0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4012b0:	b480      	push	{r7}
  4012b2:	b083      	sub	sp, #12
  4012b4:	af00      	add	r7, sp, #0
  4012b6:	6078      	str	r0, [r7, #4]
	return (flags);
  4012b8:	687b      	ldr	r3, [r7, #4]
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	bf14      	ite	ne
  4012be:	2301      	movne	r3, #1
  4012c0:	2300      	moveq	r3, #0
  4012c2:	b2db      	uxtb	r3, r3
}
  4012c4:	4618      	mov	r0, r3
  4012c6:	370c      	adds	r7, #12
  4012c8:	46bd      	mov	sp, r7
  4012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ce:	4770      	bx	lr

004012d0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4012d0:	b580      	push	{r7, lr}
  4012d2:	b082      	sub	sp, #8
  4012d4:	af00      	add	r7, sp, #0
  4012d6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4012d8:	6878      	ldr	r0, [r7, #4]
  4012da:	4b07      	ldr	r3, [pc, #28]	; (4012f8 <cpu_irq_restore+0x28>)
  4012dc:	4798      	blx	r3
  4012de:	4603      	mov	r3, r0
  4012e0:	2b00      	cmp	r3, #0
  4012e2:	d005      	beq.n	4012f0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4012e4:	4b05      	ldr	r3, [pc, #20]	; (4012fc <cpu_irq_restore+0x2c>)
  4012e6:	2201      	movs	r2, #1
  4012e8:	701a      	strb	r2, [r3, #0]
  4012ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012ee:	b662      	cpsie	i
}
  4012f0:	bf00      	nop
  4012f2:	3708      	adds	r7, #8
  4012f4:	46bd      	mov	sp, r7
  4012f6:	bd80      	pop	{r7, pc}
  4012f8:	004012b1 	.word	0x004012b1
  4012fc:	2040000a 	.word	0x2040000a

00401300 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401300:	b580      	push	{r7, lr}
  401302:	b084      	sub	sp, #16
  401304:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401306:	4b1e      	ldr	r3, [pc, #120]	; (401380 <Reset_Handler+0x80>)
  401308:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40130a:	4b1e      	ldr	r3, [pc, #120]	; (401384 <Reset_Handler+0x84>)
  40130c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  40130e:	68fa      	ldr	r2, [r7, #12]
  401310:	68bb      	ldr	r3, [r7, #8]
  401312:	429a      	cmp	r2, r3
  401314:	d00c      	beq.n	401330 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401316:	e007      	b.n	401328 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401318:	68bb      	ldr	r3, [r7, #8]
  40131a:	1d1a      	adds	r2, r3, #4
  40131c:	60ba      	str	r2, [r7, #8]
  40131e:	68fa      	ldr	r2, [r7, #12]
  401320:	1d11      	adds	r1, r2, #4
  401322:	60f9      	str	r1, [r7, #12]
  401324:	6812      	ldr	r2, [r2, #0]
  401326:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401328:	68bb      	ldr	r3, [r7, #8]
  40132a:	4a17      	ldr	r2, [pc, #92]	; (401388 <Reset_Handler+0x88>)
  40132c:	4293      	cmp	r3, r2
  40132e:	d3f3      	bcc.n	401318 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401330:	4b16      	ldr	r3, [pc, #88]	; (40138c <Reset_Handler+0x8c>)
  401332:	60bb      	str	r3, [r7, #8]
  401334:	e004      	b.n	401340 <Reset_Handler+0x40>
                *pDest++ = 0;
  401336:	68bb      	ldr	r3, [r7, #8]
  401338:	1d1a      	adds	r2, r3, #4
  40133a:	60ba      	str	r2, [r7, #8]
  40133c:	2200      	movs	r2, #0
  40133e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401340:	68bb      	ldr	r3, [r7, #8]
  401342:	4a13      	ldr	r2, [pc, #76]	; (401390 <Reset_Handler+0x90>)
  401344:	4293      	cmp	r3, r2
  401346:	d3f6      	bcc.n	401336 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401348:	4b12      	ldr	r3, [pc, #72]	; (401394 <Reset_Handler+0x94>)
  40134a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40134c:	4a12      	ldr	r2, [pc, #72]	; (401398 <Reset_Handler+0x98>)
  40134e:	68fb      	ldr	r3, [r7, #12]
  401350:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401354:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401356:	4b11      	ldr	r3, [pc, #68]	; (40139c <Reset_Handler+0x9c>)
  401358:	4798      	blx	r3
  40135a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  40135c:	4a10      	ldr	r2, [pc, #64]	; (4013a0 <Reset_Handler+0xa0>)
  40135e:	4b10      	ldr	r3, [pc, #64]	; (4013a0 <Reset_Handler+0xa0>)
  401360:	681b      	ldr	r3, [r3, #0]
  401362:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401366:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40136c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401370:	6878      	ldr	r0, [r7, #4]
  401372:	4b0c      	ldr	r3, [pc, #48]	; (4013a4 <Reset_Handler+0xa4>)
  401374:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401376:	4b0c      	ldr	r3, [pc, #48]	; (4013a8 <Reset_Handler+0xa8>)
  401378:	4798      	blx	r3

        /* Branch to main function */
        main();
  40137a:	4b0c      	ldr	r3, [pc, #48]	; (4013ac <Reset_Handler+0xac>)
  40137c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40137e:	e7fe      	b.n	40137e <Reset_Handler+0x7e>
  401380:	00402dd4 	.word	0x00402dd4
  401384:	20400000 	.word	0x20400000
  401388:	20400444 	.word	0x20400444
  40138c:	20400444 	.word	0x20400444
  401390:	20400504 	.word	0x20400504
  401394:	00400000 	.word	0x00400000
  401398:	e000ed00 	.word	0xe000ed00
  40139c:	00401279 	.word	0x00401279
  4013a0:	e000ed88 	.word	0xe000ed88
  4013a4:	004012d1 	.word	0x004012d1
  4013a8:	00402755 	.word	0x00402755
  4013ac:	00401b15 	.word	0x00401b15

004013b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4013b0:	b480      	push	{r7}
  4013b2:	af00      	add	r7, sp, #0
        while (1) {
  4013b4:	e7fe      	b.n	4013b4 <Dummy_Handler+0x4>
	...

004013b8 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4013b8:	b480      	push	{r7}
  4013ba:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4013bc:	4b52      	ldr	r3, [pc, #328]	; (401508 <SystemCoreClockUpdate+0x150>)
  4013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013c0:	f003 0303 	and.w	r3, r3, #3
  4013c4:	2b01      	cmp	r3, #1
  4013c6:	d014      	beq.n	4013f2 <SystemCoreClockUpdate+0x3a>
  4013c8:	2b01      	cmp	r3, #1
  4013ca:	d302      	bcc.n	4013d2 <SystemCoreClockUpdate+0x1a>
  4013cc:	2b02      	cmp	r3, #2
  4013ce:	d038      	beq.n	401442 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4013d0:	e07a      	b.n	4014c8 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4013d2:	4b4e      	ldr	r3, [pc, #312]	; (40150c <SystemCoreClockUpdate+0x154>)
  4013d4:	695b      	ldr	r3, [r3, #20]
  4013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4013da:	2b00      	cmp	r3, #0
  4013dc:	d004      	beq.n	4013e8 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4013de:	4b4c      	ldr	r3, [pc, #304]	; (401510 <SystemCoreClockUpdate+0x158>)
  4013e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4013e4:	601a      	str	r2, [r3, #0]
    break;
  4013e6:	e06f      	b.n	4014c8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4013e8:	4b49      	ldr	r3, [pc, #292]	; (401510 <SystemCoreClockUpdate+0x158>)
  4013ea:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4013ee:	601a      	str	r2, [r3, #0]
    break;
  4013f0:	e06a      	b.n	4014c8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013f2:	4b45      	ldr	r3, [pc, #276]	; (401508 <SystemCoreClockUpdate+0x150>)
  4013f4:	6a1b      	ldr	r3, [r3, #32]
  4013f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d003      	beq.n	401406 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4013fe:	4b44      	ldr	r3, [pc, #272]	; (401510 <SystemCoreClockUpdate+0x158>)
  401400:	4a44      	ldr	r2, [pc, #272]	; (401514 <SystemCoreClockUpdate+0x15c>)
  401402:	601a      	str	r2, [r3, #0]
    break;
  401404:	e060      	b.n	4014c8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401406:	4b42      	ldr	r3, [pc, #264]	; (401510 <SystemCoreClockUpdate+0x158>)
  401408:	4a43      	ldr	r2, [pc, #268]	; (401518 <SystemCoreClockUpdate+0x160>)
  40140a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40140c:	4b3e      	ldr	r3, [pc, #248]	; (401508 <SystemCoreClockUpdate+0x150>)
  40140e:	6a1b      	ldr	r3, [r3, #32]
  401410:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401414:	2b10      	cmp	r3, #16
  401416:	d004      	beq.n	401422 <SystemCoreClockUpdate+0x6a>
  401418:	2b20      	cmp	r3, #32
  40141a:	d008      	beq.n	40142e <SystemCoreClockUpdate+0x76>
  40141c:	2b00      	cmp	r3, #0
  40141e:	d00e      	beq.n	40143e <SystemCoreClockUpdate+0x86>
          break;
  401420:	e00e      	b.n	401440 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401422:	4b3b      	ldr	r3, [pc, #236]	; (401510 <SystemCoreClockUpdate+0x158>)
  401424:	681b      	ldr	r3, [r3, #0]
  401426:	005b      	lsls	r3, r3, #1
  401428:	4a39      	ldr	r2, [pc, #228]	; (401510 <SystemCoreClockUpdate+0x158>)
  40142a:	6013      	str	r3, [r2, #0]
          break;
  40142c:	e008      	b.n	401440 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  40142e:	4b38      	ldr	r3, [pc, #224]	; (401510 <SystemCoreClockUpdate+0x158>)
  401430:	681a      	ldr	r2, [r3, #0]
  401432:	4613      	mov	r3, r2
  401434:	005b      	lsls	r3, r3, #1
  401436:	4413      	add	r3, r2
  401438:	4a35      	ldr	r2, [pc, #212]	; (401510 <SystemCoreClockUpdate+0x158>)
  40143a:	6013      	str	r3, [r2, #0]
          break;
  40143c:	e000      	b.n	401440 <SystemCoreClockUpdate+0x88>
          break;
  40143e:	bf00      	nop
    break;
  401440:	e042      	b.n	4014c8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401442:	4b31      	ldr	r3, [pc, #196]	; (401508 <SystemCoreClockUpdate+0x150>)
  401444:	6a1b      	ldr	r3, [r3, #32]
  401446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40144a:	2b00      	cmp	r3, #0
  40144c:	d003      	beq.n	401456 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40144e:	4b30      	ldr	r3, [pc, #192]	; (401510 <SystemCoreClockUpdate+0x158>)
  401450:	4a30      	ldr	r2, [pc, #192]	; (401514 <SystemCoreClockUpdate+0x15c>)
  401452:	601a      	str	r2, [r3, #0]
  401454:	e01c      	b.n	401490 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401456:	4b2e      	ldr	r3, [pc, #184]	; (401510 <SystemCoreClockUpdate+0x158>)
  401458:	4a2f      	ldr	r2, [pc, #188]	; (401518 <SystemCoreClockUpdate+0x160>)
  40145a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40145c:	4b2a      	ldr	r3, [pc, #168]	; (401508 <SystemCoreClockUpdate+0x150>)
  40145e:	6a1b      	ldr	r3, [r3, #32]
  401460:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401464:	2b10      	cmp	r3, #16
  401466:	d004      	beq.n	401472 <SystemCoreClockUpdate+0xba>
  401468:	2b20      	cmp	r3, #32
  40146a:	d008      	beq.n	40147e <SystemCoreClockUpdate+0xc6>
  40146c:	2b00      	cmp	r3, #0
  40146e:	d00e      	beq.n	40148e <SystemCoreClockUpdate+0xd6>
          break;
  401470:	e00e      	b.n	401490 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401472:	4b27      	ldr	r3, [pc, #156]	; (401510 <SystemCoreClockUpdate+0x158>)
  401474:	681b      	ldr	r3, [r3, #0]
  401476:	005b      	lsls	r3, r3, #1
  401478:	4a25      	ldr	r2, [pc, #148]	; (401510 <SystemCoreClockUpdate+0x158>)
  40147a:	6013      	str	r3, [r2, #0]
          break;
  40147c:	e008      	b.n	401490 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  40147e:	4b24      	ldr	r3, [pc, #144]	; (401510 <SystemCoreClockUpdate+0x158>)
  401480:	681a      	ldr	r2, [r3, #0]
  401482:	4613      	mov	r3, r2
  401484:	005b      	lsls	r3, r3, #1
  401486:	4413      	add	r3, r2
  401488:	4a21      	ldr	r2, [pc, #132]	; (401510 <SystemCoreClockUpdate+0x158>)
  40148a:	6013      	str	r3, [r2, #0]
          break;
  40148c:	e000      	b.n	401490 <SystemCoreClockUpdate+0xd8>
          break;
  40148e:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401490:	4b1d      	ldr	r3, [pc, #116]	; (401508 <SystemCoreClockUpdate+0x150>)
  401492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401494:	f003 0303 	and.w	r3, r3, #3
  401498:	2b02      	cmp	r3, #2
  40149a:	d114      	bne.n	4014c6 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40149c:	4b1a      	ldr	r3, [pc, #104]	; (401508 <SystemCoreClockUpdate+0x150>)
  40149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4014a0:	0c1b      	lsrs	r3, r3, #16
  4014a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4014a6:	3301      	adds	r3, #1
  4014a8:	4a19      	ldr	r2, [pc, #100]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014aa:	6812      	ldr	r2, [r2, #0]
  4014ac:	fb02 f303 	mul.w	r3, r2, r3
  4014b0:	4a17      	ldr	r2, [pc, #92]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014b2:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4014b4:	4b14      	ldr	r3, [pc, #80]	; (401508 <SystemCoreClockUpdate+0x150>)
  4014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4014b8:	b2db      	uxtb	r3, r3
  4014ba:	4a15      	ldr	r2, [pc, #84]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014bc:	6812      	ldr	r2, [r2, #0]
  4014be:	fbb2 f3f3 	udiv	r3, r2, r3
  4014c2:	4a13      	ldr	r2, [pc, #76]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014c4:	6013      	str	r3, [r2, #0]
    break;
  4014c6:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4014c8:	4b0f      	ldr	r3, [pc, #60]	; (401508 <SystemCoreClockUpdate+0x150>)
  4014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014d0:	2b70      	cmp	r3, #112	; 0x70
  4014d2:	d108      	bne.n	4014e6 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  4014d4:	4b0e      	ldr	r3, [pc, #56]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014d6:	681b      	ldr	r3, [r3, #0]
  4014d8:	4a10      	ldr	r2, [pc, #64]	; (40151c <SystemCoreClockUpdate+0x164>)
  4014da:	fba2 2303 	umull	r2, r3, r2, r3
  4014de:	085b      	lsrs	r3, r3, #1
  4014e0:	4a0b      	ldr	r2, [pc, #44]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014e2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4014e4:	e00a      	b.n	4014fc <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4014e6:	4b08      	ldr	r3, [pc, #32]	; (401508 <SystemCoreClockUpdate+0x150>)
  4014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ea:	091b      	lsrs	r3, r3, #4
  4014ec:	f003 0307 	and.w	r3, r3, #7
  4014f0:	4a07      	ldr	r2, [pc, #28]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014f2:	6812      	ldr	r2, [r2, #0]
  4014f4:	fa22 f303 	lsr.w	r3, r2, r3
  4014f8:	4a05      	ldr	r2, [pc, #20]	; (401510 <SystemCoreClockUpdate+0x158>)
  4014fa:	6013      	str	r3, [r2, #0]
}
  4014fc:	bf00      	nop
  4014fe:	46bd      	mov	sp, r7
  401500:	f85d 7b04 	ldr.w	r7, [sp], #4
  401504:	4770      	bx	lr
  401506:	bf00      	nop
  401508:	400e0600 	.word	0x400e0600
  40150c:	400e1810 	.word	0x400e1810
  401510:	20400010 	.word	0x20400010
  401514:	00b71b00 	.word	0x00b71b00
  401518:	003d0900 	.word	0x003d0900
  40151c:	aaaaaaab 	.word	0xaaaaaaab

00401520 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401520:	b480      	push	{r7}
  401522:	b083      	sub	sp, #12
  401524:	af00      	add	r7, sp, #0
  401526:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401528:	687b      	ldr	r3, [r7, #4]
  40152a:	4a19      	ldr	r2, [pc, #100]	; (401590 <system_init_flash+0x70>)
  40152c:	4293      	cmp	r3, r2
  40152e:	d804      	bhi.n	40153a <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401530:	4b18      	ldr	r3, [pc, #96]	; (401594 <system_init_flash+0x74>)
  401532:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401536:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401538:	e023      	b.n	401582 <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  40153a:	687b      	ldr	r3, [r7, #4]
  40153c:	4a16      	ldr	r2, [pc, #88]	; (401598 <system_init_flash+0x78>)
  40153e:	4293      	cmp	r3, r2
  401540:	d803      	bhi.n	40154a <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401542:	4b14      	ldr	r3, [pc, #80]	; (401594 <system_init_flash+0x74>)
  401544:	4a15      	ldr	r2, [pc, #84]	; (40159c <system_init_flash+0x7c>)
  401546:	601a      	str	r2, [r3, #0]
}
  401548:	e01b      	b.n	401582 <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  40154a:	687b      	ldr	r3, [r7, #4]
  40154c:	4a14      	ldr	r2, [pc, #80]	; (4015a0 <system_init_flash+0x80>)
  40154e:	4293      	cmp	r3, r2
  401550:	d803      	bhi.n	40155a <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401552:	4b10      	ldr	r3, [pc, #64]	; (401594 <system_init_flash+0x74>)
  401554:	4a13      	ldr	r2, [pc, #76]	; (4015a4 <system_init_flash+0x84>)
  401556:	601a      	str	r2, [r3, #0]
}
  401558:	e013      	b.n	401582 <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40155a:	687b      	ldr	r3, [r7, #4]
  40155c:	4a12      	ldr	r2, [pc, #72]	; (4015a8 <system_init_flash+0x88>)
  40155e:	4293      	cmp	r3, r2
  401560:	d803      	bhi.n	40156a <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401562:	4b0c      	ldr	r3, [pc, #48]	; (401594 <system_init_flash+0x74>)
  401564:	4a11      	ldr	r2, [pc, #68]	; (4015ac <system_init_flash+0x8c>)
  401566:	601a      	str	r2, [r3, #0]
}
  401568:	e00b      	b.n	401582 <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40156a:	687b      	ldr	r3, [r7, #4]
  40156c:	4a10      	ldr	r2, [pc, #64]	; (4015b0 <system_init_flash+0x90>)
  40156e:	4293      	cmp	r3, r2
  401570:	d804      	bhi.n	40157c <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401572:	4b08      	ldr	r3, [pc, #32]	; (401594 <system_init_flash+0x74>)
  401574:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401578:	601a      	str	r2, [r3, #0]
}
  40157a:	e002      	b.n	401582 <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40157c:	4b05      	ldr	r3, [pc, #20]	; (401594 <system_init_flash+0x74>)
  40157e:	4a0d      	ldr	r2, [pc, #52]	; (4015b4 <system_init_flash+0x94>)
  401580:	601a      	str	r2, [r3, #0]
}
  401582:	bf00      	nop
  401584:	370c      	adds	r7, #12
  401586:	46bd      	mov	sp, r7
  401588:	f85d 7b04 	ldr.w	r7, [sp], #4
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop
  401590:	01312cff 	.word	0x01312cff
  401594:	400e0c00 	.word	0x400e0c00
  401598:	026259ff 	.word	0x026259ff
  40159c:	04000100 	.word	0x04000100
  4015a0:	039386ff 	.word	0x039386ff
  4015a4:	04000200 	.word	0x04000200
  4015a8:	04c4b3ff 	.word	0x04c4b3ff
  4015ac:	04000300 	.word	0x04000300
  4015b0:	05f5e0ff 	.word	0x05f5e0ff
  4015b4:	04000500 	.word	0x04000500

004015b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4015b8:	b480      	push	{r7}
  4015ba:	b083      	sub	sp, #12
  4015bc:	af00      	add	r7, sp, #0
  4015be:	4603      	mov	r3, r0
  4015c0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015c2:	4909      	ldr	r1, [pc, #36]	; (4015e8 <NVIC_EnableIRQ+0x30>)
  4015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015c8:	095b      	lsrs	r3, r3, #5
  4015ca:	79fa      	ldrb	r2, [r7, #7]
  4015cc:	f002 021f 	and.w	r2, r2, #31
  4015d0:	2001      	movs	r0, #1
  4015d2:	fa00 f202 	lsl.w	r2, r0, r2
  4015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4015da:	bf00      	nop
  4015dc:	370c      	adds	r7, #12
  4015de:	46bd      	mov	sp, r7
  4015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e4:	4770      	bx	lr
  4015e6:	bf00      	nop
  4015e8:	e000e100 	.word	0xe000e100

004015ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	4603      	mov	r3, r0
  4015f4:	6039      	str	r1, [r7, #0]
  4015f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015fc:	2b00      	cmp	r3, #0
  4015fe:	da0b      	bge.n	401618 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401600:	490d      	ldr	r1, [pc, #52]	; (401638 <NVIC_SetPriority+0x4c>)
  401602:	79fb      	ldrb	r3, [r7, #7]
  401604:	f003 030f 	and.w	r3, r3, #15
  401608:	3b04      	subs	r3, #4
  40160a:	683a      	ldr	r2, [r7, #0]
  40160c:	b2d2      	uxtb	r2, r2
  40160e:	0152      	lsls	r2, r2, #5
  401610:	b2d2      	uxtb	r2, r2
  401612:	440b      	add	r3, r1
  401614:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401616:	e009      	b.n	40162c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401618:	4908      	ldr	r1, [pc, #32]	; (40163c <NVIC_SetPriority+0x50>)
  40161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40161e:	683a      	ldr	r2, [r7, #0]
  401620:	b2d2      	uxtb	r2, r2
  401622:	0152      	lsls	r2, r2, #5
  401624:	b2d2      	uxtb	r2, r2
  401626:	440b      	add	r3, r1
  401628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40162c:	bf00      	nop
  40162e:	370c      	adds	r7, #12
  401630:	46bd      	mov	sp, r7
  401632:	f85d 7b04 	ldr.w	r7, [sp], #4
  401636:	4770      	bx	lr
  401638:	e000ed00 	.word	0xe000ed00
  40163c:	e000e100 	.word	0xe000e100

00401640 <osc_get_rate>:
{
  401640:	b480      	push	{r7}
  401642:	b083      	sub	sp, #12
  401644:	af00      	add	r7, sp, #0
  401646:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401648:	687b      	ldr	r3, [r7, #4]
  40164a:	2b07      	cmp	r3, #7
  40164c:	d825      	bhi.n	40169a <osc_get_rate+0x5a>
  40164e:	a201      	add	r2, pc, #4	; (adr r2, 401654 <osc_get_rate+0x14>)
  401650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401654:	00401675 	.word	0x00401675
  401658:	0040167b 	.word	0x0040167b
  40165c:	00401681 	.word	0x00401681
  401660:	00401687 	.word	0x00401687
  401664:	0040168b 	.word	0x0040168b
  401668:	0040168f 	.word	0x0040168f
  40166c:	00401693 	.word	0x00401693
  401670:	00401697 	.word	0x00401697
		return OSC_SLCK_32K_RC_HZ;
  401674:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401678:	e010      	b.n	40169c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40167a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40167e:	e00d      	b.n	40169c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401684:	e00a      	b.n	40169c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401686:	4b08      	ldr	r3, [pc, #32]	; (4016a8 <osc_get_rate+0x68>)
  401688:	e008      	b.n	40169c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40168a:	4b08      	ldr	r3, [pc, #32]	; (4016ac <osc_get_rate+0x6c>)
  40168c:	e006      	b.n	40169c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40168e:	4b08      	ldr	r3, [pc, #32]	; (4016b0 <osc_get_rate+0x70>)
  401690:	e004      	b.n	40169c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401692:	4b07      	ldr	r3, [pc, #28]	; (4016b0 <osc_get_rate+0x70>)
  401694:	e002      	b.n	40169c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401696:	4b06      	ldr	r3, [pc, #24]	; (4016b0 <osc_get_rate+0x70>)
  401698:	e000      	b.n	40169c <osc_get_rate+0x5c>
	return 0;
  40169a:	2300      	movs	r3, #0
}
  40169c:	4618      	mov	r0, r3
  40169e:	370c      	adds	r7, #12
  4016a0:	46bd      	mov	sp, r7
  4016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016a6:	4770      	bx	lr
  4016a8:	003d0900 	.word	0x003d0900
  4016ac:	007a1200 	.word	0x007a1200
  4016b0:	00b71b00 	.word	0x00b71b00

004016b4 <sysclk_get_main_hz>:
{
  4016b4:	b580      	push	{r7, lr}
  4016b6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4016b8:	2006      	movs	r0, #6
  4016ba:	4b05      	ldr	r3, [pc, #20]	; (4016d0 <sysclk_get_main_hz+0x1c>)
  4016bc:	4798      	blx	r3
  4016be:	4602      	mov	r2, r0
  4016c0:	4613      	mov	r3, r2
  4016c2:	009b      	lsls	r3, r3, #2
  4016c4:	4413      	add	r3, r2
  4016c6:	009a      	lsls	r2, r3, #2
  4016c8:	4413      	add	r3, r2
}
  4016ca:	4618      	mov	r0, r3
  4016cc:	bd80      	pop	{r7, pc}
  4016ce:	bf00      	nop
  4016d0:	00401641 	.word	0x00401641

004016d4 <sysclk_get_cpu_hz>:
{
  4016d4:	b580      	push	{r7, lr}
  4016d6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4016d8:	4b02      	ldr	r3, [pc, #8]	; (4016e4 <sysclk_get_cpu_hz+0x10>)
  4016da:	4798      	blx	r3
  4016dc:	4603      	mov	r3, r0
}
  4016de:	4618      	mov	r0, r3
  4016e0:	bd80      	pop	{r7, pc}
  4016e2:	bf00      	nop
  4016e4:	004016b5 	.word	0x004016b5

004016e8 <BUT1_callback>:
/************************************************************************/

volatile char BUT1_flag = 0;
volatile char BUT3_flag = 0;

void BUT1_callback(void) {
  4016e8:	b480      	push	{r7}
  4016ea:	af00      	add	r7, sp, #0
	BUT1_flag = 1;
  4016ec:	4b03      	ldr	r3, [pc, #12]	; (4016fc <BUT1_callback+0x14>)
  4016ee:	2201      	movs	r2, #1
  4016f0:	701a      	strb	r2, [r3, #0]
}
  4016f2:	bf00      	nop
  4016f4:	46bd      	mov	sp, r7
  4016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016fa:	4770      	bx	lr
  4016fc:	204004dc 	.word	0x204004dc

00401700 <BUT3_callback>:

void BUT3_callback(void) {
  401700:	b480      	push	{r7}
  401702:	af00      	add	r7, sp, #0
	BUT3_flag = 1;
  401704:	4b03      	ldr	r3, [pc, #12]	; (401714 <BUT3_callback+0x14>)
  401706:	2201      	movs	r2, #1
  401708:	701a      	strb	r2, [r3, #0]
}
  40170a:	bf00      	nop
  40170c:	46bd      	mov	sp, r7
  40170e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401712:	4770      	bx	lr
  401714:	204004dd 	.word	0x204004dd

00401718 <init>:
/* funcoes                                                              */
/************************************************************************/

// Função de inicialização do uC
void init(void)
{
  401718:	b590      	push	{r4, r7, lr}
  40171a:	b083      	sub	sp, #12
  40171c:	af02      	add	r7, sp, #8
	// Initialize the board clock
	sysclk_init();
  40171e:	4b36      	ldr	r3, [pc, #216]	; (4017f8 <init+0xe0>)
  401720:	4798      	blx	r3

	// Desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  401722:	4b36      	ldr	r3, [pc, #216]	; (4017fc <init+0xe4>)
  401724:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401728:	605a      	str	r2, [r3, #4]

	// Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED e os botões
	pmc_enable_periph_clk(LED_PIO_ID);
  40172a:	200c      	movs	r0, #12
  40172c:	4b34      	ldr	r3, [pc, #208]	; (401800 <init+0xe8>)
  40172e:	4798      	blx	r3

	//Inicializa LED como saida
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  401730:	2300      	movs	r3, #0
  401732:	9300      	str	r3, [sp, #0]
  401734:	2300      	movs	r3, #0
  401736:	2200      	movs	r2, #0
  401738:	f44f 7180 	mov.w	r1, #256	; 0x100
  40173c:	4831      	ldr	r0, [pc, #196]	; (401804 <init+0xec>)
  40173e:	4c32      	ldr	r4, [pc, #200]	; (401808 <init+0xf0>)
  401740:	47a0      	blx	r4
	
	// Inicializa PIO dos botoes
	pmc_enable_periph_clk(BUT1_PIO_ID);
  401742:	2010      	movs	r0, #16
  401744:	4b2e      	ldr	r3, [pc, #184]	; (401800 <init+0xe8>)
  401746:	4798      	blx	r3
	pmc_enable_periph_clk(BUT2_PIO_ID);
  401748:	200c      	movs	r0, #12
  40174a:	4b2d      	ldr	r3, [pc, #180]	; (401800 <init+0xe8>)
  40174c:	4798      	blx	r3
	pmc_enable_periph_clk(BUT3_PIO_ID);
  40174e:	200a      	movs	r0, #10
  401750:	4b2b      	ldr	r3, [pc, #172]	; (401800 <init+0xe8>)
  401752:	4798      	blx	r3

	// configura pinos ligado aos botoes como entrada com um pull-up.
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP);
  401754:	2301      	movs	r3, #1
  401756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40175a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40175e:	482b      	ldr	r0, [pc, #172]	; (40180c <init+0xf4>)
  401760:	4c2b      	ldr	r4, [pc, #172]	; (401810 <init+0xf8>)
  401762:	47a0      	blx	r4
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP);
  401764:	2301      	movs	r3, #1
  401766:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40176a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40176e:	4825      	ldr	r0, [pc, #148]	; (401804 <init+0xec>)
  401770:	4c27      	ldr	r4, [pc, #156]	; (401810 <init+0xf8>)
  401772:	47a0      	blx	r4
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP);
  401774:	2301      	movs	r3, #1
  401776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40177a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40177e:	4825      	ldr	r0, [pc, #148]	; (401814 <init+0xfc>)
  401780:	4c23      	ldr	r4, [pc, #140]	; (401810 <init+0xf8>)
  401782:	47a0      	blx	r4

	NVIC_EnableIRQ(BUT1_PIO_ID);
  401784:	2010      	movs	r0, #16
  401786:	4b24      	ldr	r3, [pc, #144]	; (401818 <init+0x100>)
  401788:	4798      	blx	r3
	NVIC_SetPriority(BUT1_PIO_ID, 6);  // Priority 1
  40178a:	2106      	movs	r1, #6
  40178c:	2010      	movs	r0, #16
  40178e:	4b23      	ldr	r3, [pc, #140]	; (40181c <init+0x104>)
  401790:	4798      	blx	r3

	NVIC_EnableIRQ(BUT3_PIO_ID);
  401792:	200a      	movs	r0, #10
  401794:	4b20      	ldr	r3, [pc, #128]	; (401818 <init+0x100>)
  401796:	4798      	blx	r3
	NVIC_SetPriority(BUT3_PIO_ID, 5);  // Priority 1
  401798:	2105      	movs	r1, #5
  40179a:	200a      	movs	r0, #10
  40179c:	4b1f      	ldr	r3, [pc, #124]	; (40181c <init+0x104>)
  40179e:	4798      	blx	r3

	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  4017a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4017a4:	4819      	ldr	r0, [pc, #100]	; (40180c <init+0xf4>)
  4017a6:	4b1e      	ldr	r3, [pc, #120]	; (401820 <init+0x108>)
  4017a8:	4798      	blx	r3
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  4017aa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4017ae:	4819      	ldr	r0, [pc, #100]	; (401814 <init+0xfc>)
  4017b0:	4b1b      	ldr	r3, [pc, #108]	; (401820 <init+0x108>)
  4017b2:	4798      	blx	r3
	
	// Incializacao do buzzer
	pmc_enable_periph_clk(BUZ_PIO_ID);
  4017b4:	200c      	movs	r0, #12
  4017b6:	4b12      	ldr	r3, [pc, #72]	; (401800 <init+0xe8>)
  4017b8:	4798      	blx	r3
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  4017ba:	2300      	movs	r3, #0
  4017bc:	9300      	str	r3, [sp, #0]
  4017be:	2300      	movs	r3, #0
  4017c0:	2200      	movs	r2, #0
  4017c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4017c6:	480f      	ldr	r0, [pc, #60]	; (401804 <init+0xec>)
  4017c8:	4c0f      	ldr	r4, [pc, #60]	; (401808 <init+0xf0>)
  4017ca:	47a0      	blx	r4

	// Interrupt
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, BUT1_callback);
  4017cc:	4b15      	ldr	r3, [pc, #84]	; (401824 <init+0x10c>)
  4017ce:	9300      	str	r3, [sp, #0]
  4017d0:	2350      	movs	r3, #80	; 0x50
  4017d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017d6:	2110      	movs	r1, #16
  4017d8:	480c      	ldr	r0, [pc, #48]	; (40180c <init+0xf4>)
  4017da:	4c13      	ldr	r4, [pc, #76]	; (401828 <init+0x110>)
  4017dc:	47a0      	blx	r4
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, BUT3_callback);
  4017de:	4b13      	ldr	r3, [pc, #76]	; (40182c <init+0x114>)
  4017e0:	9300      	str	r3, [sp, #0]
  4017e2:	2350      	movs	r3, #80	; 0x50
  4017e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4017e8:	210a      	movs	r1, #10
  4017ea:	480a      	ldr	r0, [pc, #40]	; (401814 <init+0xfc>)
  4017ec:	4c0e      	ldr	r4, [pc, #56]	; (401828 <init+0x110>)
  4017ee:	47a0      	blx	r4
}
  4017f0:	bf00      	nop
  4017f2:	3704      	adds	r7, #4
  4017f4:	46bd      	mov	sp, r7
  4017f6:	bd90      	pop	{r4, r7, pc}
  4017f8:	004004ad 	.word	0x004004ad
  4017fc:	400e1850 	.word	0x400e1850
  401800:	00400db1 	.word	0x00400db1
  401804:	400e1200 	.word	0x400e1200
  401808:	0040071d 	.word	0x0040071d
  40180c:	400e1400 	.word	0x400e1400
  401810:	00400781 	.word	0x00400781
  401814:	400e0e00 	.word	0x400e0e00
  401818:	004015b9 	.word	0x004015b9
  40181c:	004015ed 	.word	0x004015ed
  401820:	004008b9 	.word	0x004008b9
  401824:	004016e9 	.word	0x004016e9
  401828:	004009d5 	.word	0x004009d5
  40182c:	00401701 	.word	0x00401701

00401830 <tone>:

void tone(int freq, int dur)
{
  401830:	b5f0      	push	{r4, r5, r6, r7, lr}
  401832:	b087      	sub	sp, #28
  401834:	af00      	add	r7, sp, #0
  401836:	6078      	str	r0, [r7, #4]
  401838:	6039      	str	r1, [r7, #0]
	// recebe uma frequência em Hertz e uma duração em milisegundos
	int t = 500000 / freq;  // Tempo em us de pausa: 10e6/(2 * freq)
  40183a:	4a58      	ldr	r2, [pc, #352]	; (40199c <tone+0x16c>)
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	fb92 f3f3 	sdiv	r3, r2, r3
  401842:	613b      	str	r3, [r7, #16]
	// 1 loop - 10e6/freq us
	// x loops - 10e3 us
	// x = freq/1000
	int j = (dur * freq) / 1000;
  401844:	683b      	ldr	r3, [r7, #0]
  401846:	687a      	ldr	r2, [r7, #4]
  401848:	fb02 f303 	mul.w	r3, r2, r3
  40184c:	4a54      	ldr	r2, [pc, #336]	; (4019a0 <tone+0x170>)
  40184e:	fb82 1203 	smull	r1, r2, r2, r3
  401852:	1192      	asrs	r2, r2, #6
  401854:	17db      	asrs	r3, r3, #31
  401856:	1ad3      	subs	r3, r2, r3
  401858:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < j; i++)
  40185a:	2300      	movs	r3, #0
  40185c:	617b      	str	r3, [r7, #20]
  40185e:	e094      	b.n	40198a <tone+0x15a>
	{
		pio_set(PIOC, LED_PIO_IDX_MASK);   // Acende o LED
  401860:	f44f 7180 	mov.w	r1, #256	; 0x100
  401864:	484f      	ldr	r0, [pc, #316]	; (4019a4 <tone+0x174>)
  401866:	4b50      	ldr	r3, [pc, #320]	; (4019a8 <tone+0x178>)
  401868:	4798      	blx	r3
		pio_set(PIOC, BUZ_PIO_IDX_MASK);   // Coloca som no buzzer
  40186a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40186e:	484d      	ldr	r0, [pc, #308]	; (4019a4 <tone+0x174>)
  401870:	4b4d      	ldr	r3, [pc, #308]	; (4019a8 <tone+0x178>)
  401872:	4798      	blx	r3
		delay_us(t);                       // Delay por software de t us
  401874:	693b      	ldr	r3, [r7, #16]
  401876:	2b00      	cmp	r3, #0
  401878:	d024      	beq.n	4018c4 <tone+0x94>
  40187a:	693b      	ldr	r3, [r7, #16]
  40187c:	461d      	mov	r5, r3
  40187e:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401882:	4b4a      	ldr	r3, [pc, #296]	; (4019ac <tone+0x17c>)
  401884:	4798      	blx	r3
  401886:	4603      	mov	r3, r0
  401888:	f04f 0400 	mov.w	r4, #0
  40188c:	fb03 f106 	mul.w	r1, r3, r6
  401890:	fb05 f204 	mul.w	r2, r5, r4
  401894:	440a      	add	r2, r1
  401896:	fba5 3403 	umull	r3, r4, r5, r3
  40189a:	4422      	add	r2, r4
  40189c:	4614      	mov	r4, r2
  40189e:	4944      	ldr	r1, [pc, #272]	; (4019b0 <tone+0x180>)
  4018a0:	f04f 0200 	mov.w	r2, #0
  4018a4:	185d      	adds	r5, r3, r1
  4018a6:	eb44 0602 	adc.w	r6, r4, r2
  4018aa:	4628      	mov	r0, r5
  4018ac:	4631      	mov	r1, r6
  4018ae:	4c41      	ldr	r4, [pc, #260]	; (4019b4 <tone+0x184>)
  4018b0:	4a41      	ldr	r2, [pc, #260]	; (4019b8 <tone+0x188>)
  4018b2:	f04f 0300 	mov.w	r3, #0
  4018b6:	47a0      	blx	r4
  4018b8:	4603      	mov	r3, r0
  4018ba:	460c      	mov	r4, r1
  4018bc:	4618      	mov	r0, r3
  4018be:	4b3f      	ldr	r3, [pc, #252]	; (4019bc <tone+0x18c>)
  4018c0:	4798      	blx	r3
  4018c2:	e016      	b.n	4018f2 <tone+0xc2>
  4018c4:	4b39      	ldr	r3, [pc, #228]	; (4019ac <tone+0x17c>)
  4018c6:	4798      	blx	r3
  4018c8:	4603      	mov	r3, r0
  4018ca:	f04f 0400 	mov.w	r4, #0
  4018ce:	4938      	ldr	r1, [pc, #224]	; (4019b0 <tone+0x180>)
  4018d0:	f04f 0200 	mov.w	r2, #0
  4018d4:	185d      	adds	r5, r3, r1
  4018d6:	eb44 0602 	adc.w	r6, r4, r2
  4018da:	4628      	mov	r0, r5
  4018dc:	4631      	mov	r1, r6
  4018de:	4c35      	ldr	r4, [pc, #212]	; (4019b4 <tone+0x184>)
  4018e0:	4a35      	ldr	r2, [pc, #212]	; (4019b8 <tone+0x188>)
  4018e2:	f04f 0300 	mov.w	r3, #0
  4018e6:	47a0      	blx	r4
  4018e8:	4603      	mov	r3, r0
  4018ea:	460c      	mov	r4, r1
  4018ec:	4618      	mov	r0, r3
  4018ee:	4b33      	ldr	r3, [pc, #204]	; (4019bc <tone+0x18c>)
  4018f0:	4798      	blx	r3
		pio_clear(PIOC, LED_PIO_IDX_MASK); // Apaga o LED
  4018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4018f6:	482b      	ldr	r0, [pc, #172]	; (4019a4 <tone+0x174>)
  4018f8:	4b31      	ldr	r3, [pc, #196]	; (4019c0 <tone+0x190>)
  4018fa:	4798      	blx	r3
		pio_clear(PIOC, BUZ_PIO_IDX_MASK); // Tira som do buzzer
  4018fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401900:	4828      	ldr	r0, [pc, #160]	; (4019a4 <tone+0x174>)
  401902:	4b2f      	ldr	r3, [pc, #188]	; (4019c0 <tone+0x190>)
  401904:	4798      	blx	r3
		delay_us(t);
  401906:	693b      	ldr	r3, [r7, #16]
  401908:	2b00      	cmp	r3, #0
  40190a:	d024      	beq.n	401956 <tone+0x126>
  40190c:	693b      	ldr	r3, [r7, #16]
  40190e:	461d      	mov	r5, r3
  401910:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401914:	4b25      	ldr	r3, [pc, #148]	; (4019ac <tone+0x17c>)
  401916:	4798      	blx	r3
  401918:	4603      	mov	r3, r0
  40191a:	f04f 0400 	mov.w	r4, #0
  40191e:	fb03 f106 	mul.w	r1, r3, r6
  401922:	fb05 f204 	mul.w	r2, r5, r4
  401926:	440a      	add	r2, r1
  401928:	fba5 3403 	umull	r3, r4, r5, r3
  40192c:	4422      	add	r2, r4
  40192e:	4614      	mov	r4, r2
  401930:	491f      	ldr	r1, [pc, #124]	; (4019b0 <tone+0x180>)
  401932:	f04f 0200 	mov.w	r2, #0
  401936:	185d      	adds	r5, r3, r1
  401938:	eb44 0602 	adc.w	r6, r4, r2
  40193c:	4628      	mov	r0, r5
  40193e:	4631      	mov	r1, r6
  401940:	4c1c      	ldr	r4, [pc, #112]	; (4019b4 <tone+0x184>)
  401942:	4a1d      	ldr	r2, [pc, #116]	; (4019b8 <tone+0x188>)
  401944:	f04f 0300 	mov.w	r3, #0
  401948:	47a0      	blx	r4
  40194a:	4603      	mov	r3, r0
  40194c:	460c      	mov	r4, r1
  40194e:	4618      	mov	r0, r3
  401950:	4b1a      	ldr	r3, [pc, #104]	; (4019bc <tone+0x18c>)
  401952:	4798      	blx	r3
  401954:	e016      	b.n	401984 <tone+0x154>
  401956:	4b15      	ldr	r3, [pc, #84]	; (4019ac <tone+0x17c>)
  401958:	4798      	blx	r3
  40195a:	4603      	mov	r3, r0
  40195c:	f04f 0400 	mov.w	r4, #0
  401960:	4913      	ldr	r1, [pc, #76]	; (4019b0 <tone+0x180>)
  401962:	f04f 0200 	mov.w	r2, #0
  401966:	185d      	adds	r5, r3, r1
  401968:	eb44 0602 	adc.w	r6, r4, r2
  40196c:	4628      	mov	r0, r5
  40196e:	4631      	mov	r1, r6
  401970:	4c10      	ldr	r4, [pc, #64]	; (4019b4 <tone+0x184>)
  401972:	4a11      	ldr	r2, [pc, #68]	; (4019b8 <tone+0x188>)
  401974:	f04f 0300 	mov.w	r3, #0
  401978:	47a0      	blx	r4
  40197a:	4603      	mov	r3, r0
  40197c:	460c      	mov	r4, r1
  40197e:	4618      	mov	r0, r3
  401980:	4b0e      	ldr	r3, [pc, #56]	; (4019bc <tone+0x18c>)
  401982:	4798      	blx	r3
	for (int i = 0; i < j; i++)
  401984:	697b      	ldr	r3, [r7, #20]
  401986:	3301      	adds	r3, #1
  401988:	617b      	str	r3, [r7, #20]
  40198a:	697a      	ldr	r2, [r7, #20]
  40198c:	68fb      	ldr	r3, [r7, #12]
  40198e:	429a      	cmp	r2, r3
  401990:	f6ff af66 	blt.w	401860 <tone+0x30>
	}
}
  401994:	bf00      	nop
  401996:	371c      	adds	r7, #28
  401998:	46bd      	mov	sp, r7
  40199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40199c:	0007a120 	.word	0x0007a120
  4019a0:	10624dd3 	.word	0x10624dd3
  4019a4:	400e1200 	.word	0x400e1200
  4019a8:	00400555 	.word	0x00400555
  4019ac:	004016d5 	.word	0x004016d5
  4019b0:	005a83df 	.word	0x005a83df
  4019b4:	00402445 	.word	0x00402445
  4019b8:	005a83e0 	.word	0x005a83e0
  4019bc:	20400001 	.word	0x20400001
  4019c0:	00400571 	.word	0x00400571
  4019c4:	00000000 	.word	0x00000000

004019c8 <play>:

void play(int note, int tempo, int compass)
{
  4019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019ca:	b087      	sub	sp, #28
  4019cc:	af00      	add	r7, sp, #0
  4019ce:	60f8      	str	r0, [r7, #12]
  4019d0:	60b9      	str	r1, [r7, #8]
  4019d2:	607a      	str	r2, [r7, #4]
	int noteDuration = compass / tempo;
  4019d4:	687a      	ldr	r2, [r7, #4]
  4019d6:	68bb      	ldr	r3, [r7, #8]
  4019d8:	fb92 f3f3 	sdiv	r3, r2, r3
  4019dc:	617b      	str	r3, [r7, #20]
	tone(note, noteDuration);
  4019de:	6979      	ldr	r1, [r7, #20]
  4019e0:	68f8      	ldr	r0, [r7, #12]
  4019e2:	4b2f      	ldr	r3, [pc, #188]	; (401aa0 <play+0xd8>)
  4019e4:	4798      	blx	r3
	int pauseBetweenNotes = noteDuration * 1.30;
  4019e6:	4b2f      	ldr	r3, [pc, #188]	; (401aa4 <play+0xdc>)
  4019e8:	6978      	ldr	r0, [r7, #20]
  4019ea:	4798      	blx	r3
  4019ec:	4c2e      	ldr	r4, [pc, #184]	; (401aa8 <play+0xe0>)
  4019ee:	a32a      	add	r3, pc, #168	; (adr r3, 401a98 <play+0xd0>)
  4019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4019f4:	47a0      	blx	r4
  4019f6:	4603      	mov	r3, r0
  4019f8:	460c      	mov	r4, r1
  4019fa:	4619      	mov	r1, r3
  4019fc:	4622      	mov	r2, r4
  4019fe:	4b2b      	ldr	r3, [pc, #172]	; (401aac <play+0xe4>)
  401a00:	4608      	mov	r0, r1
  401a02:	4611      	mov	r1, r2
  401a04:	4798      	blx	r3
  401a06:	4603      	mov	r3, r0
  401a08:	613b      	str	r3, [r7, #16]
	delay_ms(pauseBetweenNotes);
  401a0a:	693b      	ldr	r3, [r7, #16]
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	d026      	beq.n	401a5e <play+0x96>
  401a10:	693b      	ldr	r3, [r7, #16]
  401a12:	461d      	mov	r5, r3
  401a14:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401a18:	4b25      	ldr	r3, [pc, #148]	; (401ab0 <play+0xe8>)
  401a1a:	4798      	blx	r3
  401a1c:	4603      	mov	r3, r0
  401a1e:	f04f 0400 	mov.w	r4, #0
  401a22:	fb03 f106 	mul.w	r1, r3, r6
  401a26:	fb05 f204 	mul.w	r2, r5, r4
  401a2a:	440a      	add	r2, r1
  401a2c:	fba5 3403 	umull	r3, r4, r5, r3
  401a30:	4422      	add	r2, r4
  401a32:	4614      	mov	r4, r2
  401a34:	f241 712b 	movw	r1, #5931	; 0x172b
  401a38:	f04f 0200 	mov.w	r2, #0
  401a3c:	185d      	adds	r5, r3, r1
  401a3e:	eb44 0602 	adc.w	r6, r4, r2
  401a42:	4628      	mov	r0, r5
  401a44:	4631      	mov	r1, r6
  401a46:	4c1b      	ldr	r4, [pc, #108]	; (401ab4 <play+0xec>)
  401a48:	f241 722c 	movw	r2, #5932	; 0x172c
  401a4c:	f04f 0300 	mov.w	r3, #0
  401a50:	47a0      	blx	r4
  401a52:	4603      	mov	r3, r0
  401a54:	460c      	mov	r4, r1
  401a56:	4618      	mov	r0, r3
  401a58:	4b17      	ldr	r3, [pc, #92]	; (401ab8 <play+0xf0>)
  401a5a:	4798      	blx	r3
}
  401a5c:	e016      	b.n	401a8c <play+0xc4>
	delay_ms(pauseBetweenNotes);
  401a5e:	4b14      	ldr	r3, [pc, #80]	; (401ab0 <play+0xe8>)
  401a60:	4798      	blx	r3
  401a62:	4603      	mov	r3, r0
  401a64:	f04f 0400 	mov.w	r4, #0
  401a68:	4914      	ldr	r1, [pc, #80]	; (401abc <play+0xf4>)
  401a6a:	f04f 0200 	mov.w	r2, #0
  401a6e:	185d      	adds	r5, r3, r1
  401a70:	eb44 0602 	adc.w	r6, r4, r2
  401a74:	4628      	mov	r0, r5
  401a76:	4631      	mov	r1, r6
  401a78:	4c0e      	ldr	r4, [pc, #56]	; (401ab4 <play+0xec>)
  401a7a:	4a11      	ldr	r2, [pc, #68]	; (401ac0 <play+0xf8>)
  401a7c:	f04f 0300 	mov.w	r3, #0
  401a80:	47a0      	blx	r4
  401a82:	4603      	mov	r3, r0
  401a84:	460c      	mov	r4, r1
  401a86:	4618      	mov	r0, r3
  401a88:	4b0b      	ldr	r3, [pc, #44]	; (401ab8 <play+0xf0>)
  401a8a:	4798      	blx	r3
}
  401a8c:	bf00      	nop
  401a8e:	371c      	adds	r7, #28
  401a90:	46bd      	mov	sp, r7
  401a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a94:	f3af 8000 	nop.w
  401a98:	cccccccd 	.word	0xcccccccd
  401a9c:	3ff4cccc 	.word	0x3ff4cccc
  401aa0:	00401831 	.word	0x00401831
  401aa4:	00401f05 	.word	0x00401f05
  401aa8:	00401fd1 	.word	0x00401fd1
  401aac:	004023f5 	.word	0x004023f5
  401ab0:	004016d5 	.word	0x004016d5
  401ab4:	00402445 	.word	0x00402445
  401ab8:	20400001 	.word	0x20400001
  401abc:	005a83df 	.word	0x005a83df
  401ac0:	005a83e0 	.word	0x005a83e0

00401ac4 <next_song>:

void next_song(int *choice, int n_songs, song *cur_song, song *songs)
{
  401ac4:	b480      	push	{r7}
  401ac6:	b085      	sub	sp, #20
  401ac8:	af00      	add	r7, sp, #0
  401aca:	60f8      	str	r0, [r7, #12]
  401acc:	60b9      	str	r1, [r7, #8]
  401ace:	607a      	str	r2, [r7, #4]
  401ad0:	603b      	str	r3, [r7, #0]
	*choice = (*choice + 1) % n_songs;
  401ad2:	68fb      	ldr	r3, [r7, #12]
  401ad4:	681b      	ldr	r3, [r3, #0]
  401ad6:	3301      	adds	r3, #1
  401ad8:	68ba      	ldr	r2, [r7, #8]
  401ada:	fb93 f2f2 	sdiv	r2, r3, r2
  401ade:	68b9      	ldr	r1, [r7, #8]
  401ae0:	fb01 f202 	mul.w	r2, r1, r2
  401ae4:	1a9a      	subs	r2, r3, r2
  401ae6:	68fb      	ldr	r3, [r7, #12]
  401ae8:	601a      	str	r2, [r3, #0]
	*cur_song = songs[*choice];
  401aea:	68fb      	ldr	r3, [r7, #12]
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	461a      	mov	r2, r3
  401af0:	4613      	mov	r3, r2
  401af2:	005b      	lsls	r3, r3, #1
  401af4:	4413      	add	r3, r2
  401af6:	009b      	lsls	r3, r3, #2
  401af8:	461a      	mov	r2, r3
  401afa:	683b      	ldr	r3, [r7, #0]
  401afc:	441a      	add	r2, r3
  401afe:	687b      	ldr	r3, [r7, #4]
  401b00:	ca07      	ldmia	r2, {r0, r1, r2}
  401b02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
  401b06:	bf00      	nop
  401b08:	3714      	adds	r7, #20
  401b0a:	46bd      	mov	sp, r7
  401b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b10:	4770      	bx	lr
	...

00401b14 <main>:
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.

int main(void)
{
  401b14:	b590      	push	{r4, r7, lr}
  401b16:	b09b      	sub	sp, #108	; 0x6c
  401b18:	af00      	add	r7, sp, #0
	// inicializa sistema e IOs
	init();
  401b1a:	4b45      	ldr	r3, [pc, #276]	; (401c30 <main+0x11c>)
  401b1c:	4798      	blx	r3

	int n_songs = 2;
  401b1e:	2302      	movs	r3, #2
  401b20:	65fb      	str	r3, [r7, #92]	; 0x5c
	int choice = 0;
  401b22:	2300      	movs	r3, #0
  401b24:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned char pause = 1;
  401b26:	2301      	movs	r3, #1
  401b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	song s1, s2, s3, cur_song;

	new_song(s1, n1, t1);
  401b2c:	4b41      	ldr	r3, [pc, #260]	; (401c34 <main+0x120>)
  401b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  401b30:	4b41      	ldr	r3, [pc, #260]	; (401c38 <main+0x124>)
  401b32:	653b      	str	r3, [r7, #80]	; 0x50
  401b34:	234c      	movs	r3, #76	; 0x4c
  401b36:	657b      	str	r3, [r7, #84]	; 0x54
	new_song(s2, n2, t2);
  401b38:	4b40      	ldr	r3, [pc, #256]	; (401c3c <main+0x128>)
  401b3a:	643b      	str	r3, [r7, #64]	; 0x40
  401b3c:	4b40      	ldr	r3, [pc, #256]	; (401c40 <main+0x12c>)
  401b3e:	647b      	str	r3, [r7, #68]	; 0x44
  401b40:	2338      	movs	r3, #56	; 0x38
  401b42:	64bb      	str	r3, [r7, #72]	; 0x48
	new_song(s3, n3, t3);
  401b44:	4b3f      	ldr	r3, [pc, #252]	; (401c44 <main+0x130>)
  401b46:	637b      	str	r3, [r7, #52]	; 0x34
  401b48:	4b3f      	ldr	r3, [pc, #252]	; (401c48 <main+0x134>)
  401b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  401b4c:	2318      	movs	r3, #24
  401b4e:	63fb      	str	r3, [r7, #60]	; 0x3c

	song songs[] = {s1, s2, s3};
  401b50:	1d3b      	adds	r3, r7, #4
  401b52:	f107 024c 	add.w	r2, r7, #76	; 0x4c
  401b56:	ca07      	ldmia	r2, {r0, r1, r2}
  401b58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  401b5c:	f107 0310 	add.w	r3, r7, #16
  401b60:	f107 0240 	add.w	r2, r7, #64	; 0x40
  401b64:	ca07      	ldmia	r2, {r0, r1, r2}
  401b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  401b6a:	f107 031c 	add.w	r3, r7, #28
  401b6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
  401b72:	ca07      	ldmia	r2, {r0, r1, r2}
  401b74:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	size_t i = 0;
  401b78:	2300      	movs	r3, #0
  401b7a:	663b      	str	r3, [r7, #96]	; 0x60
	cur_song = songs[0];
  401b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
  401b80:	1d3a      	adds	r2, r7, #4
  401b82:	ca07      	ldmia	r2, {r0, r1, r2}
  401b84:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Botão play/pause  (BUTTON 1)
	// Botão next        (BUTTON 3)
	
	BUT1_flag = 0;
  401b88:	4b30      	ldr	r3, [pc, #192]	; (401c4c <main+0x138>)
  401b8a:	2200      	movs	r2, #0
  401b8c:	701a      	strb	r2, [r3, #0]
	BUT3_flag = 0;
  401b8e:	4b30      	ldr	r3, [pc, #192]	; (401c50 <main+0x13c>)
  401b90:	2200      	movs	r2, #0
  401b92:	701a      	strb	r2, [r3, #0]

	while (1) {
		if (pause) {
  401b94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  401b98:	2b00      	cmp	r3, #0
  401b9a:	d002      	beq.n	401ba2 <main+0x8e>
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);  // Sleep until interrupt happens
  401b9c:	2002      	movs	r0, #2
  401b9e:	4b2d      	ldr	r3, [pc, #180]	; (401c54 <main+0x140>)
  401ba0:	4798      	blx	r3
		}

		if (BUT3_flag) {  // Change
  401ba2:	4b2b      	ldr	r3, [pc, #172]	; (401c50 <main+0x13c>)
  401ba4:	781b      	ldrb	r3, [r3, #0]
  401ba6:	b2db      	uxtb	r3, r3
  401ba8:	2b00      	cmp	r3, #0
  401baa:	d00c      	beq.n	401bc6 <main+0xb2>
			BUT3_flag = 0;
  401bac:	4b28      	ldr	r3, [pc, #160]	; (401c50 <main+0x13c>)
  401bae:	2200      	movs	r2, #0
  401bb0:	701a      	strb	r2, [r3, #0]
			next_song(&choice, n_songs, &cur_song, songs);
  401bb2:	1d3b      	adds	r3, r7, #4
  401bb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
  401bb8:	f107 0058 	add.w	r0, r7, #88	; 0x58
  401bbc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
  401bbe:	4c26      	ldr	r4, [pc, #152]	; (401c58 <main+0x144>)
  401bc0:	47a0      	blx	r4
			i = 0;
  401bc2:	2300      	movs	r3, #0
  401bc4:	663b      	str	r3, [r7, #96]	; 0x60
		}

		if (BUT1_flag) {  // Pause or play	
  401bc6:	4b21      	ldr	r3, [pc, #132]	; (401c4c <main+0x138>)
  401bc8:	781b      	ldrb	r3, [r3, #0]
  401bca:	b2db      	uxtb	r3, r3
  401bcc:	2b00      	cmp	r3, #0
  401bce:	d00d      	beq.n	401bec <main+0xd8>
			if(pause == 1) pause = 0;
  401bd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  401bd4:	2b01      	cmp	r3, #1
  401bd6:	d103      	bne.n	401be0 <main+0xcc>
  401bd8:	2300      	movs	r3, #0
  401bda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  401bde:	e002      	b.n	401be6 <main+0xd2>
			else pause = 1;
  401be0:	2301      	movs	r3, #1
  401be2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			BUT1_flag = 0;
  401be6:	4b19      	ldr	r3, [pc, #100]	; (401c4c <main+0x138>)
  401be8:	2200      	movs	r2, #0
  401bea:	701a      	strb	r2, [r3, #0]
			
		}

		if (!pause) {
  401bec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  401bf0:	2b00      	cmp	r3, #0
  401bf2:	d1cf      	bne.n	401b94 <main+0x80>
			if (i < cur_song.length) {
  401bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  401bf8:	429a      	cmp	r2, r3
  401bfa:	d912      	bls.n	401c22 <main+0x10e>
				play(cur_song.notes[i], cur_song.tempos[i], 800);
  401bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
  401bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  401c00:	009b      	lsls	r3, r3, #2
  401c02:	4413      	add	r3, r2
  401c04:	6818      	ldr	r0, [r3, #0]
  401c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  401c0a:	009b      	lsls	r3, r3, #2
  401c0c:	4413      	add	r3, r2
  401c0e:	681b      	ldr	r3, [r3, #0]
  401c10:	f44f 7248 	mov.w	r2, #800	; 0x320
  401c14:	4619      	mov	r1, r3
  401c16:	4b11      	ldr	r3, [pc, #68]	; (401c5c <main+0x148>)
  401c18:	4798      	blx	r3
				i++;
  401c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  401c1c:	3301      	adds	r3, #1
  401c1e:	663b      	str	r3, [r7, #96]	; 0x60
  401c20:	e7b8      	b.n	401b94 <main+0x80>
			} else {
				pause = 0;
  401c22:	2300      	movs	r3, #0
  401c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				i = 0;
  401c28:	2300      	movs	r3, #0
  401c2a:	663b      	str	r3, [r7, #96]	; 0x60
		if (pause) {
  401c2c:	e7b2      	b.n	401b94 <main+0x80>
  401c2e:	bf00      	nop
  401c30:	00401719 	.word	0x00401719
  401c34:	004028c4 	.word	0x004028c4
  401c38:	004029f4 	.word	0x004029f4
  401c3c:	00402b24 	.word	0x00402b24
  401c40:	00402c04 	.word	0x00402c04
  401c44:	00402ce4 	.word	0x00402ce4
  401c48:	00402d44 	.word	0x00402d44
  401c4c:	204004dc 	.word	0x204004dc
  401c50:	204004dd 	.word	0x204004dd
  401c54:	00400ee5 	.word	0x00400ee5
  401c58:	00401ac5 	.word	0x00401ac5
  401c5c:	004019c9 	.word	0x004019c9

00401c60 <__aeabi_drsub>:
  401c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401c64:	e002      	b.n	401c6c <__adddf3>
  401c66:	bf00      	nop

00401c68 <__aeabi_dsub>:
  401c68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401c6c <__adddf3>:
  401c6c:	b530      	push	{r4, r5, lr}
  401c6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401c72:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401c76:	ea94 0f05 	teq	r4, r5
  401c7a:	bf08      	it	eq
  401c7c:	ea90 0f02 	teqeq	r0, r2
  401c80:	bf1f      	itttt	ne
  401c82:	ea54 0c00 	orrsne.w	ip, r4, r0
  401c86:	ea55 0c02 	orrsne.w	ip, r5, r2
  401c8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401c8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401c92:	f000 80e2 	beq.w	401e5a <__adddf3+0x1ee>
  401c96:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401c9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401c9e:	bfb8      	it	lt
  401ca0:	426d      	neglt	r5, r5
  401ca2:	dd0c      	ble.n	401cbe <__adddf3+0x52>
  401ca4:	442c      	add	r4, r5
  401ca6:	ea80 0202 	eor.w	r2, r0, r2
  401caa:	ea81 0303 	eor.w	r3, r1, r3
  401cae:	ea82 0000 	eor.w	r0, r2, r0
  401cb2:	ea83 0101 	eor.w	r1, r3, r1
  401cb6:	ea80 0202 	eor.w	r2, r0, r2
  401cba:	ea81 0303 	eor.w	r3, r1, r3
  401cbe:	2d36      	cmp	r5, #54	; 0x36
  401cc0:	bf88      	it	hi
  401cc2:	bd30      	pophi	{r4, r5, pc}
  401cc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401cc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401ccc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401cd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401cd4:	d002      	beq.n	401cdc <__adddf3+0x70>
  401cd6:	4240      	negs	r0, r0
  401cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401cdc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401ce0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401ce4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401ce8:	d002      	beq.n	401cf0 <__adddf3+0x84>
  401cea:	4252      	negs	r2, r2
  401cec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401cf0:	ea94 0f05 	teq	r4, r5
  401cf4:	f000 80a7 	beq.w	401e46 <__adddf3+0x1da>
  401cf8:	f1a4 0401 	sub.w	r4, r4, #1
  401cfc:	f1d5 0e20 	rsbs	lr, r5, #32
  401d00:	db0d      	blt.n	401d1e <__adddf3+0xb2>
  401d02:	fa02 fc0e 	lsl.w	ip, r2, lr
  401d06:	fa22 f205 	lsr.w	r2, r2, r5
  401d0a:	1880      	adds	r0, r0, r2
  401d0c:	f141 0100 	adc.w	r1, r1, #0
  401d10:	fa03 f20e 	lsl.w	r2, r3, lr
  401d14:	1880      	adds	r0, r0, r2
  401d16:	fa43 f305 	asr.w	r3, r3, r5
  401d1a:	4159      	adcs	r1, r3
  401d1c:	e00e      	b.n	401d3c <__adddf3+0xd0>
  401d1e:	f1a5 0520 	sub.w	r5, r5, #32
  401d22:	f10e 0e20 	add.w	lr, lr, #32
  401d26:	2a01      	cmp	r2, #1
  401d28:	fa03 fc0e 	lsl.w	ip, r3, lr
  401d2c:	bf28      	it	cs
  401d2e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401d32:	fa43 f305 	asr.w	r3, r3, r5
  401d36:	18c0      	adds	r0, r0, r3
  401d38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401d40:	d507      	bpl.n	401d52 <__adddf3+0xe6>
  401d42:	f04f 0e00 	mov.w	lr, #0
  401d46:	f1dc 0c00 	rsbs	ip, ip, #0
  401d4a:	eb7e 0000 	sbcs.w	r0, lr, r0
  401d4e:	eb6e 0101 	sbc.w	r1, lr, r1
  401d52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401d56:	d31b      	bcc.n	401d90 <__adddf3+0x124>
  401d58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401d5c:	d30c      	bcc.n	401d78 <__adddf3+0x10c>
  401d5e:	0849      	lsrs	r1, r1, #1
  401d60:	ea5f 0030 	movs.w	r0, r0, rrx
  401d64:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401d68:	f104 0401 	add.w	r4, r4, #1
  401d6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401d70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401d74:	f080 809a 	bcs.w	401eac <__adddf3+0x240>
  401d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401d7c:	bf08      	it	eq
  401d7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401d82:	f150 0000 	adcs.w	r0, r0, #0
  401d86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401d8a:	ea41 0105 	orr.w	r1, r1, r5
  401d8e:	bd30      	pop	{r4, r5, pc}
  401d90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401d94:	4140      	adcs	r0, r0
  401d96:	eb41 0101 	adc.w	r1, r1, r1
  401d9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d9e:	f1a4 0401 	sub.w	r4, r4, #1
  401da2:	d1e9      	bne.n	401d78 <__adddf3+0x10c>
  401da4:	f091 0f00 	teq	r1, #0
  401da8:	bf04      	itt	eq
  401daa:	4601      	moveq	r1, r0
  401dac:	2000      	moveq	r0, #0
  401dae:	fab1 f381 	clz	r3, r1
  401db2:	bf08      	it	eq
  401db4:	3320      	addeq	r3, #32
  401db6:	f1a3 030b 	sub.w	r3, r3, #11
  401dba:	f1b3 0220 	subs.w	r2, r3, #32
  401dbe:	da0c      	bge.n	401dda <__adddf3+0x16e>
  401dc0:	320c      	adds	r2, #12
  401dc2:	dd08      	ble.n	401dd6 <__adddf3+0x16a>
  401dc4:	f102 0c14 	add.w	ip, r2, #20
  401dc8:	f1c2 020c 	rsb	r2, r2, #12
  401dcc:	fa01 f00c 	lsl.w	r0, r1, ip
  401dd0:	fa21 f102 	lsr.w	r1, r1, r2
  401dd4:	e00c      	b.n	401df0 <__adddf3+0x184>
  401dd6:	f102 0214 	add.w	r2, r2, #20
  401dda:	bfd8      	it	le
  401ddc:	f1c2 0c20 	rsble	ip, r2, #32
  401de0:	fa01 f102 	lsl.w	r1, r1, r2
  401de4:	fa20 fc0c 	lsr.w	ip, r0, ip
  401de8:	bfdc      	itt	le
  401dea:	ea41 010c 	orrle.w	r1, r1, ip
  401dee:	4090      	lslle	r0, r2
  401df0:	1ae4      	subs	r4, r4, r3
  401df2:	bfa2      	ittt	ge
  401df4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401df8:	4329      	orrge	r1, r5
  401dfa:	bd30      	popge	{r4, r5, pc}
  401dfc:	ea6f 0404 	mvn.w	r4, r4
  401e00:	3c1f      	subs	r4, #31
  401e02:	da1c      	bge.n	401e3e <__adddf3+0x1d2>
  401e04:	340c      	adds	r4, #12
  401e06:	dc0e      	bgt.n	401e26 <__adddf3+0x1ba>
  401e08:	f104 0414 	add.w	r4, r4, #20
  401e0c:	f1c4 0220 	rsb	r2, r4, #32
  401e10:	fa20 f004 	lsr.w	r0, r0, r4
  401e14:	fa01 f302 	lsl.w	r3, r1, r2
  401e18:	ea40 0003 	orr.w	r0, r0, r3
  401e1c:	fa21 f304 	lsr.w	r3, r1, r4
  401e20:	ea45 0103 	orr.w	r1, r5, r3
  401e24:	bd30      	pop	{r4, r5, pc}
  401e26:	f1c4 040c 	rsb	r4, r4, #12
  401e2a:	f1c4 0220 	rsb	r2, r4, #32
  401e2e:	fa20 f002 	lsr.w	r0, r0, r2
  401e32:	fa01 f304 	lsl.w	r3, r1, r4
  401e36:	ea40 0003 	orr.w	r0, r0, r3
  401e3a:	4629      	mov	r1, r5
  401e3c:	bd30      	pop	{r4, r5, pc}
  401e3e:	fa21 f004 	lsr.w	r0, r1, r4
  401e42:	4629      	mov	r1, r5
  401e44:	bd30      	pop	{r4, r5, pc}
  401e46:	f094 0f00 	teq	r4, #0
  401e4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401e4e:	bf06      	itte	eq
  401e50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401e54:	3401      	addeq	r4, #1
  401e56:	3d01      	subne	r5, #1
  401e58:	e74e      	b.n	401cf8 <__adddf3+0x8c>
  401e5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401e5e:	bf18      	it	ne
  401e60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401e64:	d029      	beq.n	401eba <__adddf3+0x24e>
  401e66:	ea94 0f05 	teq	r4, r5
  401e6a:	bf08      	it	eq
  401e6c:	ea90 0f02 	teqeq	r0, r2
  401e70:	d005      	beq.n	401e7e <__adddf3+0x212>
  401e72:	ea54 0c00 	orrs.w	ip, r4, r0
  401e76:	bf04      	itt	eq
  401e78:	4619      	moveq	r1, r3
  401e7a:	4610      	moveq	r0, r2
  401e7c:	bd30      	pop	{r4, r5, pc}
  401e7e:	ea91 0f03 	teq	r1, r3
  401e82:	bf1e      	ittt	ne
  401e84:	2100      	movne	r1, #0
  401e86:	2000      	movne	r0, #0
  401e88:	bd30      	popne	{r4, r5, pc}
  401e8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401e8e:	d105      	bne.n	401e9c <__adddf3+0x230>
  401e90:	0040      	lsls	r0, r0, #1
  401e92:	4149      	adcs	r1, r1
  401e94:	bf28      	it	cs
  401e96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401e9a:	bd30      	pop	{r4, r5, pc}
  401e9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401ea0:	bf3c      	itt	cc
  401ea2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401ea6:	bd30      	popcc	{r4, r5, pc}
  401ea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401eac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401eb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401eb4:	f04f 0000 	mov.w	r0, #0
  401eb8:	bd30      	pop	{r4, r5, pc}
  401eba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401ebe:	bf1a      	itte	ne
  401ec0:	4619      	movne	r1, r3
  401ec2:	4610      	movne	r0, r2
  401ec4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401ec8:	bf1c      	itt	ne
  401eca:	460b      	movne	r3, r1
  401ecc:	4602      	movne	r2, r0
  401ece:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401ed2:	bf06      	itte	eq
  401ed4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401ed8:	ea91 0f03 	teqeq	r1, r3
  401edc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401ee0:	bd30      	pop	{r4, r5, pc}
  401ee2:	bf00      	nop

00401ee4 <__aeabi_ui2d>:
  401ee4:	f090 0f00 	teq	r0, #0
  401ee8:	bf04      	itt	eq
  401eea:	2100      	moveq	r1, #0
  401eec:	4770      	bxeq	lr
  401eee:	b530      	push	{r4, r5, lr}
  401ef0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ef4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401ef8:	f04f 0500 	mov.w	r5, #0
  401efc:	f04f 0100 	mov.w	r1, #0
  401f00:	e750      	b.n	401da4 <__adddf3+0x138>
  401f02:	bf00      	nop

00401f04 <__aeabi_i2d>:
  401f04:	f090 0f00 	teq	r0, #0
  401f08:	bf04      	itt	eq
  401f0a:	2100      	moveq	r1, #0
  401f0c:	4770      	bxeq	lr
  401f0e:	b530      	push	{r4, r5, lr}
  401f10:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401f14:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401f18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401f1c:	bf48      	it	mi
  401f1e:	4240      	negmi	r0, r0
  401f20:	f04f 0100 	mov.w	r1, #0
  401f24:	e73e      	b.n	401da4 <__adddf3+0x138>
  401f26:	bf00      	nop

00401f28 <__aeabi_f2d>:
  401f28:	0042      	lsls	r2, r0, #1
  401f2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401f2e:	ea4f 0131 	mov.w	r1, r1, rrx
  401f32:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401f36:	bf1f      	itttt	ne
  401f38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401f3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401f40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401f44:	4770      	bxne	lr
  401f46:	f092 0f00 	teq	r2, #0
  401f4a:	bf14      	ite	ne
  401f4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401f50:	4770      	bxeq	lr
  401f52:	b530      	push	{r4, r5, lr}
  401f54:	f44f 7460 	mov.w	r4, #896	; 0x380
  401f58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401f5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401f60:	e720      	b.n	401da4 <__adddf3+0x138>
  401f62:	bf00      	nop

00401f64 <__aeabi_ul2d>:
  401f64:	ea50 0201 	orrs.w	r2, r0, r1
  401f68:	bf08      	it	eq
  401f6a:	4770      	bxeq	lr
  401f6c:	b530      	push	{r4, r5, lr}
  401f6e:	f04f 0500 	mov.w	r5, #0
  401f72:	e00a      	b.n	401f8a <__aeabi_l2d+0x16>

00401f74 <__aeabi_l2d>:
  401f74:	ea50 0201 	orrs.w	r2, r0, r1
  401f78:	bf08      	it	eq
  401f7a:	4770      	bxeq	lr
  401f7c:	b530      	push	{r4, r5, lr}
  401f7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401f82:	d502      	bpl.n	401f8a <__aeabi_l2d+0x16>
  401f84:	4240      	negs	r0, r0
  401f86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401f8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401f8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401f92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401f96:	f43f aedc 	beq.w	401d52 <__adddf3+0xe6>
  401f9a:	f04f 0203 	mov.w	r2, #3
  401f9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401fa2:	bf18      	it	ne
  401fa4:	3203      	addne	r2, #3
  401fa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401faa:	bf18      	it	ne
  401fac:	3203      	addne	r2, #3
  401fae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401fb2:	f1c2 0320 	rsb	r3, r2, #32
  401fb6:	fa00 fc03 	lsl.w	ip, r0, r3
  401fba:	fa20 f002 	lsr.w	r0, r0, r2
  401fbe:	fa01 fe03 	lsl.w	lr, r1, r3
  401fc2:	ea40 000e 	orr.w	r0, r0, lr
  401fc6:	fa21 f102 	lsr.w	r1, r1, r2
  401fca:	4414      	add	r4, r2
  401fcc:	e6c1      	b.n	401d52 <__adddf3+0xe6>
  401fce:	bf00      	nop

00401fd0 <__aeabi_dmul>:
  401fd0:	b570      	push	{r4, r5, r6, lr}
  401fd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401fd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401fda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401fde:	bf1d      	ittte	ne
  401fe0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401fe4:	ea94 0f0c 	teqne	r4, ip
  401fe8:	ea95 0f0c 	teqne	r5, ip
  401fec:	f000 f8de 	bleq	4021ac <__aeabi_dmul+0x1dc>
  401ff0:	442c      	add	r4, r5
  401ff2:	ea81 0603 	eor.w	r6, r1, r3
  401ff6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401ffa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401ffe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402002:	bf18      	it	ne
  402004:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40200c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402010:	d038      	beq.n	402084 <__aeabi_dmul+0xb4>
  402012:	fba0 ce02 	umull	ip, lr, r0, r2
  402016:	f04f 0500 	mov.w	r5, #0
  40201a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40201e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402022:	fbe0 e503 	umlal	lr, r5, r0, r3
  402026:	f04f 0600 	mov.w	r6, #0
  40202a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40202e:	f09c 0f00 	teq	ip, #0
  402032:	bf18      	it	ne
  402034:	f04e 0e01 	orrne.w	lr, lr, #1
  402038:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40203c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402040:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402044:	d204      	bcs.n	402050 <__aeabi_dmul+0x80>
  402046:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40204a:	416d      	adcs	r5, r5
  40204c:	eb46 0606 	adc.w	r6, r6, r6
  402050:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402054:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402058:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40205c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402060:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402064:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402068:	bf88      	it	hi
  40206a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40206e:	d81e      	bhi.n	4020ae <__aeabi_dmul+0xde>
  402070:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402074:	bf08      	it	eq
  402076:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40207a:	f150 0000 	adcs.w	r0, r0, #0
  40207e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402082:	bd70      	pop	{r4, r5, r6, pc}
  402084:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402088:	ea46 0101 	orr.w	r1, r6, r1
  40208c:	ea40 0002 	orr.w	r0, r0, r2
  402090:	ea81 0103 	eor.w	r1, r1, r3
  402094:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402098:	bfc2      	ittt	gt
  40209a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40209e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4020a2:	bd70      	popgt	{r4, r5, r6, pc}
  4020a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4020a8:	f04f 0e00 	mov.w	lr, #0
  4020ac:	3c01      	subs	r4, #1
  4020ae:	f300 80ab 	bgt.w	402208 <__aeabi_dmul+0x238>
  4020b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4020b6:	bfde      	ittt	le
  4020b8:	2000      	movle	r0, #0
  4020ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4020be:	bd70      	pople	{r4, r5, r6, pc}
  4020c0:	f1c4 0400 	rsb	r4, r4, #0
  4020c4:	3c20      	subs	r4, #32
  4020c6:	da35      	bge.n	402134 <__aeabi_dmul+0x164>
  4020c8:	340c      	adds	r4, #12
  4020ca:	dc1b      	bgt.n	402104 <__aeabi_dmul+0x134>
  4020cc:	f104 0414 	add.w	r4, r4, #20
  4020d0:	f1c4 0520 	rsb	r5, r4, #32
  4020d4:	fa00 f305 	lsl.w	r3, r0, r5
  4020d8:	fa20 f004 	lsr.w	r0, r0, r4
  4020dc:	fa01 f205 	lsl.w	r2, r1, r5
  4020e0:	ea40 0002 	orr.w	r0, r0, r2
  4020e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4020e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4020ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4020f0:	fa21 f604 	lsr.w	r6, r1, r4
  4020f4:	eb42 0106 	adc.w	r1, r2, r6
  4020f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4020fc:	bf08      	it	eq
  4020fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402102:	bd70      	pop	{r4, r5, r6, pc}
  402104:	f1c4 040c 	rsb	r4, r4, #12
  402108:	f1c4 0520 	rsb	r5, r4, #32
  40210c:	fa00 f304 	lsl.w	r3, r0, r4
  402110:	fa20 f005 	lsr.w	r0, r0, r5
  402114:	fa01 f204 	lsl.w	r2, r1, r4
  402118:	ea40 0002 	orr.w	r0, r0, r2
  40211c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402120:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402124:	f141 0100 	adc.w	r1, r1, #0
  402128:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40212c:	bf08      	it	eq
  40212e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402132:	bd70      	pop	{r4, r5, r6, pc}
  402134:	f1c4 0520 	rsb	r5, r4, #32
  402138:	fa00 f205 	lsl.w	r2, r0, r5
  40213c:	ea4e 0e02 	orr.w	lr, lr, r2
  402140:	fa20 f304 	lsr.w	r3, r0, r4
  402144:	fa01 f205 	lsl.w	r2, r1, r5
  402148:	ea43 0302 	orr.w	r3, r3, r2
  40214c:	fa21 f004 	lsr.w	r0, r1, r4
  402150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402154:	fa21 f204 	lsr.w	r2, r1, r4
  402158:	ea20 0002 	bic.w	r0, r0, r2
  40215c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402160:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402164:	bf08      	it	eq
  402166:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40216a:	bd70      	pop	{r4, r5, r6, pc}
  40216c:	f094 0f00 	teq	r4, #0
  402170:	d10f      	bne.n	402192 <__aeabi_dmul+0x1c2>
  402172:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402176:	0040      	lsls	r0, r0, #1
  402178:	eb41 0101 	adc.w	r1, r1, r1
  40217c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402180:	bf08      	it	eq
  402182:	3c01      	subeq	r4, #1
  402184:	d0f7      	beq.n	402176 <__aeabi_dmul+0x1a6>
  402186:	ea41 0106 	orr.w	r1, r1, r6
  40218a:	f095 0f00 	teq	r5, #0
  40218e:	bf18      	it	ne
  402190:	4770      	bxne	lr
  402192:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402196:	0052      	lsls	r2, r2, #1
  402198:	eb43 0303 	adc.w	r3, r3, r3
  40219c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4021a0:	bf08      	it	eq
  4021a2:	3d01      	subeq	r5, #1
  4021a4:	d0f7      	beq.n	402196 <__aeabi_dmul+0x1c6>
  4021a6:	ea43 0306 	orr.w	r3, r3, r6
  4021aa:	4770      	bx	lr
  4021ac:	ea94 0f0c 	teq	r4, ip
  4021b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4021b4:	bf18      	it	ne
  4021b6:	ea95 0f0c 	teqne	r5, ip
  4021ba:	d00c      	beq.n	4021d6 <__aeabi_dmul+0x206>
  4021bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4021c0:	bf18      	it	ne
  4021c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4021c6:	d1d1      	bne.n	40216c <__aeabi_dmul+0x19c>
  4021c8:	ea81 0103 	eor.w	r1, r1, r3
  4021cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4021d0:	f04f 0000 	mov.w	r0, #0
  4021d4:	bd70      	pop	{r4, r5, r6, pc}
  4021d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4021da:	bf06      	itte	eq
  4021dc:	4610      	moveq	r0, r2
  4021de:	4619      	moveq	r1, r3
  4021e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4021e4:	d019      	beq.n	40221a <__aeabi_dmul+0x24a>
  4021e6:	ea94 0f0c 	teq	r4, ip
  4021ea:	d102      	bne.n	4021f2 <__aeabi_dmul+0x222>
  4021ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4021f0:	d113      	bne.n	40221a <__aeabi_dmul+0x24a>
  4021f2:	ea95 0f0c 	teq	r5, ip
  4021f6:	d105      	bne.n	402204 <__aeabi_dmul+0x234>
  4021f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4021fc:	bf1c      	itt	ne
  4021fe:	4610      	movne	r0, r2
  402200:	4619      	movne	r1, r3
  402202:	d10a      	bne.n	40221a <__aeabi_dmul+0x24a>
  402204:	ea81 0103 	eor.w	r1, r1, r3
  402208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40220c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402210:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402214:	f04f 0000 	mov.w	r0, #0
  402218:	bd70      	pop	{r4, r5, r6, pc}
  40221a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40221e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402222:	bd70      	pop	{r4, r5, r6, pc}

00402224 <__aeabi_ddiv>:
  402224:	b570      	push	{r4, r5, r6, lr}
  402226:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40222a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40222e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402232:	bf1d      	ittte	ne
  402234:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402238:	ea94 0f0c 	teqne	r4, ip
  40223c:	ea95 0f0c 	teqne	r5, ip
  402240:	f000 f8a7 	bleq	402392 <__aeabi_ddiv+0x16e>
  402244:	eba4 0405 	sub.w	r4, r4, r5
  402248:	ea81 0e03 	eor.w	lr, r1, r3
  40224c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402250:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402254:	f000 8088 	beq.w	402368 <__aeabi_ddiv+0x144>
  402258:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40225c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402260:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402264:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402268:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40226c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402270:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402274:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402278:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40227c:	429d      	cmp	r5, r3
  40227e:	bf08      	it	eq
  402280:	4296      	cmpeq	r6, r2
  402282:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402286:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40228a:	d202      	bcs.n	402292 <__aeabi_ddiv+0x6e>
  40228c:	085b      	lsrs	r3, r3, #1
  40228e:	ea4f 0232 	mov.w	r2, r2, rrx
  402292:	1ab6      	subs	r6, r6, r2
  402294:	eb65 0503 	sbc.w	r5, r5, r3
  402298:	085b      	lsrs	r3, r3, #1
  40229a:	ea4f 0232 	mov.w	r2, r2, rrx
  40229e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4022a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4022a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4022aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022ae:	bf22      	ittt	cs
  4022b0:	1ab6      	subcs	r6, r6, r2
  4022b2:	4675      	movcs	r5, lr
  4022b4:	ea40 000c 	orrcs.w	r0, r0, ip
  4022b8:	085b      	lsrs	r3, r3, #1
  4022ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4022be:	ebb6 0e02 	subs.w	lr, r6, r2
  4022c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022c6:	bf22      	ittt	cs
  4022c8:	1ab6      	subcs	r6, r6, r2
  4022ca:	4675      	movcs	r5, lr
  4022cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4022d0:	085b      	lsrs	r3, r3, #1
  4022d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4022d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4022da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022de:	bf22      	ittt	cs
  4022e0:	1ab6      	subcs	r6, r6, r2
  4022e2:	4675      	movcs	r5, lr
  4022e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4022e8:	085b      	lsrs	r3, r3, #1
  4022ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4022ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4022f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022f6:	bf22      	ittt	cs
  4022f8:	1ab6      	subcs	r6, r6, r2
  4022fa:	4675      	movcs	r5, lr
  4022fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402300:	ea55 0e06 	orrs.w	lr, r5, r6
  402304:	d018      	beq.n	402338 <__aeabi_ddiv+0x114>
  402306:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40230a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40230e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402312:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402316:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40231a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40231e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402322:	d1c0      	bne.n	4022a6 <__aeabi_ddiv+0x82>
  402324:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402328:	d10b      	bne.n	402342 <__aeabi_ddiv+0x11e>
  40232a:	ea41 0100 	orr.w	r1, r1, r0
  40232e:	f04f 0000 	mov.w	r0, #0
  402332:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402336:	e7b6      	b.n	4022a6 <__aeabi_ddiv+0x82>
  402338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40233c:	bf04      	itt	eq
  40233e:	4301      	orreq	r1, r0
  402340:	2000      	moveq	r0, #0
  402342:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402346:	bf88      	it	hi
  402348:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40234c:	f63f aeaf 	bhi.w	4020ae <__aeabi_dmul+0xde>
  402350:	ebb5 0c03 	subs.w	ip, r5, r3
  402354:	bf04      	itt	eq
  402356:	ebb6 0c02 	subseq.w	ip, r6, r2
  40235a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40235e:	f150 0000 	adcs.w	r0, r0, #0
  402362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402366:	bd70      	pop	{r4, r5, r6, pc}
  402368:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40236c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402370:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402374:	bfc2      	ittt	gt
  402376:	ebd4 050c 	rsbsgt	r5, r4, ip
  40237a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40237e:	bd70      	popgt	{r4, r5, r6, pc}
  402380:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402384:	f04f 0e00 	mov.w	lr, #0
  402388:	3c01      	subs	r4, #1
  40238a:	e690      	b.n	4020ae <__aeabi_dmul+0xde>
  40238c:	ea45 0e06 	orr.w	lr, r5, r6
  402390:	e68d      	b.n	4020ae <__aeabi_dmul+0xde>
  402392:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402396:	ea94 0f0c 	teq	r4, ip
  40239a:	bf08      	it	eq
  40239c:	ea95 0f0c 	teqeq	r5, ip
  4023a0:	f43f af3b 	beq.w	40221a <__aeabi_dmul+0x24a>
  4023a4:	ea94 0f0c 	teq	r4, ip
  4023a8:	d10a      	bne.n	4023c0 <__aeabi_ddiv+0x19c>
  4023aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4023ae:	f47f af34 	bne.w	40221a <__aeabi_dmul+0x24a>
  4023b2:	ea95 0f0c 	teq	r5, ip
  4023b6:	f47f af25 	bne.w	402204 <__aeabi_dmul+0x234>
  4023ba:	4610      	mov	r0, r2
  4023bc:	4619      	mov	r1, r3
  4023be:	e72c      	b.n	40221a <__aeabi_dmul+0x24a>
  4023c0:	ea95 0f0c 	teq	r5, ip
  4023c4:	d106      	bne.n	4023d4 <__aeabi_ddiv+0x1b0>
  4023c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4023ca:	f43f aefd 	beq.w	4021c8 <__aeabi_dmul+0x1f8>
  4023ce:	4610      	mov	r0, r2
  4023d0:	4619      	mov	r1, r3
  4023d2:	e722      	b.n	40221a <__aeabi_dmul+0x24a>
  4023d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4023d8:	bf18      	it	ne
  4023da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4023de:	f47f aec5 	bne.w	40216c <__aeabi_dmul+0x19c>
  4023e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4023e6:	f47f af0d 	bne.w	402204 <__aeabi_dmul+0x234>
  4023ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4023ee:	f47f aeeb 	bne.w	4021c8 <__aeabi_dmul+0x1f8>
  4023f2:	e712      	b.n	40221a <__aeabi_dmul+0x24a>

004023f4 <__aeabi_d2iz>:
  4023f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4023f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4023fc:	d215      	bcs.n	40242a <__aeabi_d2iz+0x36>
  4023fe:	d511      	bpl.n	402424 <__aeabi_d2iz+0x30>
  402400:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402404:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402408:	d912      	bls.n	402430 <__aeabi_d2iz+0x3c>
  40240a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40240e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402412:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402416:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40241a:	fa23 f002 	lsr.w	r0, r3, r2
  40241e:	bf18      	it	ne
  402420:	4240      	negne	r0, r0
  402422:	4770      	bx	lr
  402424:	f04f 0000 	mov.w	r0, #0
  402428:	4770      	bx	lr
  40242a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40242e:	d105      	bne.n	40243c <__aeabi_d2iz+0x48>
  402430:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402434:	bf08      	it	eq
  402436:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40243a:	4770      	bx	lr
  40243c:	f04f 0000 	mov.w	r0, #0
  402440:	4770      	bx	lr
  402442:	bf00      	nop

00402444 <__aeabi_uldivmod>:
  402444:	b953      	cbnz	r3, 40245c <__aeabi_uldivmod+0x18>
  402446:	b94a      	cbnz	r2, 40245c <__aeabi_uldivmod+0x18>
  402448:	2900      	cmp	r1, #0
  40244a:	bf08      	it	eq
  40244c:	2800      	cmpeq	r0, #0
  40244e:	bf1c      	itt	ne
  402450:	f04f 31ff 	movne.w	r1, #4294967295
  402454:	f04f 30ff 	movne.w	r0, #4294967295
  402458:	f000 b97a 	b.w	402750 <__aeabi_idiv0>
  40245c:	f1ad 0c08 	sub.w	ip, sp, #8
  402460:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402464:	f000 f806 	bl	402474 <__udivmoddi4>
  402468:	f8dd e004 	ldr.w	lr, [sp, #4]
  40246c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402470:	b004      	add	sp, #16
  402472:	4770      	bx	lr

00402474 <__udivmoddi4>:
  402474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402478:	468c      	mov	ip, r1
  40247a:	460d      	mov	r5, r1
  40247c:	4604      	mov	r4, r0
  40247e:	9e08      	ldr	r6, [sp, #32]
  402480:	2b00      	cmp	r3, #0
  402482:	d151      	bne.n	402528 <__udivmoddi4+0xb4>
  402484:	428a      	cmp	r2, r1
  402486:	4617      	mov	r7, r2
  402488:	d96d      	bls.n	402566 <__udivmoddi4+0xf2>
  40248a:	fab2 fe82 	clz	lr, r2
  40248e:	f1be 0f00 	cmp.w	lr, #0
  402492:	d00b      	beq.n	4024ac <__udivmoddi4+0x38>
  402494:	f1ce 0c20 	rsb	ip, lr, #32
  402498:	fa01 f50e 	lsl.w	r5, r1, lr
  40249c:	fa20 fc0c 	lsr.w	ip, r0, ip
  4024a0:	fa02 f70e 	lsl.w	r7, r2, lr
  4024a4:	ea4c 0c05 	orr.w	ip, ip, r5
  4024a8:	fa00 f40e 	lsl.w	r4, r0, lr
  4024ac:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4024b0:	0c25      	lsrs	r5, r4, #16
  4024b2:	fbbc f8fa 	udiv	r8, ip, sl
  4024b6:	fa1f f987 	uxth.w	r9, r7
  4024ba:	fb0a cc18 	mls	ip, sl, r8, ip
  4024be:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4024c2:	fb08 f309 	mul.w	r3, r8, r9
  4024c6:	42ab      	cmp	r3, r5
  4024c8:	d90a      	bls.n	4024e0 <__udivmoddi4+0x6c>
  4024ca:	19ed      	adds	r5, r5, r7
  4024cc:	f108 32ff 	add.w	r2, r8, #4294967295
  4024d0:	f080 8123 	bcs.w	40271a <__udivmoddi4+0x2a6>
  4024d4:	42ab      	cmp	r3, r5
  4024d6:	f240 8120 	bls.w	40271a <__udivmoddi4+0x2a6>
  4024da:	f1a8 0802 	sub.w	r8, r8, #2
  4024de:	443d      	add	r5, r7
  4024e0:	1aed      	subs	r5, r5, r3
  4024e2:	b2a4      	uxth	r4, r4
  4024e4:	fbb5 f0fa 	udiv	r0, r5, sl
  4024e8:	fb0a 5510 	mls	r5, sl, r0, r5
  4024ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4024f0:	fb00 f909 	mul.w	r9, r0, r9
  4024f4:	45a1      	cmp	r9, r4
  4024f6:	d909      	bls.n	40250c <__udivmoddi4+0x98>
  4024f8:	19e4      	adds	r4, r4, r7
  4024fa:	f100 33ff 	add.w	r3, r0, #4294967295
  4024fe:	f080 810a 	bcs.w	402716 <__udivmoddi4+0x2a2>
  402502:	45a1      	cmp	r9, r4
  402504:	f240 8107 	bls.w	402716 <__udivmoddi4+0x2a2>
  402508:	3802      	subs	r0, #2
  40250a:	443c      	add	r4, r7
  40250c:	eba4 0409 	sub.w	r4, r4, r9
  402510:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402514:	2100      	movs	r1, #0
  402516:	2e00      	cmp	r6, #0
  402518:	d061      	beq.n	4025de <__udivmoddi4+0x16a>
  40251a:	fa24 f40e 	lsr.w	r4, r4, lr
  40251e:	2300      	movs	r3, #0
  402520:	6034      	str	r4, [r6, #0]
  402522:	6073      	str	r3, [r6, #4]
  402524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402528:	428b      	cmp	r3, r1
  40252a:	d907      	bls.n	40253c <__udivmoddi4+0xc8>
  40252c:	2e00      	cmp	r6, #0
  40252e:	d054      	beq.n	4025da <__udivmoddi4+0x166>
  402530:	2100      	movs	r1, #0
  402532:	e886 0021 	stmia.w	r6, {r0, r5}
  402536:	4608      	mov	r0, r1
  402538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40253c:	fab3 f183 	clz	r1, r3
  402540:	2900      	cmp	r1, #0
  402542:	f040 808e 	bne.w	402662 <__udivmoddi4+0x1ee>
  402546:	42ab      	cmp	r3, r5
  402548:	d302      	bcc.n	402550 <__udivmoddi4+0xdc>
  40254a:	4282      	cmp	r2, r0
  40254c:	f200 80fa 	bhi.w	402744 <__udivmoddi4+0x2d0>
  402550:	1a84      	subs	r4, r0, r2
  402552:	eb65 0503 	sbc.w	r5, r5, r3
  402556:	2001      	movs	r0, #1
  402558:	46ac      	mov	ip, r5
  40255a:	2e00      	cmp	r6, #0
  40255c:	d03f      	beq.n	4025de <__udivmoddi4+0x16a>
  40255e:	e886 1010 	stmia.w	r6, {r4, ip}
  402562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402566:	b912      	cbnz	r2, 40256e <__udivmoddi4+0xfa>
  402568:	2701      	movs	r7, #1
  40256a:	fbb7 f7f2 	udiv	r7, r7, r2
  40256e:	fab7 fe87 	clz	lr, r7
  402572:	f1be 0f00 	cmp.w	lr, #0
  402576:	d134      	bne.n	4025e2 <__udivmoddi4+0x16e>
  402578:	1beb      	subs	r3, r5, r7
  40257a:	0c3a      	lsrs	r2, r7, #16
  40257c:	fa1f fc87 	uxth.w	ip, r7
  402580:	2101      	movs	r1, #1
  402582:	fbb3 f8f2 	udiv	r8, r3, r2
  402586:	0c25      	lsrs	r5, r4, #16
  402588:	fb02 3318 	mls	r3, r2, r8, r3
  40258c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402590:	fb0c f308 	mul.w	r3, ip, r8
  402594:	42ab      	cmp	r3, r5
  402596:	d907      	bls.n	4025a8 <__udivmoddi4+0x134>
  402598:	19ed      	adds	r5, r5, r7
  40259a:	f108 30ff 	add.w	r0, r8, #4294967295
  40259e:	d202      	bcs.n	4025a6 <__udivmoddi4+0x132>
  4025a0:	42ab      	cmp	r3, r5
  4025a2:	f200 80d1 	bhi.w	402748 <__udivmoddi4+0x2d4>
  4025a6:	4680      	mov	r8, r0
  4025a8:	1aed      	subs	r5, r5, r3
  4025aa:	b2a3      	uxth	r3, r4
  4025ac:	fbb5 f0f2 	udiv	r0, r5, r2
  4025b0:	fb02 5510 	mls	r5, r2, r0, r5
  4025b4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4025b8:	fb0c fc00 	mul.w	ip, ip, r0
  4025bc:	45a4      	cmp	ip, r4
  4025be:	d907      	bls.n	4025d0 <__udivmoddi4+0x15c>
  4025c0:	19e4      	adds	r4, r4, r7
  4025c2:	f100 33ff 	add.w	r3, r0, #4294967295
  4025c6:	d202      	bcs.n	4025ce <__udivmoddi4+0x15a>
  4025c8:	45a4      	cmp	ip, r4
  4025ca:	f200 80b8 	bhi.w	40273e <__udivmoddi4+0x2ca>
  4025ce:	4618      	mov	r0, r3
  4025d0:	eba4 040c 	sub.w	r4, r4, ip
  4025d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4025d8:	e79d      	b.n	402516 <__udivmoddi4+0xa2>
  4025da:	4631      	mov	r1, r6
  4025dc:	4630      	mov	r0, r6
  4025de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025e2:	f1ce 0420 	rsb	r4, lr, #32
  4025e6:	fa05 f30e 	lsl.w	r3, r5, lr
  4025ea:	fa07 f70e 	lsl.w	r7, r7, lr
  4025ee:	fa20 f804 	lsr.w	r8, r0, r4
  4025f2:	0c3a      	lsrs	r2, r7, #16
  4025f4:	fa25 f404 	lsr.w	r4, r5, r4
  4025f8:	ea48 0803 	orr.w	r8, r8, r3
  4025fc:	fbb4 f1f2 	udiv	r1, r4, r2
  402600:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402604:	fb02 4411 	mls	r4, r2, r1, r4
  402608:	fa1f fc87 	uxth.w	ip, r7
  40260c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402610:	fb01 f30c 	mul.w	r3, r1, ip
  402614:	42ab      	cmp	r3, r5
  402616:	fa00 f40e 	lsl.w	r4, r0, lr
  40261a:	d909      	bls.n	402630 <__udivmoddi4+0x1bc>
  40261c:	19ed      	adds	r5, r5, r7
  40261e:	f101 30ff 	add.w	r0, r1, #4294967295
  402622:	f080 808a 	bcs.w	40273a <__udivmoddi4+0x2c6>
  402626:	42ab      	cmp	r3, r5
  402628:	f240 8087 	bls.w	40273a <__udivmoddi4+0x2c6>
  40262c:	3902      	subs	r1, #2
  40262e:	443d      	add	r5, r7
  402630:	1aeb      	subs	r3, r5, r3
  402632:	fa1f f588 	uxth.w	r5, r8
  402636:	fbb3 f0f2 	udiv	r0, r3, r2
  40263a:	fb02 3310 	mls	r3, r2, r0, r3
  40263e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402642:	fb00 f30c 	mul.w	r3, r0, ip
  402646:	42ab      	cmp	r3, r5
  402648:	d907      	bls.n	40265a <__udivmoddi4+0x1e6>
  40264a:	19ed      	adds	r5, r5, r7
  40264c:	f100 38ff 	add.w	r8, r0, #4294967295
  402650:	d26f      	bcs.n	402732 <__udivmoddi4+0x2be>
  402652:	42ab      	cmp	r3, r5
  402654:	d96d      	bls.n	402732 <__udivmoddi4+0x2be>
  402656:	3802      	subs	r0, #2
  402658:	443d      	add	r5, r7
  40265a:	1aeb      	subs	r3, r5, r3
  40265c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402660:	e78f      	b.n	402582 <__udivmoddi4+0x10e>
  402662:	f1c1 0720 	rsb	r7, r1, #32
  402666:	fa22 f807 	lsr.w	r8, r2, r7
  40266a:	408b      	lsls	r3, r1
  40266c:	fa05 f401 	lsl.w	r4, r5, r1
  402670:	ea48 0303 	orr.w	r3, r8, r3
  402674:	fa20 fe07 	lsr.w	lr, r0, r7
  402678:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40267c:	40fd      	lsrs	r5, r7
  40267e:	ea4e 0e04 	orr.w	lr, lr, r4
  402682:	fbb5 f9fc 	udiv	r9, r5, ip
  402686:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40268a:	fb0c 5519 	mls	r5, ip, r9, r5
  40268e:	fa1f f883 	uxth.w	r8, r3
  402692:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402696:	fb09 f408 	mul.w	r4, r9, r8
  40269a:	42ac      	cmp	r4, r5
  40269c:	fa02 f201 	lsl.w	r2, r2, r1
  4026a0:	fa00 fa01 	lsl.w	sl, r0, r1
  4026a4:	d908      	bls.n	4026b8 <__udivmoddi4+0x244>
  4026a6:	18ed      	adds	r5, r5, r3
  4026a8:	f109 30ff 	add.w	r0, r9, #4294967295
  4026ac:	d243      	bcs.n	402736 <__udivmoddi4+0x2c2>
  4026ae:	42ac      	cmp	r4, r5
  4026b0:	d941      	bls.n	402736 <__udivmoddi4+0x2c2>
  4026b2:	f1a9 0902 	sub.w	r9, r9, #2
  4026b6:	441d      	add	r5, r3
  4026b8:	1b2d      	subs	r5, r5, r4
  4026ba:	fa1f fe8e 	uxth.w	lr, lr
  4026be:	fbb5 f0fc 	udiv	r0, r5, ip
  4026c2:	fb0c 5510 	mls	r5, ip, r0, r5
  4026c6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4026ca:	fb00 f808 	mul.w	r8, r0, r8
  4026ce:	45a0      	cmp	r8, r4
  4026d0:	d907      	bls.n	4026e2 <__udivmoddi4+0x26e>
  4026d2:	18e4      	adds	r4, r4, r3
  4026d4:	f100 35ff 	add.w	r5, r0, #4294967295
  4026d8:	d229      	bcs.n	40272e <__udivmoddi4+0x2ba>
  4026da:	45a0      	cmp	r8, r4
  4026dc:	d927      	bls.n	40272e <__udivmoddi4+0x2ba>
  4026de:	3802      	subs	r0, #2
  4026e0:	441c      	add	r4, r3
  4026e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4026e6:	eba4 0408 	sub.w	r4, r4, r8
  4026ea:	fba0 8902 	umull	r8, r9, r0, r2
  4026ee:	454c      	cmp	r4, r9
  4026f0:	46c6      	mov	lr, r8
  4026f2:	464d      	mov	r5, r9
  4026f4:	d315      	bcc.n	402722 <__udivmoddi4+0x2ae>
  4026f6:	d012      	beq.n	40271e <__udivmoddi4+0x2aa>
  4026f8:	b156      	cbz	r6, 402710 <__udivmoddi4+0x29c>
  4026fa:	ebba 030e 	subs.w	r3, sl, lr
  4026fe:	eb64 0405 	sbc.w	r4, r4, r5
  402702:	fa04 f707 	lsl.w	r7, r4, r7
  402706:	40cb      	lsrs	r3, r1
  402708:	431f      	orrs	r7, r3
  40270a:	40cc      	lsrs	r4, r1
  40270c:	6037      	str	r7, [r6, #0]
  40270e:	6074      	str	r4, [r6, #4]
  402710:	2100      	movs	r1, #0
  402712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402716:	4618      	mov	r0, r3
  402718:	e6f8      	b.n	40250c <__udivmoddi4+0x98>
  40271a:	4690      	mov	r8, r2
  40271c:	e6e0      	b.n	4024e0 <__udivmoddi4+0x6c>
  40271e:	45c2      	cmp	sl, r8
  402720:	d2ea      	bcs.n	4026f8 <__udivmoddi4+0x284>
  402722:	ebb8 0e02 	subs.w	lr, r8, r2
  402726:	eb69 0503 	sbc.w	r5, r9, r3
  40272a:	3801      	subs	r0, #1
  40272c:	e7e4      	b.n	4026f8 <__udivmoddi4+0x284>
  40272e:	4628      	mov	r0, r5
  402730:	e7d7      	b.n	4026e2 <__udivmoddi4+0x26e>
  402732:	4640      	mov	r0, r8
  402734:	e791      	b.n	40265a <__udivmoddi4+0x1e6>
  402736:	4681      	mov	r9, r0
  402738:	e7be      	b.n	4026b8 <__udivmoddi4+0x244>
  40273a:	4601      	mov	r1, r0
  40273c:	e778      	b.n	402630 <__udivmoddi4+0x1bc>
  40273e:	3802      	subs	r0, #2
  402740:	443c      	add	r4, r7
  402742:	e745      	b.n	4025d0 <__udivmoddi4+0x15c>
  402744:	4608      	mov	r0, r1
  402746:	e708      	b.n	40255a <__udivmoddi4+0xe6>
  402748:	f1a8 0802 	sub.w	r8, r8, #2
  40274c:	443d      	add	r5, r7
  40274e:	e72b      	b.n	4025a8 <__udivmoddi4+0x134>

00402750 <__aeabi_idiv0>:
  402750:	4770      	bx	lr
  402752:	bf00      	nop

00402754 <__libc_init_array>:
  402754:	b570      	push	{r4, r5, r6, lr}
  402756:	4e0f      	ldr	r6, [pc, #60]	; (402794 <__libc_init_array+0x40>)
  402758:	4d0f      	ldr	r5, [pc, #60]	; (402798 <__libc_init_array+0x44>)
  40275a:	1b76      	subs	r6, r6, r5
  40275c:	10b6      	asrs	r6, r6, #2
  40275e:	bf18      	it	ne
  402760:	2400      	movne	r4, #0
  402762:	d005      	beq.n	402770 <__libc_init_array+0x1c>
  402764:	3401      	adds	r4, #1
  402766:	f855 3b04 	ldr.w	r3, [r5], #4
  40276a:	4798      	blx	r3
  40276c:	42a6      	cmp	r6, r4
  40276e:	d1f9      	bne.n	402764 <__libc_init_array+0x10>
  402770:	4e0a      	ldr	r6, [pc, #40]	; (40279c <__libc_init_array+0x48>)
  402772:	4d0b      	ldr	r5, [pc, #44]	; (4027a0 <__libc_init_array+0x4c>)
  402774:	1b76      	subs	r6, r6, r5
  402776:	f000 fb17 	bl	402da8 <_init>
  40277a:	10b6      	asrs	r6, r6, #2
  40277c:	bf18      	it	ne
  40277e:	2400      	movne	r4, #0
  402780:	d006      	beq.n	402790 <__libc_init_array+0x3c>
  402782:	3401      	adds	r4, #1
  402784:	f855 3b04 	ldr.w	r3, [r5], #4
  402788:	4798      	blx	r3
  40278a:	42a6      	cmp	r6, r4
  40278c:	d1f9      	bne.n	402782 <__libc_init_array+0x2e>
  40278e:	bd70      	pop	{r4, r5, r6, pc}
  402790:	bd70      	pop	{r4, r5, r6, pc}
  402792:	bf00      	nop
  402794:	00402db4 	.word	0x00402db4
  402798:	00402db4 	.word	0x00402db4
  40279c:	00402dbc 	.word	0x00402dbc
  4027a0:	00402db4 	.word	0x00402db4

004027a4 <register_fini>:
  4027a4:	4b02      	ldr	r3, [pc, #8]	; (4027b0 <register_fini+0xc>)
  4027a6:	b113      	cbz	r3, 4027ae <register_fini+0xa>
  4027a8:	4802      	ldr	r0, [pc, #8]	; (4027b4 <register_fini+0x10>)
  4027aa:	f000 b805 	b.w	4027b8 <atexit>
  4027ae:	4770      	bx	lr
  4027b0:	00000000 	.word	0x00000000
  4027b4:	004027c5 	.word	0x004027c5

004027b8 <atexit>:
  4027b8:	2300      	movs	r3, #0
  4027ba:	4601      	mov	r1, r0
  4027bc:	461a      	mov	r2, r3
  4027be:	4618      	mov	r0, r3
  4027c0:	f000 b81e 	b.w	402800 <__register_exitproc>

004027c4 <__libc_fini_array>:
  4027c4:	b538      	push	{r3, r4, r5, lr}
  4027c6:	4c0a      	ldr	r4, [pc, #40]	; (4027f0 <__libc_fini_array+0x2c>)
  4027c8:	4d0a      	ldr	r5, [pc, #40]	; (4027f4 <__libc_fini_array+0x30>)
  4027ca:	1b64      	subs	r4, r4, r5
  4027cc:	10a4      	asrs	r4, r4, #2
  4027ce:	d00a      	beq.n	4027e6 <__libc_fini_array+0x22>
  4027d0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4027d4:	3b01      	subs	r3, #1
  4027d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4027da:	3c01      	subs	r4, #1
  4027dc:	f855 3904 	ldr.w	r3, [r5], #-4
  4027e0:	4798      	blx	r3
  4027e2:	2c00      	cmp	r4, #0
  4027e4:	d1f9      	bne.n	4027da <__libc_fini_array+0x16>
  4027e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4027ea:	f000 bae7 	b.w	402dbc <_fini>
  4027ee:	bf00      	nop
  4027f0:	00402dcc 	.word	0x00402dcc
  4027f4:	00402dc8 	.word	0x00402dc8

004027f8 <__retarget_lock_acquire_recursive>:
  4027f8:	4770      	bx	lr
  4027fa:	bf00      	nop

004027fc <__retarget_lock_release_recursive>:
  4027fc:	4770      	bx	lr
  4027fe:	bf00      	nop

00402800 <__register_exitproc>:
  402800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402804:	4d2c      	ldr	r5, [pc, #176]	; (4028b8 <__register_exitproc+0xb8>)
  402806:	4606      	mov	r6, r0
  402808:	6828      	ldr	r0, [r5, #0]
  40280a:	4698      	mov	r8, r3
  40280c:	460f      	mov	r7, r1
  40280e:	4691      	mov	r9, r2
  402810:	f7ff fff2 	bl	4027f8 <__retarget_lock_acquire_recursive>
  402814:	4b29      	ldr	r3, [pc, #164]	; (4028bc <__register_exitproc+0xbc>)
  402816:	681c      	ldr	r4, [r3, #0]
  402818:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40281c:	2b00      	cmp	r3, #0
  40281e:	d03e      	beq.n	40289e <__register_exitproc+0x9e>
  402820:	685a      	ldr	r2, [r3, #4]
  402822:	2a1f      	cmp	r2, #31
  402824:	dc1c      	bgt.n	402860 <__register_exitproc+0x60>
  402826:	f102 0e01 	add.w	lr, r2, #1
  40282a:	b176      	cbz	r6, 40284a <__register_exitproc+0x4a>
  40282c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402830:	2401      	movs	r4, #1
  402832:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402836:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40283a:	4094      	lsls	r4, r2
  40283c:	4320      	orrs	r0, r4
  40283e:	2e02      	cmp	r6, #2
  402840:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402844:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402848:	d023      	beq.n	402892 <__register_exitproc+0x92>
  40284a:	3202      	adds	r2, #2
  40284c:	f8c3 e004 	str.w	lr, [r3, #4]
  402850:	6828      	ldr	r0, [r5, #0]
  402852:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402856:	f7ff ffd1 	bl	4027fc <__retarget_lock_release_recursive>
  40285a:	2000      	movs	r0, #0
  40285c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402860:	4b17      	ldr	r3, [pc, #92]	; (4028c0 <__register_exitproc+0xc0>)
  402862:	b30b      	cbz	r3, 4028a8 <__register_exitproc+0xa8>
  402864:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402868:	f3af 8000 	nop.w
  40286c:	4603      	mov	r3, r0
  40286e:	b1d8      	cbz	r0, 4028a8 <__register_exitproc+0xa8>
  402870:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402874:	6002      	str	r2, [r0, #0]
  402876:	2100      	movs	r1, #0
  402878:	6041      	str	r1, [r0, #4]
  40287a:	460a      	mov	r2, r1
  40287c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402880:	f04f 0e01 	mov.w	lr, #1
  402884:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402888:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40288c:	2e00      	cmp	r6, #0
  40288e:	d0dc      	beq.n	40284a <__register_exitproc+0x4a>
  402890:	e7cc      	b.n	40282c <__register_exitproc+0x2c>
  402892:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402896:	430c      	orrs	r4, r1
  402898:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40289c:	e7d5      	b.n	40284a <__register_exitproc+0x4a>
  40289e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4028a2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4028a6:	e7bb      	b.n	402820 <__register_exitproc+0x20>
  4028a8:	6828      	ldr	r0, [r5, #0]
  4028aa:	f7ff ffa7 	bl	4027fc <__retarget_lock_release_recursive>
  4028ae:	f04f 30ff 	mov.w	r0, #4294967295
  4028b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4028b6:	bf00      	nop
  4028b8:	20400440 	.word	0x20400440
  4028bc:	00402da4 	.word	0x00402da4
  4028c0:	00000000 	.word	0x00000000

004028c4 <n1>:
  4028c4:	00000a4d 00000a4d 00000000 00000a4d     M...M.......M...
  4028d4:	00000000 0000082d 00000a4d 00000000     ....-...M.......
  4028e4:	00000c40 00000000 00000000 00000000     @...............
  4028f4:	00000620 00000000 00000000 00000000      ...............
  402904:	0000082d 00000000 00000000 00000620     -........... ...
	...
  40291c:	00000527 00000000 00000000 000006e0     '...............
  40292c:	00000000 000007b8 00000000 00000749     ............I...
  40293c:	000006e0 00000000 00000620 00000a4d     ........ ...M...
  40294c:	00000c40 00000dc0 00000000 00000aea     @...............
  40295c:	00000c40 00000000 00000a4d 00000000     @.......M.......
  40296c:	0000082d 0000092d 000007b8 00000000     -...-...........
  40297c:	00000000 0000082d 00000000 00000000     ....-...........
  40298c:	00000620 00000000 00000000 00000527      ...........'...
	...
  4029a4:	000006e0 00000000 000007b8 00000000     ................
  4029b4:	00000749 000006e0 00000000 00000620     I........... ...
  4029c4:	00000a4d 00000c40 00000dc0 00000000     M...@...........
  4029d4:	00000aea 00000c40 00000000 00000a4d     ....@.......M...
  4029e4:	00000000 0000082d 0000092d 000007b8     ....-...-.......

004029f4 <t1>:
  4029f4:	0000000c 0000000c 0000000c 0000000c     ................
  402a04:	0000000c 0000000c 0000000c 0000000c     ................
  402a14:	0000000c 0000000c 0000000c 0000000c     ................
  402a24:	0000000c 0000000c 0000000c 0000000c     ................
  402a34:	0000000c 0000000c 0000000c 0000000c     ................
  402a44:	0000000c 0000000c 0000000c 0000000c     ................
  402a54:	0000000c 0000000c 0000000c 0000000c     ................
  402a64:	0000000c 0000000c 0000000c 0000000c     ................
  402a74:	00000009 00000009 00000009 0000000c     ................
  402a84:	0000000c 0000000c 0000000c 0000000c     ................
  402a94:	0000000c 0000000c 0000000c 0000000c     ................
  402aa4:	0000000c 0000000c 0000000c 0000000c     ................
  402ab4:	0000000c 0000000c 0000000c 0000000c     ................
  402ac4:	0000000c 0000000c 0000000c 0000000c     ................
  402ad4:	0000000c 0000000c 0000000c 0000000c     ................
  402ae4:	0000000c 0000000c 0000000c 00000009     ................
  402af4:	00000009 00000009 0000000c 0000000c     ................
  402b04:	0000000c 0000000c 0000000c 0000000c     ................
  402b14:	0000000c 0000000c 0000000c 0000000c     ................

00402b24 <n2>:
  402b24:	00000106 0000020b 000000dc 000001b8     ................
  402b34:	000000e9 000001d2 00000000 00000000     ................
  402b44:	00000106 0000020b 000000dc 000001b8     ................
  402b54:	000000e9 000001d2 00000000 00000000     ................
  402b64:	000000af 0000015d 00000093 00000126     ....].......&...
  402b74:	0000009c 00000137 00000000 00000000     ....7...........
  402b84:	000000af 0000015d 00000093 00000126     ....].......&...
  402b94:	0000009c 00000137 00000000 00000000     ....7...........
  402ba4:	00000137 00000115 00000126 00000115     7.......&.......
  402bb4:	00000137 00000137 000000d0 000000c4     7...7...........
  402bc4:	00000115 00000106 00000172 0000015d     ........r...]...
  402bd4:	000000a5 000001d2 000001b8 0000019f     ................
  402be4:	00000137 000000f7 000000e9 000000dc     7...............
  402bf4:	000000d0 00000000 00000000 00000000     ................

00402c04 <t2>:
  402c04:	0000000c 0000000c 0000000c 0000000c     ................
  402c14:	0000000c 0000000c 00000006 00000003     ................
  402c24:	0000000c 0000000c 0000000c 0000000c     ................
  402c34:	0000000c 0000000c 00000006 00000003     ................
  402c44:	0000000c 0000000c 0000000c 0000000c     ................
  402c54:	0000000c 0000000c 00000006 00000003     ................
  402c64:	0000000c 0000000c 0000000c 0000000c     ................
  402c74:	0000000c 0000000c 00000006 00000006     ................
  402c84:	00000012 00000012 00000012 00000006     ................
  402c94:	00000006 00000006 00000006 00000006     ................
  402ca4:	00000006 00000012 00000012 00000012     ................
  402cb4:	00000012 00000012 00000012 0000000a     ................
  402cc4:	0000000a 0000000a 0000000a 0000000a     ................
  402cd4:	0000000a 00000003 00000003 00000003     ................

00402ce4 <n3>:
  402ce4:	000002e4 000002e4 0000024b 000001ee     ........K.......
  402cf4:	000001ee 00000293 00000293 00000293     ................
  402d04:	0000033f 0000033f 00000370 000003dc     ?...?...p.......
  402d14:	00000370 00000370 00000370 00000293     p...p...p.......
  402d24:	0000024b 000002e4 000002e4 000002e4     K...............
  402d34:	00000293 00000293 000002e4 00000293     ................

00402d44 <t3>:
  402d44:	00000008 00000008 00000008 00000004     ................
  402d54:	00000004 00000004 00000004 00000005     ................
  402d64:	00000008 00000008 00000008 00000008     ................
  402d74:	00000008 00000008 00000008 00000004     ................
  402d84:	00000004 00000004 00000004 00000005     ................
  402d94:	00000008 00000008 00000008 00000008     ................

00402da4 <_global_impure_ptr>:
  402da4:	20400018                                ..@ 

00402da8 <_init>:
  402da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402daa:	bf00      	nop
  402dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402dae:	bc08      	pop	{r3}
  402db0:	469e      	mov	lr, r3
  402db2:	4770      	bx	lr

00402db4 <__init_array_start>:
  402db4:	004027a5 	.word	0x004027a5

00402db8 <__frame_dummy_init_array_entry>:
  402db8:	00400165                                e.@.

00402dbc <_fini>:
  402dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dbe:	bf00      	nop
  402dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402dc2:	bc08      	pop	{r3}
  402dc4:	469e      	mov	lr, r3
  402dc6:	4770      	bx	lr

00402dc8 <__fini_array_start>:
  402dc8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <ul_flash_in_wait_mode>:
2040000c:	0000 0020                                   .. .

20400010 <SystemCoreClock>:
20400010:	0900 003d 0000 0000                         ..=.....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	04e0 2040                                   ..@ 
